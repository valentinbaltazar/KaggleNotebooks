{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "aaeae405",
   "metadata": {
    "papermill": {
     "duration": 0.009195,
     "end_time": "2024-10-03T19:44:43.784147",
     "exception": false,
     "start_time": "2024-10-03T19:44:43.774952",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load Metrics Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e1639b67",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:43.803513Z",
     "iopub.status.busy": "2024-10-03T19:44:43.803049Z",
     "iopub.status.idle": "2024-10-03T19:44:48.168734Z",
     "shell.execute_reply": "2024-10-03T19:44:48.166563Z"
    },
    "papermill": {
     "duration": 4.379581,
     "end_time": "2024-10-03T19:44:48.172899",
     "exception": false,
     "start_time": "2024-10-03T19:44:43.793318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seq</th>\n",
       "      <th>res</th>\n",
       "      <th>elo</th>\n",
       "      <th>pred</th>\n",
       "      <th>evals</th>\n",
       "      <th>total_evals</th>\n",
       "      <th>invalid_seq</th>\n",
       "      <th>score</th>\n",
       "      <th>seq_len</th>\n",
       "      <th>inv_by_len</th>\n",
       "      <th>valid_by_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[(Nc3, e5, d3), (e4, e5, d4, exd4, Bc4, Nc6), ...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(Nc3, e5, d3, Nf6), (e4, e5, d4, exd4, Bc4, N...</td>\n",
       "      <td>[(32, -31), (-6, -2), (35, -40), None, None, (...</td>\n",
       "      <td>300</td>\n",
       "      <td>66</td>\n",
       "      <td>[1, -8, -5, 4, 124, 25, -2, 7, 6, 17, 20, -11,...</td>\n",
       "      <td>[3, 6, 5, 6, 5, 5, 6, 5, 4, 6, 6, 6, 6, 5, 6, ...</td>\n",
       "      <td>{3: 0, 6: 42, 5: 18, 4: 6, 2: 0, 1: 0}</td>\n",
       "      <td>{3: 29, 6: 62, 5: 75, 4: 58, 2: 9, 1: 1}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[(b3, d5, Bb2, c5, g3), (e4, c5, Nf3, g6, d4),...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(b3, d5, Bb2, c5, g3, Nc6), (e4, c5, Nf3, g6,...</td>\n",
       "      <td>[(30, -43), (-8, 64), None, (30, 49), (51, -24...</td>\n",
       "      <td>300</td>\n",
       "      <td>62</td>\n",
       "      <td>[-13, 56, 79, 27, 29, 22, 4, 3, 242, 2, 136, 3...</td>\n",
       "      <td>[5, 5, 4, 2, 4, 5, 5, 3, 5, 5, 5, 5, 4, 6, 6, ...</td>\n",
       "      <td>{5: 17, 4: 7, 2: 0, 3: 0, 6: 38}</td>\n",
       "      <td>{5: 69, 4: 60, 2: 5, 3: 40, 6: 64}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[(e4, c5, Bc4, d6, Nf3, Nc6), (d4, d5, Bf4, Nf...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, c5, Bc4, d6, Nf3, Nc6, d4), (d4, d5, Bf4...</td>\n",
       "      <td>[(23, -32), None, (44, -46), None, (-24, 30), ...</td>\n",
       "      <td>300</td>\n",
       "      <td>51</td>\n",
       "      <td>[-9, -2, 6, 3, 6, 2, 28, 17, 9, 10, -8, 12, 55...</td>\n",
       "      <td>[6, 6, 4, 5, 5, 4, 5, 6, 4, 5, 6, 5, 4, 6, 3, ...</td>\n",
       "      <td>{6: 25, 4: 9, 5: 16, 3: 1, 2: 0, 1: 0}</td>\n",
       "      <td>{6: 60, 4: 62, 5: 81, 3: 36, 2: 9, 1: 1}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[(d4, e6, a3), (e4, e5, Nf3, Bd6), (e4, d6, c3...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(d4, e6, a3, c6), (e4, e5, Nf3, Bd6, d4), (e4...</td>\n",
       "      <td>[(-9, 56), (79, -86), (-26, 54), None, (117, -...</td>\n",
       "      <td>300</td>\n",
       "      <td>55</td>\n",
       "      <td>[47, -7, 28, 19, 19, 10, 2, -6, -5, 141, 120, ...</td>\n",
       "      <td>[3, 4, 5, 6, 6, 6, 6, 6, 4, 3, 4, 6, 4, 6, 6, ...</td>\n",
       "      <td>{3: 1, 4: 7, 5: 15, 6: 32, 2: 0}</td>\n",
       "      <td>{3: 44, 4: 57, 5: 68, 6: 66, 2: 10}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[(Nf3, Nc6, e4, e5, Bc4), (d4, d5, e3, e6, f4,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(Nf3, Nc6, e4, e5, Bc4, Nc6), (d4, d5, e3, e6...</td>\n",
       "      <td>[None, (-6, 19), None, (5, -6), None, (-38, 26...</td>\n",
       "      <td>300</td>\n",
       "      <td>70</td>\n",
       "      <td>[13, -1, -12, 24, 40, -11, 32, 55, -11, -18, -...</td>\n",
       "      <td>[5, 6, 6, 4, 5, 5, 2, 4, 3, 6, 5, 6, 6, 4, 6, ...</td>\n",
       "      <td>{5: 17, 6: 40, 4: 12, 2: 0, 3: 1}</td>\n",
       "      <td>{5: 66, 6: 78, 4: 58, 2: 9, 3: 19}</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 seq  \\\n",
       "0  [(Nc3, e5, d3), (e4, e5, d4, exd4, Bc4, Nc6), ...   \n",
       "1  [(b3, d5, Bb2, c5, g3), (e4, c5, Nf3, g6, d4),...   \n",
       "2  [(e4, c5, Bc4, d6, Nf3, Nc6), (d4, d5, Bf4, Nf...   \n",
       "3  [(d4, e6, a3), (e4, e5, Nf3, Bd6), (e4, d6, c3...   \n",
       "4  [(Nf3, Nc6, e4, e5, Bc4), (d4, d5, e3, e6, f4,...   \n",
       "\n",
       "                                                 res    elo  \\\n",
       "0  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "1  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "2  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "3  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "4  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "\n",
       "                                                pred  \\\n",
       "0  [(Nc3, e5, d3, Nf6), (e4, e5, d4, exd4, Bc4, N...   \n",
       "1  [(b3, d5, Bb2, c5, g3, Nc6), (e4, c5, Nf3, g6,...   \n",
       "2  [(e4, c5, Bc4, d6, Nf3, Nc6, d4), (d4, d5, Bf4...   \n",
       "3  [(d4, e6, a3, c6), (e4, e5, Nf3, Bd6, d4), (e4...   \n",
       "4  [(Nf3, Nc6, e4, e5, Bc4, Nc6), (d4, d5, e3, e6...   \n",
       "\n",
       "                                               evals  total_evals  \\\n",
       "0  [(32, -31), (-6, -2), (35, -40), None, None, (...          300   \n",
       "1  [(30, -43), (-8, 64), None, (30, 49), (51, -24...          300   \n",
       "2  [(23, -32), None, (44, -46), None, (-24, 30), ...          300   \n",
       "3  [(-9, 56), (79, -86), (-26, 54), None, (117, -...          300   \n",
       "4  [None, (-6, 19), None, (5, -6), None, (-38, 26...          300   \n",
       "\n",
       "   invalid_seq                                              score  \\\n",
       "0           66  [1, -8, -5, 4, 124, 25, -2, 7, 6, 17, 20, -11,...   \n",
       "1           62  [-13, 56, 79, 27, 29, 22, 4, 3, 242, 2, 136, 3...   \n",
       "2           51  [-9, -2, 6, 3, 6, 2, 28, 17, 9, 10, -8, 12, 55...   \n",
       "3           55  [47, -7, 28, 19, 19, 10, 2, -6, -5, 141, 120, ...   \n",
       "4           70  [13, -1, -12, 24, 40, -11, 32, 55, -11, -18, -...   \n",
       "\n",
       "                                             seq_len  \\\n",
       "0  [3, 6, 5, 6, 5, 5, 6, 5, 4, 6, 6, 6, 6, 5, 6, ...   \n",
       "1  [5, 5, 4, 2, 4, 5, 5, 3, 5, 5, 5, 5, 4, 6, 6, ...   \n",
       "2  [6, 6, 4, 5, 5, 4, 5, 6, 4, 5, 6, 5, 4, 6, 3, ...   \n",
       "3  [3, 4, 5, 6, 6, 6, 6, 6, 4, 3, 4, 6, 4, 6, 6, ...   \n",
       "4  [5, 6, 6, 4, 5, 5, 2, 4, 3, 6, 5, 6, 6, 4, 6, ...   \n",
       "\n",
       "                               inv_by_len  \\\n",
       "0  {3: 0, 6: 42, 5: 18, 4: 6, 2: 0, 1: 0}   \n",
       "1        {5: 17, 4: 7, 2: 0, 3: 0, 6: 38}   \n",
       "2  {6: 25, 4: 9, 5: 16, 3: 1, 2: 0, 1: 0}   \n",
       "3        {3: 1, 4: 7, 5: 15, 6: 32, 2: 0}   \n",
       "4       {5: 17, 6: 40, 4: 12, 2: 0, 3: 1}   \n",
       "\n",
       "                               valid_by_len  \n",
       "0  {3: 29, 6: 62, 5: 75, 4: 58, 2: 9, 1: 1}  \n",
       "1        {5: 69, 4: 60, 2: 5, 3: 40, 6: 64}  \n",
       "2  {6: 60, 4: 62, 5: 81, 3: 36, 2: 9, 1: 1}  \n",
       "3       {3: 44, 4: 57, 5: 68, 6: 66, 2: 10}  \n",
       "4        {5: 66, 6: 78, 4: 58, 2: 9, 3: 19}  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# file_name = 'metrics_lora_infer_100'\n",
    "file_name = 'metrics_lora_infer_1000'\n",
    "\n",
    "\n",
    "df = pd.read_pickle(f'/kaggle/input/metric-evals-lora/{file_name}.pkl')\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ea149860",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:48.194004Z",
     "iopub.status.busy": "2024-10-03T19:44:48.193528Z",
     "iopub.status.idle": "2024-10-03T19:44:48.230838Z",
     "shell.execute_reply": "2024-10-03T19:44:48.228845Z"
    },
    "papermill": {
     "duration": 0.051706,
     "end_time": "2024-10-03T19:44:48.234533",
     "exception": false,
     "start_time": "2024-10-03T19:44:48.182827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 151 entries, 0 to 44\n",
      "Data columns (total 11 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   seq           151 non-null    object\n",
      " 1   res           151 non-null    object\n",
      " 2   elo           151 non-null    object\n",
      " 3   pred          151 non-null    object\n",
      " 4   evals         151 non-null    object\n",
      " 5   total_evals   151 non-null    int64 \n",
      " 6   invalid_seq   151 non-null    int64 \n",
      " 7   score         151 non-null    object\n",
      " 8   seq_len       151 non-null    object\n",
      " 9   inv_by_len    151 non-null    object\n",
      " 10  valid_by_len  151 non-null    object\n",
      "dtypes: int64(2), object(9)\n",
      "memory usage: 14.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2090a52c",
   "metadata": {
    "papermill": {
     "duration": 0.008522,
     "end_time": "2024-10-03T19:44:48.251674",
     "exception": false,
     "start_time": "2024-10-03T19:44:48.243152",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Sequence Length Distibutions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9907dba3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:48.272476Z",
     "iopub.status.busy": "2024-10-03T19:44:48.271556Z",
     "iopub.status.idle": "2024-10-03T19:44:49.026767Z",
     "shell.execute_reply": "2024-10-03T19:44:49.025250Z"
    },
    "papermill": {
     "duration": 0.769252,
     "end_time": "2024-10-03T19:44:49.030074",
     "exception": false,
     "start_time": "2024-10-03T19:44:48.260822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply Seaborn style\n",
    "sns.set(style=\"darkgrid\")\n",
    "\n",
    "# Create the histogram\n",
    "values = sum(df['seq_len'], [])\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(values, bins=range(min(values), max(values) + 2), align='left', edgecolor='black')\n",
    "\n",
    "# Add grid\n",
    "plt.grid(True)\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Length')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Sequence Length Distribution')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f65bb939",
   "metadata": {
    "papermill": {
     "duration": 0.010111,
     "end_time": "2024-10-03T19:44:49.051561",
     "exception": false,
     "start_time": "2024-10-03T19:44:49.041450",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ba6ae369",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:49.072711Z",
     "iopub.status.busy": "2024-10-03T19:44:49.072245Z",
     "iopub.status.idle": "2024-10-03T19:44:49.083464Z",
     "shell.execute_reply": "2024-10-03T19:44:49.081955Z"
    },
    "papermill": {
     "duration": 0.025516,
     "end_time": "2024-10-03T19:44:49.086652",
     "exception": false,
     "start_time": "2024-10-03T19:44:49.061136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "\n",
    "def group_len_valid(groups):\n",
    "    # Group by seq len and count valids\n",
    "    counter_tot = Counter()\n",
    "    \n",
    "    for item in groups:\n",
    "        # Sum dictionaries using Counter\n",
    "        counter_tot +=  Counter(item)\n",
    "    return dict(counter_tot)\n",
    "\n",
    "inv_tot = group_len_valid(df['inv_by_len'])\n",
    "val_tot = group_len_valid(df['valid_by_len'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c3879d13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:49.110340Z",
     "iopub.status.busy": "2024-10-03T19:44:49.109821Z",
     "iopub.status.idle": "2024-10-03T19:44:49.121461Z",
     "shell.execute_reply": "2024-10-03T19:44:49.119574Z"
    },
    "papermill": {
     "duration": 0.026052,
     "end_time": "2024-10-03T19:44:49.124413",
     "exception": false,
     "start_time": "2024-10-03T19:44:49.098361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no 1s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{6: 8431, 5: 2187, 4: 905, 3: 71, 2: 6, 1: 0}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "if 1 not in inv_tot.keys():\n",
    "    print(\"no 1s\")\n",
    "    inv_tot[1] = 0\n",
    "    \n",
    "inv_tot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ec56c33c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:49.146720Z",
     "iopub.status.busy": "2024-10-03T19:44:49.145484Z",
     "iopub.status.idle": "2024-10-03T19:44:49.154924Z",
     "shell.execute_reply": "2024-10-03T19:44:49.153705Z"
    },
    "papermill": {
     "duration": 0.023593,
     "end_time": "2024-10-03T19:44:49.158085",
     "exception": false,
     "start_time": "2024-10-03T19:44:49.134492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{3: 1918, 6: 14265, 5: 11315, 4: 5424, 2: 301, 1: 20}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "val_tot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "01488047",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:49.181102Z",
     "iopub.status.busy": "2024-10-03T19:44:49.180568Z",
     "iopub.status.idle": "2024-10-03T19:44:49.632323Z",
     "shell.execute_reply": "2024-10-03T19:44:49.630756Z"
    },
    "papermill": {
     "duration": 0.466773,
     "end_time": "2024-10-03T19:44:49.635248",
     "exception": false,
     "start_time": "2024-10-03T19:44:49.168475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Given dictionaries\n",
    "data1 = val_tot\n",
    "data2 = inv_tot\n",
    "\n",
    "# Separate the keys and values\n",
    "keys = list(data1.keys())\n",
    "values1 = [data1[key] for key in keys]\n",
    "values2 = [data2[key] for key in keys]\n",
    "\n",
    "# Create the bar plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(keys, values1, color='blue', label='Valid', align='center', edgecolor='black')\n",
    "\n",
    "# Stack the second dataset on top of the first\n",
    "plt.bar(keys, values2, bottom=values1, color='purple', label='Not Valid',  align='center', edgecolor='black')\n",
    "\n",
    "\n",
    "# Add text labels on top of each bar\n",
    "for i in range(len(keys)):\n",
    "    total = values1[i] + values2[i]\n",
    "    accuracy = round(100*values1[i]/total,1)\n",
    "    plt.text(keys[i], total + 1, str(accuracy), ha='center', va='bottom')\n",
    "\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Sequence Length')\n",
    "plt.ylabel('Counts')\n",
    "plt.title('Move Prediction % Accuracy')\n",
    "\n",
    "# Add a legend\n",
    "plt.legend()\n",
    "# plt.grid()\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63bcd956",
   "metadata": {
    "papermill": {
     "duration": 0.010157,
     "end_time": "2024-10-03T19:44:49.656289",
     "exception": false,
     "start_time": "2024-10-03T19:44:49.646132",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Evaluation of Model Strength"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "55ff95eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:49.682469Z",
     "iopub.status.busy": "2024-10-03T19:44:49.682001Z",
     "iopub.status.idle": "2024-10-03T19:44:50.290825Z",
     "shell.execute_reply": "2024-10-03T19:44:50.289392Z"
    },
    "papermill": {
     "duration": 0.625236,
     "end_time": "2024-10-03T19:44:50.293983",
     "exception": false,
     "start_time": "2024-10-03T19:44:49.668747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply Seaborn style\n",
    "sns.set(style=\"darkgrid\")\n",
    "\n",
    "# Create the histogram\n",
    "\n",
    "values = [s for s in sum(df['score'], []) if s<80_000] # Exclude lines with mate\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(values, bins=20, align='left', edgecolor='black')\n",
    "\n",
    "# Add grid\n",
    "plt.grid(True)\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Centipawn Value')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Change in Centipawn Loss')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37145bbc",
   "metadata": {
    "papermill": {
     "duration": 0.010132,
     "end_time": "2024-10-03T19:44:50.314831",
     "exception": false,
     "start_time": "2024-10-03T19:44:50.304699",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Weaknesses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "59620f51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:50.340711Z",
     "iopub.status.busy": "2024-10-03T19:44:50.340220Z",
     "iopub.status.idle": "2024-10-03T19:44:50.932559Z",
     "shell.execute_reply": "2024-10-03T19:44:50.931410Z"
    },
    "papermill": {
     "duration": 0.609034,
     "end_time": "2024-10-03T19:44:50.935394",
     "exception": false,
     "start_time": "2024-10-03T19:44:50.326360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seq</th>\n",
       "      <th>res</th>\n",
       "      <th>elo</th>\n",
       "      <th>pred</th>\n",
       "      <th>evals</th>\n",
       "      <th>total_evals</th>\n",
       "      <th>invalid_seq</th>\n",
       "      <th>score</th>\n",
       "      <th>seq_len</th>\n",
       "      <th>inv_by_len</th>\n",
       "      <th>valid_by_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[(Nc3, e5, d3), (e4, e5, d4, exd4, Bc4, Nc6), ...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(Nc3, e5, d3, Nf6), (e4, e5, d4, exd4, Bc4, N...</td>\n",
       "      <td>[(32, -31), (-6, -2), (35, -40), None, None, (...</td>\n",
       "      <td>300</td>\n",
       "      <td>66</td>\n",
       "      <td>[1, -8, -5, 4, 124, 25, -2, 7, 6, 17, 20, -11,...</td>\n",
       "      <td>[3, 6, 5, 6, 5, 5, 6, 5, 4, 6, 6, 6, 6, 5, 6, ...</td>\n",
       "      <td>{3: 0, 6: 42, 5: 18, 4: 6, 2: 0, 1: 0}</td>\n",
       "      <td>{3: 29, 6: 62, 5: 75, 4: 58, 2: 9, 1: 1}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[(b3, d5, Bb2, c5, g3), (e4, c5, Nf3, g6, d4),...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(b3, d5, Bb2, c5, g3, Nc6), (e4, c5, Nf3, g6,...</td>\n",
       "      <td>[(30, -43), (-8, 64), None, (30, 49), (51, -24...</td>\n",
       "      <td>300</td>\n",
       "      <td>62</td>\n",
       "      <td>[-13, 56, 79, 27, 29, 22, 4, 3, 242, 2, 136, 3...</td>\n",
       "      <td>[5, 5, 4, 2, 4, 5, 5, 3, 5, 5, 5, 5, 4, 6, 6, ...</td>\n",
       "      <td>{5: 17, 4: 7, 2: 0, 3: 0, 6: 38}</td>\n",
       "      <td>{5: 69, 4: 60, 2: 5, 3: 40, 6: 64}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[(e4, c5, Bc4, d6, Nf3, Nc6), (d4, d5, Bf4, Nf...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, c5, Bc4, d6, Nf3, Nc6, d4), (d4, d5, Bf4...</td>\n",
       "      <td>[(23, -32), None, (44, -46), None, (-24, 30), ...</td>\n",
       "      <td>300</td>\n",
       "      <td>51</td>\n",
       "      <td>[-9, -2, 6, 3, 6, 2, 28, 17, 9, 10, -8, 12, 55...</td>\n",
       "      <td>[6, 6, 4, 5, 5, 4, 5, 6, 4, 5, 6, 5, 4, 6, 3, ...</td>\n",
       "      <td>{6: 25, 4: 9, 5: 16, 3: 1, 2: 0, 1: 0}</td>\n",
       "      <td>{6: 60, 4: 62, 5: 81, 3: 36, 2: 9, 1: 1}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[(d4, e6, a3), (e4, e5, Nf3, Bd6), (e4, d6, c3...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(d4, e6, a3, c6), (e4, e5, Nf3, Bd6, d4), (e4...</td>\n",
       "      <td>[(-9, 56), (79, -86), (-26, 54), None, (117, -...</td>\n",
       "      <td>300</td>\n",
       "      <td>55</td>\n",
       "      <td>[47, -7, 28, 19, 19, 10, 2, -6, -5, 141, 120, ...</td>\n",
       "      <td>[3, 4, 5, 6, 6, 6, 6, 6, 4, 3, 4, 6, 4, 6, 6, ...</td>\n",
       "      <td>{3: 1, 4: 7, 5: 15, 6: 32, 2: 0}</td>\n",
       "      <td>{3: 44, 4: 57, 5: 68, 6: 66, 2: 10}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[(Nf3, Nc6, e4, e5, Bc4), (d4, d5, e3, e6, f4,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(Nf3, Nc6, e4, e5, Bc4, Nc6), (d4, d5, e3, e6...</td>\n",
       "      <td>[None, (-6, 19), None, (5, -6), None, (-38, 26...</td>\n",
       "      <td>300</td>\n",
       "      <td>70</td>\n",
       "      <td>[13, -1, -12, 24, 40, -11, 32, 55, -11, -18, -...</td>\n",
       "      <td>[5, 6, 6, 4, 5, 5, 2, 4, 3, 6, 5, 6, 6, 4, 6, ...</td>\n",
       "      <td>{5: 17, 6: 40, 4: 12, 2: 0, 3: 1}</td>\n",
       "      <td>{5: 66, 6: 78, 4: 58, 2: 9, 3: 19}</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 seq  \\\n",
       "0  [(Nc3, e5, d3), (e4, e5, d4, exd4, Bc4, Nc6), ...   \n",
       "1  [(b3, d5, Bb2, c5, g3), (e4, c5, Nf3, g6, d4),...   \n",
       "2  [(e4, c5, Bc4, d6, Nf3, Nc6), (d4, d5, Bf4, Nf...   \n",
       "3  [(d4, e6, a3), (e4, e5, Nf3, Bd6), (e4, d6, c3...   \n",
       "4  [(Nf3, Nc6, e4, e5, Bc4), (d4, d5, e3, e6, f4,...   \n",
       "\n",
       "                                                 res    elo  \\\n",
       "0  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "1  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "2  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "3  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "4  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "\n",
       "                                                pred  \\\n",
       "0  [(Nc3, e5, d3, Nf6), (e4, e5, d4, exd4, Bc4, N...   \n",
       "1  [(b3, d5, Bb2, c5, g3, Nc6), (e4, c5, Nf3, g6,...   \n",
       "2  [(e4, c5, Bc4, d6, Nf3, Nc6, d4), (d4, d5, Bf4...   \n",
       "3  [(d4, e6, a3, c6), (e4, e5, Nf3, Bd6, d4), (e4...   \n",
       "4  [(Nf3, Nc6, e4, e5, Bc4, Nc6), (d4, d5, e3, e6...   \n",
       "\n",
       "                                               evals  total_evals  \\\n",
       "0  [(32, -31), (-6, -2), (35, -40), None, None, (...          300   \n",
       "1  [(30, -43), (-8, 64), None, (30, 49), (51, -24...          300   \n",
       "2  [(23, -32), None, (44, -46), None, (-24, 30), ...          300   \n",
       "3  [(-9, 56), (79, -86), (-26, 54), None, (117, -...          300   \n",
       "4  [None, (-6, 19), None, (5, -6), None, (-38, 26...          300   \n",
       "\n",
       "   invalid_seq                                              score  \\\n",
       "0           66  [1, -8, -5, 4, 124, 25, -2, 7, 6, 17, 20, -11,...   \n",
       "1           62  [-13, 56, 79, 27, 29, 22, 4, 3, 242, 2, 136, 3...   \n",
       "2           51  [-9, -2, 6, 3, 6, 2, 28, 17, 9, 10, -8, 12, 55...   \n",
       "3           55  [47, -7, 28, 19, 19, 10, 2, -6, -5, 141, 120, ...   \n",
       "4           70  [13, -1, -12, 24, 40, -11, 32, 55, -11, -18, -...   \n",
       "\n",
       "                                             seq_len  \\\n",
       "0  [3, 6, 5, 6, 5, 5, 6, 5, 4, 6, 6, 6, 6, 5, 6, ...   \n",
       "1  [5, 5, 4, 2, 4, 5, 5, 3, 5, 5, 5, 5, 4, 6, 6, ...   \n",
       "2  [6, 6, 4, 5, 5, 4, 5, 6, 4, 5, 6, 5, 4, 6, 3, ...   \n",
       "3  [3, 4, 5, 6, 6, 6, 6, 6, 4, 3, 4, 6, 4, 6, 6, ...   \n",
       "4  [5, 6, 6, 4, 5, 5, 2, 4, 3, 6, 5, 6, 6, 4, 6, ...   \n",
       "\n",
       "                               inv_by_len  \\\n",
       "0  {3: 0, 6: 42, 5: 18, 4: 6, 2: 0, 1: 0}   \n",
       "1        {5: 17, 4: 7, 2: 0, 3: 0, 6: 38}   \n",
       "2  {6: 25, 4: 9, 5: 16, 3: 1, 2: 0, 1: 0}   \n",
       "3        {3: 1, 4: 7, 5: 15, 6: 32, 2: 0}   \n",
       "4       {5: 17, 6: 40, 4: 12, 2: 0, 3: 1}   \n",
       "\n",
       "                               valid_by_len  \n",
       "0  {3: 29, 6: 62, 5: 75, 4: 58, 2: 9, 1: 1}  \n",
       "1        {5: 69, 4: 60, 2: 5, 3: 40, 6: 64}  \n",
       "2  {6: 60, 4: 62, 5: 81, 3: 36, 2: 9, 1: 1}  \n",
       "3       {3: 44, 4: 57, 5: 68, 6: 66, 2: 10}  \n",
       "4        {5: 66, 6: 78, 4: 58, 2: 9, 3: 19}  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "654a9351",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:50.960092Z",
     "iopub.status.busy": "2024-10-03T19:44:50.959626Z",
     "iopub.status.idle": "2024-10-03T19:44:50.974667Z",
     "shell.execute_reply": "2024-10-03T19:44:50.973266Z"
    },
    "papermill": {
     "duration": 0.030552,
     "end_time": "2024-10-03T19:44:50.977360",
     "exception": false,
     "start_time": "2024-10-03T19:44:50.946808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# iters = [s for  s, evals in zip(slen,evals) if evals is not None]\n",
    "df['score_len'] = [[s for  s, evals in zip(slen,evals) if evals is not None] for slen,evals in zip(df['seq_len'],df['evals'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "60470edd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:51.002295Z",
     "iopub.status.busy": "2024-10-03T19:44:51.001810Z",
     "iopub.status.idle": "2024-10-03T19:44:51.009970Z",
     "shell.execute_reply": "2024-10-03T19:44:51.008493Z"
    },
    "papermill": {
     "duration": 0.024399,
     "end_time": "2024-10-03T19:44:51.013150",
     "exception": false,
     "start_time": "2024-10-03T19:44:50.988751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Failure rates by seq len\n",
    "from collections import defaultdict\n",
    "\n",
    "def group_by(list1, list2):\n",
    "    # Initialize a defaultdict to hold the aggregated sums\n",
    "    aggregated = defaultdict(int)\n",
    "#     counts = defaultdict(int)\n",
    "\n",
    "    \n",
    "    # Aggregate values by unique keys in list1 and sum corresponding values in list2\n",
    "    for key, value in zip(list1, list2):\n",
    "        if value < 80_000: # Exclude Mates\n",
    "            aggregated[key] += value\n",
    "#             counts[key] += 1\n",
    "\n",
    "    \n",
    "    # Convert back to a dictionary (if needed) and print the result\n",
    "#     result = {key: round(aggregated[key]/counts[key],2) for key in aggregated}\n",
    "    # print(result)\n",
    "    return dict(aggregated)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5324cae1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:51.038357Z",
     "iopub.status.busy": "2024-10-03T19:44:51.037603Z",
     "iopub.status.idle": "2024-10-03T19:44:51.047622Z",
     "shell.execute_reply": "2024-10-03T19:44:51.045959Z"
    },
    "papermill": {
     "duration": 0.026399,
     "end_time": "2024-10-03T19:44:51.051100",
     "exception": false,
     "start_time": "2024-10-03T19:44:51.024701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{3: 709, 6: 3317, 5: 4447, 4: 3829, 2: 56, 1: 8}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "group_by(df['score_len'].iloc[0],df['score'].iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6c271681",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:51.075725Z",
     "iopub.status.busy": "2024-10-03T19:44:51.075222Z",
     "iopub.status.idle": "2024-10-03T19:44:51.689053Z",
     "shell.execute_reply": "2024-10-03T19:44:51.687673Z"
    },
    "papermill": {
     "duration": 0.630593,
     "end_time": "2024-10-03T19:44:51.692871",
     "exception": false,
     "start_time": "2024-10-03T19:44:51.062278",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seq</th>\n",
       "      <th>res</th>\n",
       "      <th>elo</th>\n",
       "      <th>pred</th>\n",
       "      <th>evals</th>\n",
       "      <th>total_evals</th>\n",
       "      <th>invalid_seq</th>\n",
       "      <th>score</th>\n",
       "      <th>seq_len</th>\n",
       "      <th>inv_by_len</th>\n",
       "      <th>valid_by_len</th>\n",
       "      <th>score_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[(Nc3, e5, d3), (e4, e5, d4, exd4, Bc4, Nc6), ...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(Nc3, e5, d3, Nf6), (e4, e5, d4, exd4, Bc4, N...</td>\n",
       "      <td>[(32, -31), (-6, -2), (35, -40), None, None, (...</td>\n",
       "      <td>300</td>\n",
       "      <td>66</td>\n",
       "      <td>[1, -8, -5, 4, 124, 25, -2, 7, 6, 17, 20, -11,...</td>\n",
       "      <td>[3, 6, 5, 6, 5, 5, 6, 5, 4, 6, 6, 6, 6, 5, 6, ...</td>\n",
       "      <td>{3: 0, 6: 42, 5: 18, 4: 6, 2: 0, 1: 0}</td>\n",
       "      <td>{3: 29, 6: 62, 5: 75, 4: 58, 2: 9, 1: 1}</td>\n",
       "      <td>[3, 6, 5, 5, 4, 6, 6, 6, 6, 2, 4, 5, 6, 3, 5, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[(b3, d5, Bb2, c5, g3), (e4, c5, Nf3, g6, d4),...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(b3, d5, Bb2, c5, g3, Nc6), (e4, c5, Nf3, g6,...</td>\n",
       "      <td>[(30, -43), (-8, 64), None, (30, 49), (51, -24...</td>\n",
       "      <td>300</td>\n",
       "      <td>62</td>\n",
       "      <td>[-13, 56, 79, 27, 29, 22, 4, 3, 242, 2, 136, 3...</td>\n",
       "      <td>[5, 5, 4, 2, 4, 5, 5, 3, 5, 5, 5, 5, 4, 6, 6, ...</td>\n",
       "      <td>{5: 17, 4: 7, 2: 0, 3: 0, 6: 38}</td>\n",
       "      <td>{5: 69, 4: 60, 2: 5, 3: 40, 6: 64}</td>\n",
       "      <td>[5, 5, 2, 4, 5, 3, 5, 5, 5, 6, 6, 5, 5, 5, 6, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[(e4, c5, Bc4, d6, Nf3, Nc6), (d4, d5, Bf4, Nf...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, c5, Bc4, d6, Nf3, Nc6, d4), (d4, d5, Bf4...</td>\n",
       "      <td>[(23, -32), None, (44, -46), None, (-24, 30), ...</td>\n",
       "      <td>300</td>\n",
       "      <td>51</td>\n",
       "      <td>[-9, -2, 6, 3, 6, 2, 28, 17, 9, 10, -8, 12, 55...</td>\n",
       "      <td>[6, 6, 4, 5, 5, 4, 5, 6, 4, 5, 6, 5, 4, 6, 3, ...</td>\n",
       "      <td>{6: 25, 4: 9, 5: 16, 3: 1, 2: 0, 1: 0}</td>\n",
       "      <td>{6: 60, 4: 62, 5: 81, 3: 36, 2: 9, 1: 1}</td>\n",
       "      <td>[6, 4, 5, 4, 5, 6, 4, 5, 6, 5, 4, 6, 3, 4, 4, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[(d4, e6, a3), (e4, e5, Nf3, Bd6), (e4, d6, c3...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(d4, e6, a3, c6), (e4, e5, Nf3, Bd6, d4), (e4...</td>\n",
       "      <td>[(-9, 56), (79, -86), (-26, 54), None, (117, -...</td>\n",
       "      <td>300</td>\n",
       "      <td>55</td>\n",
       "      <td>[47, -7, 28, 19, 19, 10, 2, -6, -5, 141, 120, ...</td>\n",
       "      <td>[3, 4, 5, 6, 6, 6, 6, 6, 4, 3, 4, 6, 4, 6, 6, ...</td>\n",
       "      <td>{3: 1, 4: 7, 5: 15, 6: 32, 2: 0}</td>\n",
       "      <td>{3: 44, 4: 57, 5: 68, 6: 66, 2: 10}</td>\n",
       "      <td>[3, 4, 5, 6, 6, 6, 6, 4, 3, 4, 6, 4, 5, 5, 5, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[(Nf3, Nc6, e4, e5, Bc4), (d4, d5, e3, e6, f4,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(Nf3, Nc6, e4, e5, Bc4, Nc6), (d4, d5, e3, e6...</td>\n",
       "      <td>[None, (-6, 19), None, (5, -6), None, (-38, 26...</td>\n",
       "      <td>300</td>\n",
       "      <td>70</td>\n",
       "      <td>[13, -1, -12, 24, 40, -11, 32, 55, -11, -18, -...</td>\n",
       "      <td>[5, 6, 6, 4, 5, 5, 2, 4, 3, 6, 5, 6, 6, 4, 6, ...</td>\n",
       "      <td>{5: 17, 6: 40, 4: 12, 2: 0, 3: 1}</td>\n",
       "      <td>{5: 66, 6: 78, 4: 58, 2: 9, 3: 19}</td>\n",
       "      <td>[6, 4, 5, 2, 3, 6, 5, 4, 6, 4, 4, 4, 6, 6, 6, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 seq  \\\n",
       "0  [(Nc3, e5, d3), (e4, e5, d4, exd4, Bc4, Nc6), ...   \n",
       "1  [(b3, d5, Bb2, c5, g3), (e4, c5, Nf3, g6, d4),...   \n",
       "2  [(e4, c5, Bc4, d6, Nf3, Nc6), (d4, d5, Bf4, Nf...   \n",
       "3  [(d4, e6, a3), (e4, e5, Nf3, Bd6), (e4, d6, c3...   \n",
       "4  [(Nf3, Nc6, e4, e5, Bc4), (d4, d5, e3, e6, f4,...   \n",
       "\n",
       "                                                 res    elo  \\\n",
       "0  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "1  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "2  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "3  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "4  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "\n",
       "                                                pred  \\\n",
       "0  [(Nc3, e5, d3, Nf6), (e4, e5, d4, exd4, Bc4, N...   \n",
       "1  [(b3, d5, Bb2, c5, g3, Nc6), (e4, c5, Nf3, g6,...   \n",
       "2  [(e4, c5, Bc4, d6, Nf3, Nc6, d4), (d4, d5, Bf4...   \n",
       "3  [(d4, e6, a3, c6), (e4, e5, Nf3, Bd6, d4), (e4...   \n",
       "4  [(Nf3, Nc6, e4, e5, Bc4, Nc6), (d4, d5, e3, e6...   \n",
       "\n",
       "                                               evals  total_evals  \\\n",
       "0  [(32, -31), (-6, -2), (35, -40), None, None, (...          300   \n",
       "1  [(30, -43), (-8, 64), None, (30, 49), (51, -24...          300   \n",
       "2  [(23, -32), None, (44, -46), None, (-24, 30), ...          300   \n",
       "3  [(-9, 56), (79, -86), (-26, 54), None, (117, -...          300   \n",
       "4  [None, (-6, 19), None, (5, -6), None, (-38, 26...          300   \n",
       "\n",
       "   invalid_seq                                              score  \\\n",
       "0           66  [1, -8, -5, 4, 124, 25, -2, 7, 6, 17, 20, -11,...   \n",
       "1           62  [-13, 56, 79, 27, 29, 22, 4, 3, 242, 2, 136, 3...   \n",
       "2           51  [-9, -2, 6, 3, 6, 2, 28, 17, 9, 10, -8, 12, 55...   \n",
       "3           55  [47, -7, 28, 19, 19, 10, 2, -6, -5, 141, 120, ...   \n",
       "4           70  [13, -1, -12, 24, 40, -11, 32, 55, -11, -18, -...   \n",
       "\n",
       "                                             seq_len  \\\n",
       "0  [3, 6, 5, 6, 5, 5, 6, 5, 4, 6, 6, 6, 6, 5, 6, ...   \n",
       "1  [5, 5, 4, 2, 4, 5, 5, 3, 5, 5, 5, 5, 4, 6, 6, ...   \n",
       "2  [6, 6, 4, 5, 5, 4, 5, 6, 4, 5, 6, 5, 4, 6, 3, ...   \n",
       "3  [3, 4, 5, 6, 6, 6, 6, 6, 4, 3, 4, 6, 4, 6, 6, ...   \n",
       "4  [5, 6, 6, 4, 5, 5, 2, 4, 3, 6, 5, 6, 6, 4, 6, ...   \n",
       "\n",
       "                               inv_by_len  \\\n",
       "0  {3: 0, 6: 42, 5: 18, 4: 6, 2: 0, 1: 0}   \n",
       "1        {5: 17, 4: 7, 2: 0, 3: 0, 6: 38}   \n",
       "2  {6: 25, 4: 9, 5: 16, 3: 1, 2: 0, 1: 0}   \n",
       "3        {3: 1, 4: 7, 5: 15, 6: 32, 2: 0}   \n",
       "4       {5: 17, 6: 40, 4: 12, 2: 0, 3: 1}   \n",
       "\n",
       "                               valid_by_len  \\\n",
       "0  {3: 29, 6: 62, 5: 75, 4: 58, 2: 9, 1: 1}   \n",
       "1        {5: 69, 4: 60, 2: 5, 3: 40, 6: 64}   \n",
       "2  {6: 60, 4: 62, 5: 81, 3: 36, 2: 9, 1: 1}   \n",
       "3       {3: 44, 4: 57, 5: 68, 6: 66, 2: 10}   \n",
       "4        {5: 66, 6: 78, 4: 58, 2: 9, 3: 19}   \n",
       "\n",
       "                                           score_len  \n",
       "0  [3, 6, 5, 5, 4, 6, 6, 6, 6, 2, 4, 5, 6, 3, 5, ...  \n",
       "1  [5, 5, 2, 4, 5, 3, 5, 5, 5, 6, 6, 5, 5, 5, 6, ...  \n",
       "2  [6, 4, 5, 4, 5, 6, 4, 5, 6, 5, 4, 6, 3, 4, 4, ...  \n",
       "3  [3, 4, 5, 6, 6, 6, 6, 4, 3, 4, 6, 4, 5, 5, 5, ...  \n",
       "4  [6, 4, 5, 2, 3, 6, 5, 4, 6, 4, 4, 4, 6, 6, 6, ...  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "87c7536a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:51.719036Z",
     "iopub.status.busy": "2024-10-03T19:44:51.718497Z",
     "iopub.status.idle": "2024-10-03T19:44:51.740051Z",
     "shell.execute_reply": "2024-10-03T19:44:51.738728Z"
    },
    "papermill": {
     "duration": 0.038371,
     "end_time": "2024-10-03T19:44:51.743046",
     "exception": false,
     "start_time": "2024-10-03T19:44:51.704675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{3: 9477, 6: 74387, 5: 57631, 4: 27291, 2: 1520, 1: 109}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def sum_dict(data):\n",
    "    sums = defaultdict(int)\n",
    "    for scores in data:\n",
    "        for key in scores:\n",
    "            sums[key] += scores[key]\n",
    "            \n",
    "    return dict(sums)\n",
    "\n",
    "tot_scores = sum_dict(df['score_len'])\n",
    "tot_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3a9f80cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:51.771754Z",
     "iopub.status.busy": "2024-10-03T19:44:51.771129Z",
     "iopub.status.idle": "2024-10-03T19:44:51.789691Z",
     "shell.execute_reply": "2024-10-03T19:44:51.787534Z"
    },
    "papermill": {
     "duration": 0.03832,
     "end_time": "2024-10-03T19:44:51.792938",
     "exception": false,
     "start_time": "2024-10-03T19:44:51.754618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{3: 1918, 6: 14265, 5: 11315, 4: 5424, 2: 301, 1: 20}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def count_dict(data):\n",
    "    sums = defaultdict(int)\n",
    "    for scores in data:\n",
    "        for key in scores:\n",
    "            sums[key] += 1\n",
    "            \n",
    "    return dict(sums)\n",
    "\n",
    "tot_counts = count_dict(df['score_len'])\n",
    "tot_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a7c995c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:51.820397Z",
     "iopub.status.busy": "2024-10-03T19:44:51.819841Z",
     "iopub.status.idle": "2024-10-03T19:44:51.829609Z",
     "shell.execute_reply": "2024-10-03T19:44:51.827700Z"
    },
    "papermill": {
     "duration": 0.026415,
     "end_time": "2024-10-03T19:44:51.832562",
     "exception": false,
     "start_time": "2024-10-03T19:44:51.806147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{3: 4.94, 6: 5.21, 5: 5.09, 4: 5.03, 2: 5.05, 1: 5.45}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_score = {key: round(tot_scores[key]/tot_counts[key],2) for key in tot_scores}\n",
    "avg_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "19b5abda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:51.862217Z",
     "iopub.status.busy": "2024-10-03T19:44:51.861737Z",
     "iopub.status.idle": "2024-10-03T19:44:52.266465Z",
     "shell.execute_reply": "2024-10-03T19:44:52.265073Z"
    },
    "papermill": {
     "duration": 0.424415,
     "end_time": "2024-10-03T19:44:52.269533",
     "exception": false,
     "start_time": "2024-10-03T19:44:51.845118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Separate the keys and values\n",
    "keys = list(avg_score.keys())\n",
    "values1 = list(avg_score.values())\n",
    "\n",
    "# Create the bar plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(keys, values1, align='center', edgecolor='black')\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Sequence Length')\n",
    "plt.ylabel('Centipawn Value')\n",
    "plt.title('Average Loss by Sequence Length')\n",
    "\n",
    "# Add a legend\n",
    "plt.legend()\n",
    "# plt.grid()\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5695d79c",
   "metadata": {
    "papermill": {
     "duration": 0.012858,
     "end_time": "2024-10-03T19:44:52.295322",
     "exception": false,
     "start_time": "2024-10-03T19:44:52.282464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5807312,
     "sourceId": 9535065,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30775,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13.447126,
   "end_time": "2024-10-03T19:44:53.132454",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-03T19:44:39.685328",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
