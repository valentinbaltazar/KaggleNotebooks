{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "851b8641",
   "metadata": {
    "papermill": {
     "duration": 0.008848,
     "end_time": "2024-10-03T19:44:11.660579",
     "exception": false,
     "start_time": "2024-10-03T19:44:11.651731",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load Metrics Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "907fe5b5",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:11.678681Z",
     "iopub.status.busy": "2024-10-03T19:44:11.677542Z",
     "iopub.status.idle": "2024-10-03T19:44:15.486609Z",
     "shell.execute_reply": "2024-10-03T19:44:15.485179Z"
    },
    "papermill": {
     "duration": 3.820858,
     "end_time": "2024-10-03T19:44:15.489252",
     "exception": false,
     "start_time": "2024-10-03T19:44:11.668394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seq</th>\n",
       "      <th>res</th>\n",
       "      <th>elo</th>\n",
       "      <th>pred</th>\n",
       "      <th>evals</th>\n",
       "      <th>total_evals</th>\n",
       "      <th>invalid_seq</th>\n",
       "      <th>score</th>\n",
       "      <th>seq_len</th>\n",
       "      <th>inv_by_len</th>\n",
       "      <th>valid_by_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[(e4, e5, Nf3, c6, Bc4, Bc5), (e4, e5, Qh5, Bc...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, e5, Nf3, c6, Bc4, Bc5, Nc6), (e4, e5, Qh...</td>\n",
       "      <td>[None, None, (-6, 87), None, None, (13, -3), (...</td>\n",
       "      <td>300</td>\n",
       "      <td>151</td>\n",
       "      <td>[81, 10, 153, 10, 43, 62, 6, 570, -5, 269, 562...</td>\n",
       "      <td>[6, 6, 5, 4, 4, 4, 4, 5, 5, 5, 6, 3, 4, 5, 6, ...</td>\n",
       "      <td>{6: 65, 5: 37, 4: 28, 3: 18, 2: 3}</td>\n",
       "      <td>{6: 41, 5: 49, 4: 44, 3: 12, 2: 3}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[(e4, e5, d3, d6, f4), (e4, e5, Nf3, Nc6, Bb5,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, e5, d3, d6, f4, Nf3), (e4, e5, Nf3, Nc6,...</td>\n",
       "      <td>[None, None, None, None, (66, -64), (-12, 16),...</td>\n",
       "      <td>300</td>\n",
       "      <td>129</td>\n",
       "      <td>[2, 4, 382, 18, 153, 9, 72, 68, 28, 69, -3, 13...</td>\n",
       "      <td>[5, 6, 4, 6, 4, 3, 6, 6, 3, 5, 5, 6, 6, 3, 5, ...</td>\n",
       "      <td>{5: 30, 6: 58, 4: 23, 3: 15, 1: 1, 2: 2}</td>\n",
       "      <td>{5: 56, 6: 41, 4: 51, 3: 19, 1: 0, 2: 4}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[(c3, e5, e4), (e4, c5, c3, e6, Bc4, d5), (e4,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(c3, e5, e4, e6), (e4, c5, c3, e6, Bc4, d5, N...</td>\n",
       "      <td>[None, (-18, 436), None, (57, -25), None, (14,...</td>\n",
       "      <td>300</td>\n",
       "      <td>135</td>\n",
       "      <td>[418, 32, 30, 33, 170, 247, 7, 70, 10, 12, 50,...</td>\n",
       "      <td>[3, 6, 6, 6, 4, 2, 3, 6, 6, 3, 6, 4, 6, 6, 6, ...</td>\n",
       "      <td>{3: 20, 6: 64, 4: 23, 2: 4, 5: 24, 1: 0}</td>\n",
       "      <td>{3: 29, 6: 36, 4: 51, 2: 3, 5: 45, 1: 1}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[(e4, Nf6, e5, Nd5), (e4, e6, h3, d5), (e4, e6...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, Nf6, e5, Nd5, e6), (e4, e6, h3, d5, d4),...</td>\n",
       "      <td>[(87, 114), (17, 104), (-39, 64), None, None, ...</td>\n",
       "      <td>300</td>\n",
       "      <td>140</td>\n",
       "      <td>[201, 121, 25, 529, 64, 9, 0, 125, 5, 45, 22, ...</td>\n",
       "      <td>[4, 4, 5, 6, 6, 5, 6, 2, 5, 5, 5, 6, 5, 5, 5, ...</td>\n",
       "      <td>{4: 38, 5: 28, 6: 52, 2: 6, 3: 16}</td>\n",
       "      <td>{4: 38, 5: 57, 6: 45, 2: 2, 3: 18}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[(e4, d5, e5, d4, Nf3), (f4, e6, e3), (d4, e5,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, d5, e5, d4, Nf3, Nf6), (f4, e6, e3, Nf3)...</td>\n",
       "      <td>[(-1, 325), None, None, None, None, (100000, -...</td>\n",
       "      <td>300</td>\n",
       "      <td>128</td>\n",
       "      <td>[324, 99873, 2, 127, 439, 27, 57, -6, 14, 128,...</td>\n",
       "      <td>[5, 3, 6, 6, 6, 3, 5, 3, 3, 6, 6, 6, 5, 5, 5, ...</td>\n",
       "      <td>{5: 30, 3: 18, 6: 60, 4: 16, 2: 4}</td>\n",
       "      <td>{5: 62, 3: 16, 6: 44, 4: 43, 2: 7}</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 seq  \\\n",
       "0  [(e4, e5, Nf3, c6, Bc4, Bc5), (e4, e5, Qh5, Bc...   \n",
       "1  [(e4, e5, d3, d6, f4), (e4, e5, Nf3, Nc6, Bb5,...   \n",
       "2  [(c3, e5, e4), (e4, c5, c3, e6, Bc4, d5), (e4,...   \n",
       "3  [(e4, Nf6, e5, Nd5), (e4, e6, h3, d5), (e4, e6...   \n",
       "4  [(e4, d5, e5, d4, Nf3), (f4, e6, e3), (d4, e5,...   \n",
       "\n",
       "                                                 res    elo  \\\n",
       "0  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "1  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "2  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "3  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "4  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "\n",
       "                                                pred  \\\n",
       "0  [(e4, e5, Nf3, c6, Bc4, Bc5, Nc6), (e4, e5, Qh...   \n",
       "1  [(e4, e5, d3, d6, f4, Nf3), (e4, e5, Nf3, Nc6,...   \n",
       "2  [(c3, e5, e4, e6), (e4, c5, c3, e6, Bc4, d5, N...   \n",
       "3  [(e4, Nf6, e5, Nd5, e6), (e4, e6, h3, d5, d4),...   \n",
       "4  [(e4, d5, e5, d4, Nf3, Nf6), (f4, e6, e3, Nf3)...   \n",
       "\n",
       "                                               evals  total_evals  \\\n",
       "0  [None, None, (-6, 87), None, None, (13, -3), (...          300   \n",
       "1  [None, None, None, None, (66, -64), (-12, 16),...          300   \n",
       "2  [None, (-18, 436), None, (57, -25), None, (14,...          300   \n",
       "3  [(87, 114), (17, 104), (-39, 64), None, None, ...          300   \n",
       "4  [(-1, 325), None, None, None, None, (100000, -...          300   \n",
       "\n",
       "   invalid_seq                                              score  \\\n",
       "0          151  [81, 10, 153, 10, 43, 62, 6, 570, -5, 269, 562...   \n",
       "1          129  [2, 4, 382, 18, 153, 9, 72, 68, 28, 69, -3, 13...   \n",
       "2          135  [418, 32, 30, 33, 170, 247, 7, 70, 10, 12, 50,...   \n",
       "3          140  [201, 121, 25, 529, 64, 9, 0, 125, 5, 45, 22, ...   \n",
       "4          128  [324, 99873, 2, 127, 439, 27, 57, -6, 14, 128,...   \n",
       "\n",
       "                                             seq_len  \\\n",
       "0  [6, 6, 5, 4, 4, 4, 4, 5, 5, 5, 6, 3, 4, 5, 6, ...   \n",
       "1  [5, 6, 4, 6, 4, 3, 6, 6, 3, 5, 5, 6, 6, 3, 5, ...   \n",
       "2  [3, 6, 6, 6, 4, 2, 3, 6, 6, 3, 6, 4, 6, 6, 6, ...   \n",
       "3  [4, 4, 5, 6, 6, 5, 6, 2, 5, 5, 5, 6, 5, 5, 5, ...   \n",
       "4  [5, 3, 6, 6, 6, 3, 5, 3, 3, 6, 6, 6, 5, 5, 5, ...   \n",
       "\n",
       "                                 inv_by_len  \\\n",
       "0        {6: 65, 5: 37, 4: 28, 3: 18, 2: 3}   \n",
       "1  {5: 30, 6: 58, 4: 23, 3: 15, 1: 1, 2: 2}   \n",
       "2  {3: 20, 6: 64, 4: 23, 2: 4, 5: 24, 1: 0}   \n",
       "3        {4: 38, 5: 28, 6: 52, 2: 6, 3: 16}   \n",
       "4        {5: 30, 3: 18, 6: 60, 4: 16, 2: 4}   \n",
       "\n",
       "                               valid_by_len  \n",
       "0        {6: 41, 5: 49, 4: 44, 3: 12, 2: 3}  \n",
       "1  {5: 56, 6: 41, 4: 51, 3: 19, 1: 0, 2: 4}  \n",
       "2  {3: 29, 6: 36, 4: 51, 2: 3, 5: 45, 1: 1}  \n",
       "3        {4: 38, 5: 57, 6: 45, 2: 2, 3: 18}  \n",
       "4        {5: 62, 3: 16, 6: 44, 4: 43, 2: 7}  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "file_name = 'metrics_lora_infer_100'\n",
    "# file_name = 'metrics_lora_infer_1000'\n",
    "\n",
    "\n",
    "df = pd.read_pickle(f'/kaggle/input/metric-evals-lora/{file_name}.pkl')\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "82760fb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:15.507986Z",
     "iopub.status.busy": "2024-10-03T19:44:15.507538Z",
     "iopub.status.idle": "2024-10-03T19:44:15.538093Z",
     "shell.execute_reply": "2024-10-03T19:44:15.537007Z"
    },
    "papermill": {
     "duration": 0.043165,
     "end_time": "2024-10-03T19:44:15.540699",
     "exception": false,
     "start_time": "2024-10-03T19:44:15.497534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 153 entries, 0 to 44\n",
      "Data columns (total 11 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   seq           153 non-null    object\n",
      " 1   res           153 non-null    object\n",
      " 2   elo           153 non-null    object\n",
      " 3   pred          153 non-null    object\n",
      " 4   evals         153 non-null    object\n",
      " 5   total_evals   153 non-null    int64 \n",
      " 6   invalid_seq   153 non-null    int64 \n",
      " 7   score         153 non-null    object\n",
      " 8   seq_len       153 non-null    object\n",
      " 9   inv_by_len    153 non-null    object\n",
      " 10  valid_by_len  153 non-null    object\n",
      "dtypes: int64(2), object(9)\n",
      "memory usage: 14.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ffe50a8",
   "metadata": {
    "papermill": {
     "duration": 0.007873,
     "end_time": "2024-10-03T19:44:15.556859",
     "exception": false,
     "start_time": "2024-10-03T19:44:15.548986",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Sequence Length Distibutions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "20ee677c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:15.576430Z",
     "iopub.status.busy": "2024-10-03T19:44:15.575933Z",
     "iopub.status.idle": "2024-10-03T19:44:16.204115Z",
     "shell.execute_reply": "2024-10-03T19:44:16.202845Z"
    },
    "papermill": {
     "duration": 0.641002,
     "end_time": "2024-10-03T19:44:16.207009",
     "exception": false,
     "start_time": "2024-10-03T19:44:15.566007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAtQAAAIsCAYAAADS7D6EAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABKbUlEQVR4nO3df3zN9f//8fvZODM/zlhvlN8bbebHZsj8mJXfjPKjJLL0Nr8qNO8UeZeP3inqXciPZEwlkh9Jb+8QeRclb+930Q+RX9P8KPQ2djbGZud8/3DZ+XaaCs/xOttu18vFZc7r9TzP5+P1dHDfc8/zOja32+0WAAAAgGviZ3UBAAAAQFFGoAYAAAAMEKgBAAAAAwRqAAAAwACBGgAAADBAoAYAAAAMEKgBAAAAAwRqAAAAwACBGgAAADBAoAYAWGb8+PGKjo6+oWO2b99e48ePv+7jHD16VOHh4Vq1apXn2I2+3vDwcM2aNeuGjQeUVARqADfM3r17NXr0aLVr106NGzdW27Zt9ec//1lvvfWW1aUVadu3b1d4eLjWr19vdSmXlZ2drVmzZmn79u2F3ndCQoLCw8MVHh6u+vXrq2nTpurSpYsef/xxbd26tdDG2bx5s88GU1+uDSgpSlldAICSYceOHXrggQdUrVo19e3bV5UrV9ZPP/2kr7/+WosWLVJCQoLVJeI6yc7O1uzZszVy5EjFxMQUev8333yz/vKXv3jGSktL08aNG/WPf/xD3bp109///neVLl3a0379+vWy2WxXNcbmzZu1ZMkSjRo16oqfU716dX3zzTcqVer6/lf7e7V988038vf3v67jAyBQA7hBXnvtNVWoUEErV66Uw+HwOnfq1CmLqkJxUKFCBfXs2dPr2NixYzV58mS9/fbbql69uh5//HHPObvdfl3ruXjxolwul+x2uwICAq7rWH/E6vGBkoItHwBuiMOHD6tevXoFwrQk3XTTTQWOvf/+++rTp48iIyPVokULjRkzRj/99FOBdsuWLVPHjh0VGRmpe+65R1988YUSEhK8VrxXrVql8PBwHT161Ou5+Vslfr0V4euvv1ZiYqKaNWumqKgoDRw4UF9++aVXm1mzZik8PFxpaWkaP368mjdvrmbNmunJJ59Udnb2Za/nnnvuUVRUlG677Tbdf//9+uyzz7zabN68WQMGDFCTJk0UHR2tYcOGaf/+/ZeZzWvjdDr13HPP6fbbb1ejRo3UqVMnJScny+Vyedrk7/tNSUnxzG2jRo10991365tvvinQ57p16xQfH6/GjRurR48e2rhxo8aPH6/27dt7+mvVqpUkafbs2Z7tGb/eonDixAk9/PDDio6OVsuWLfXCCy8oLy/vmq/V399fTz31lOrVq6clS5YoMzPTc+7Xe6hzc3M1e/Zsde7cWY0bN1ZMTIz69+/v2TIyfvx4LVmyRJI89YeHhxeYrzfeeEMdO3ZU48aNdfDgwcvuoc535MgRJSYmqkmTJoqNjdXs2bPldrs953/rtfnrPn+vtvxjv57r3bt3a8iQIWratKmio6M1aNAgffXVV15t8v/OfPnll5oyZYpatmypJk2a6JFHHlF6evqV/SEAJQgr1ABuiOrVq2vnzp3at2+fwsLCfrft3Llz9corr6hbt2665557lJ6ersWLF+v+++/X6tWrPaF8xYoVmjhxoicUHDlyRA899JCCgoJ0yy23XFOd27Zt09ChQ9WoUSONHDlSNptNq1at0qBBg/T2228rMjLSq31SUpJq1Kihv/zlL9q9e7dWrFih4OBgrxXR2bNna9asWYqOjtbo0aNVunRpff311/r3v/+t2NhYSdLq1as1fvx4xcbGauzYscrOztbSpUs1YMAAvffee6pRo8Y1XU++7OxsDRw4UCdOnNB9992nW265RTt37tS0adP0888/669//atX+3/+8586e/as+vXrJ5vNpgULFmjUqFH66KOPPNsnPvnkE40ZM0ZhYWF67LHHlJGRob/+9a+qWrWqp5/g4GBNmjRJkyZNUqdOndSpUydJ8gp9eXl5SkxMVGRkpJ544glt27ZNCxcuVM2aNTVgwIBrvmZ/f391795dr7zyir788kvdcccdl203e/ZszZs3T3379lVkZKSysrK0a9cufffdd2rTpo369eunkydPauvWrXrxxRcv28eqVat04cIF3XvvvbLb7QoKCvL6RuWX8vLyNGTIEEVFRenxxx/Xp59+qlmzZikvL0+PPvroVV3jldT2S/v379f999+vcuXKaciQISpVqpSWLVumhIQELV68WFFRUV7tJ0+eLIfDoZEjR+rYsWN688039be//U0zZsy4qjqB4o5ADeCGGDx4sIYOHapevXopMjJSzZo1U6tWrRQTE+O1v/XYsWOaNWuWkpKS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l19+WceOHVPHjh1Vrlw5HT16VB999JHuvfdeJSYmqnTp0kpKStLEiRM1aNAgxcfH6+jRo1q1alWB/am33nqrmjRpomnTpikjI0NBQUFau3ZtgRDp5+enyZMna+jQoerRo4f69OmjqlWr6sSJE9q+fbvKly+v11577aquu3bt2hoxYoReffVVDRgwQJ07d5bdbte3336rKlWq6LHHHlP58uU1adIkPfHEE+rTp4/i4+MVHBysH3/8UZs3b1bTpk01ceLEPxxrw4YNSk1NLXC8d+/eSkxM1L/+9S+NGDFCvXv3VsOGDZWdna19+/bpww8/1KZNm67qTXWSNGbMGD388MPq37+/+vTpI6fTqSVLligsLMwrZJcpU0b16tXTunXrVKdOHVWsWFG33nrrNb158XIyMzP1/vvvS5LOnz/v+aTEw4cPq3v37n94K7ru3burRYsWatiwoSpWrKhvv/1WH374oQYOHOhp07BhQ0mXXsexsbGeW/Jdi4CAAH366acaN26cIiMj9emnn+qTTz7RiBEjPH8GFSpUUNeuXbV48WLZbDbVrFlTn3zyyWU/BOlqaktKStLnn3+uAQMGaMCAAfL399eyZcuUk5PjdatHAFeHQA3ghnjiiSe0fv16bd68WcuWLVNubq6qVaumAQMG6KGHHvL6wJdhw4apTp06euONNzRnzhxJlz5euk2bNp4PDJEu3YM3Ly9PKSkpevHFFxUWFua5h/WvvfTSS5o4caKSk5PlcDh0zz33KCYmRn/+85+92sXExGjZsmV69dVXtXjxYp07d06VK1dWZGSk+vXrd03X/uijj6pGjRpavHixpk+frsDAwAK3kLvzzjtVpUoVJScnKyUlRTk5OapataqaN2/u+Wbjj3zwwQeXPd6iRQvdcssteuuttzRv3jytX79eq1evVvny5VWnTh2NGjXqmu6M0r59e02bNk2zZs3Syy+/rDp16mjKlClavXp1gQ+kmTx5sp599llNmTJFubm5GjlyZKEF6uPHj+uJJ56QdGmPe5UqVdSkSRNNmjRJbdq0+cPnJyQk6F//+pe2bt2qnJwcVatWTUlJSUpMTPS06dy5sxISEvTBBx/oH//4h9xu9zUHan9/fy1YsECTJk3S3//+d5UrV04jR4703DYw31NPPaWLFy/qnXfekd1uV9euXfXEE0+oR48eXu2uprZbb71VS5Ys0csvv6x58+bJ7XYrMjJSf//73wvcgxrAlbO5eWcBgGIm/1MS33rrLYsrKZl69uyp4OBgvf7661aXAgA3BHuoAQDXJDc3t8C2me3bt+v7779XixYtLKoKAG48tnwAAK7JiRMn9Oc//1l33XWXqlSpotTUVL3zzjuqXLlygQ+8AYDijEANALgmQUFBatiwoVasWKH09HSVLVtWt99+u8aOHatKlSpZXR4A3DDsoQYAAAAMsIcaAAAAMECgBgAAAAwQqAEAAAADvCnRQm63Wy4XW9ivhJ+fjbmyAPNuDebdGsy7NZh3azDvV8bPzyabzfaH7QjUFnK53EpPP/vHDUu4UqX8VKlSOTmd53TxosvqckoM5t0azLs1mHdrMO/WYN6vXHBwOfn7/3GgZssHAAAAYIBADQAAABggUAMAAAAGCNQAAACAAQI1AAAAYIBADQAAABggUAMAAAAGCNQAAACAAQI1AAAAYIBADQAAABggUAMAAAAGCNQAAACAAQI1AAAAYIBADQAAABggUAMAAAAGCNQAAACAAQI1AAAAYIBADQAAABggUAMAAAAGSlldAAAAQFF09OgRpaefsrqMq+bv7yeHI1BOZ7by8lxWl3PVgoNvUo0aNa0uwwuBGgAA4CodPXpErVs31/nz2VaXUuKUKROozz//wqdCNYEaAADgKqWnn9L589lq0m2MKgTXsLqcEiMz/ai+Wjdd6emnCNQAAADFQYXgGgqqWtfqMmAx3pQIAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABnwrU69at00MPPaS4uDg1adJEPXv2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zfbt2xUeHq61a9dq7ty5iouLU+PGjTVo0CClpaUV6HPJkiXq0KGDIiMjdc899+iLL75QQkKCEhISPP3dc889kqQnn3xS4eHhCg8P16pVq7z6OXDggBISEhQVFaW2bdtq/vz512kWAODalLK6AACAtf73v//p3nvvlc1m0/3336/g4GBt2bJFf/3rX5WVlaUHH3zQq/38+fNls9k0ePBgZWVlacGCBRo7dqxWrFjhafP222/rb3/7m5o3b64HH3xQx44d0yOPPCKHw6Gbb75ZklS3bl2NHj1aM2fOVL9+/dSsWTNJUtOmTT39ZGRkaMiQIerUqZO6deumDz/8UC+99JLCwsJ0++23X//JAYArQKAGgBJu+vTpysvL05o1a1SpUiVJUv/+/fWXv/xFs2fP1n333acyZcp42l+4cEGrV6+W3W6XJDkcDj333HPat2+fwsLClJOTo1deeUWNGzfWm2++qVKlLv1XEx4ervHjx3sC9Z/+9CfFxcVp5syZatKkiXr27FmgtpMnT+qFF15Qr169JEn33HOP2rdvr3fffZdADcBnsOUDAEowt9utDRs2qH379nK73UpPT/f8io2NVWZmpr777juv5/Tp08cTpiWpefPmkqQjR45Iknbt2qUzZ87o3nvv9YRpSbrzzjsVFBR0VfWVLVvWK2jb7XY1btzYMxYA+AJWqAGgBEtPT5fT6dSyZcu0bNmy32zzS9WqVfN67HA4JElOp1OS9OOPP0qSatWq5dWuVKlSql69+lXVd/PNN8tms3kdCwoK0t69e6+qHwC4ngjUAFCCuVwuSdJdd92l3r17X7ZNeHi412M/v8v/cNPtdhducZL8/f0LvU8AKGwEagAowYKDg1WuXDm5XC61bt26UPrMX8E+fPiwWrZs6Tl+8eJFHTt2zCug/3r1GQCKIvZQA0AJ5u/vry5duujDDz/Uvn37Cpz/9XaPK9GoUSNVrFhRy5cv18WLFz3H16xZo4yMDK+2gYGBkv7/dhEAKIpYoQaAEuLdd9/Vp59+WuD4yJEjtX37dt17773q27ev6tWrp4yMDH333Xfatm2b/vOf/1zVOHa7XaNGjdKzzz6rQYMGqVu3bjp27JhWrVpVYF91rVq15HA49M4776hcuXIqW7asIiMjVbNmTaNrBYAbiUANACXE0qVLL3u8T58+WrFihebMmaONGzdq6dKlqlixourVq6exY8de01gDBw6U2+3W66+/rhdeeEH169fX3LlzNXnyZAUEBHjalS5dWlOnTtW0adM0adIkXbx4UVOmTCFQAyhSbO7r8S4SAAB+xeVyqVWrVurUqZMmT55sdTkAUGjYQw0AKHQXLlwocNeP1atX68yZM2rRooVFVQHA9cGWDwBAofvqq680ZcoUde3aVRUrVtTu3bu1cuVKhYWFqWvXrlaXBwCFikANACh01atX180336y33npLGRkZCgoKUs+ePTV27FivT1kEgOKAPdQAAACAAfZQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAYI1AAAAIABAjUAAABggEANAAAAGCBQAwAAAAb+HzLAFshZTn3GAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply Seaborn style\n",
    "sns.set(style=\"darkgrid\")\n",
    "\n",
    "# Create the histogram\n",
    "values = sum(df['seq_len'], [])\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(values, bins=range(min(values), max(values) + 2), align='left', edgecolor='black')\n",
    "\n",
    "# Add grid\n",
    "plt.grid(True)\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Length')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Sequence Length Distribution')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "793b2db1",
   "metadata": {
    "papermill": {
     "duration": 0.008439,
     "end_time": "2024-10-03T19:44:16.224530",
     "exception": false,
     "start_time": "2024-10-03T19:44:16.216091",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "34a90b9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:16.244081Z",
     "iopub.status.busy": "2024-10-03T19:44:16.243621Z",
     "iopub.status.idle": "2024-10-03T19:44:16.254123Z",
     "shell.execute_reply": "2024-10-03T19:44:16.252689Z"
    },
    "papermill": {
     "duration": 0.023514,
     "end_time": "2024-10-03T19:44:16.256914",
     "exception": false,
     "start_time": "2024-10-03T19:44:16.233400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "\n",
    "def group_len_valid(groups):\n",
    "    # Group by seq len and count valids\n",
    "    counter_tot = Counter()\n",
    "    \n",
    "    for item in groups:\n",
    "        # Sum dictionaries using Counter\n",
    "        counter_tot +=  Counter(item)\n",
    "    return dict(counter_tot)\n",
    "\n",
    "inv_tot = group_len_valid(df['inv_by_len'])\n",
    "val_tot = group_len_valid(df['valid_by_len'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "77cd4084",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:16.277318Z",
     "iopub.status.busy": "2024-10-03T19:44:16.276867Z",
     "iopub.status.idle": "2024-10-03T19:44:16.286073Z",
     "shell.execute_reply": "2024-10-03T19:44:16.284899Z"
    },
    "papermill": {
     "duration": 0.022082,
     "end_time": "2024-10-03T19:44:16.288752",
     "exception": false,
     "start_time": "2024-10-03T19:44:16.266670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{6: 12546, 5: 5282, 4: 2717, 3: 834, 2: 175, 1: 4}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "if 1 not in inv_tot.keys():\n",
    "    print(\"no 1s\")\n",
    "    inv_tot[1] = 0\n",
    "    \n",
    "inv_tot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f49b9fa1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:16.308945Z",
     "iopub.status.busy": "2024-10-03T19:44:16.308501Z",
     "iopub.status.idle": "2024-10-03T19:44:16.315953Z",
     "shell.execute_reply": "2024-10-03T19:44:16.314716Z"
    },
    "papermill": {
     "duration": 0.021322,
     "end_time": "2024-10-03T19:44:16.319132",
     "exception": false,
     "start_time": "2024-10-03T19:44:16.297810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{6: 10353, 5: 8336, 4: 3650, 3: 1169, 2: 132, 1: 16}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "val_tot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "933d2eba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:16.339249Z",
     "iopub.status.busy": "2024-10-03T19:44:16.338805Z",
     "iopub.status.idle": "2024-10-03T19:44:16.795069Z",
     "shell.execute_reply": "2024-10-03T19:44:16.793873Z"
    },
    "papermill": {
     "duration": 0.469867,
     "end_time": "2024-10-03T19:44:16.798113",
     "exception": false,
     "start_time": "2024-10-03T19:44:16.328246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Given dictionaries\n",
    "data1 = val_tot\n",
    "data2 = inv_tot\n",
    "\n",
    "# Separate the keys and values\n",
    "keys = list(data1.keys())\n",
    "values1 = [data1[key] for key in keys]\n",
    "values2 = [data2[key] for key in keys]\n",
    "\n",
    "# Create the bar plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(keys, values1, color='blue', label='Valid', align='center', edgecolor='black')\n",
    "\n",
    "# Stack the second dataset on top of the first\n",
    "plt.bar(keys, values2, bottom=values1, color='purple', label='Not Valid',  align='center', edgecolor='black')\n",
    "\n",
    "\n",
    "# Add text labels on top of each bar\n",
    "for i in range(len(keys)):\n",
    "    total = values1[i] + values2[i]\n",
    "    accuracy = round(100*values1[i]/total,1)\n",
    "    plt.text(keys[i], total + 1, str(accuracy), ha='center', va='bottom')\n",
    "\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Sequence Length')\n",
    "plt.ylabel('Counts')\n",
    "plt.title('Move Prediction % Accuracy')\n",
    "\n",
    "# Add a legend\n",
    "plt.legend()\n",
    "# plt.grid()\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed3ab3af",
   "metadata": {
    "papermill": {
     "duration": 0.010965,
     "end_time": "2024-10-03T19:44:16.819026",
     "exception": false,
     "start_time": "2024-10-03T19:44:16.808061",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Evaluation of Model Strength"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e3613eb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:16.840106Z",
     "iopub.status.busy": "2024-10-03T19:44:16.839663Z",
     "iopub.status.idle": "2024-10-03T19:44:17.395475Z",
     "shell.execute_reply": "2024-10-03T19:44:17.394295Z"
    },
    "papermill": {
     "duration": 0.569858,
     "end_time": "2024-10-03T19:44:17.398544",
     "exception": false,
     "start_time": "2024-10-03T19:44:16.828686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply Seaborn style\n",
    "sns.set(style=\"darkgrid\")\n",
    "\n",
    "# Create the histogram\n",
    "\n",
    "values = [s for s in sum(df['score'], []) if s<80_000] # Exclude lines with mate\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(values, bins=20, align='left', edgecolor='black')\n",
    "\n",
    "# Add grid\n",
    "plt.grid(True)\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Centipawn Value')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Change in Centipawn Loss')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1298c9d",
   "metadata": {
    "papermill": {
     "duration": 0.010207,
     "end_time": "2024-10-03T19:44:17.418917",
     "exception": false,
     "start_time": "2024-10-03T19:44:17.408710",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Weaknesses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0a495fff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:17.442545Z",
     "iopub.status.busy": "2024-10-03T19:44:17.441314Z",
     "iopub.status.idle": "2024-10-03T19:44:17.978969Z",
     "shell.execute_reply": "2024-10-03T19:44:17.977683Z"
    },
    "papermill": {
     "duration": 0.551846,
     "end_time": "2024-10-03T19:44:17.981648",
     "exception": false,
     "start_time": "2024-10-03T19:44:17.429802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seq</th>\n",
       "      <th>res</th>\n",
       "      <th>elo</th>\n",
       "      <th>pred</th>\n",
       "      <th>evals</th>\n",
       "      <th>total_evals</th>\n",
       "      <th>invalid_seq</th>\n",
       "      <th>score</th>\n",
       "      <th>seq_len</th>\n",
       "      <th>inv_by_len</th>\n",
       "      <th>valid_by_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[(e4, e5, Nf3, c6, Bc4, Bc5), (e4, e5, Qh5, Bc...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, e5, Nf3, c6, Bc4, Bc5, Nc6), (e4, e5, Qh...</td>\n",
       "      <td>[None, None, (-6, 87), None, None, (13, -3), (...</td>\n",
       "      <td>300</td>\n",
       "      <td>151</td>\n",
       "      <td>[81, 10, 153, 10, 43, 62, 6, 570, -5, 269, 562...</td>\n",
       "      <td>[6, 6, 5, 4, 4, 4, 4, 5, 5, 5, 6, 3, 4, 5, 6, ...</td>\n",
       "      <td>{6: 65, 5: 37, 4: 28, 3: 18, 2: 3}</td>\n",
       "      <td>{6: 41, 5: 49, 4: 44, 3: 12, 2: 3}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[(e4, e5, d3, d6, f4), (e4, e5, Nf3, Nc6, Bb5,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, e5, d3, d6, f4, Nf3), (e4, e5, Nf3, Nc6,...</td>\n",
       "      <td>[None, None, None, None, (66, -64), (-12, 16),...</td>\n",
       "      <td>300</td>\n",
       "      <td>129</td>\n",
       "      <td>[2, 4, 382, 18, 153, 9, 72, 68, 28, 69, -3, 13...</td>\n",
       "      <td>[5, 6, 4, 6, 4, 3, 6, 6, 3, 5, 5, 6, 6, 3, 5, ...</td>\n",
       "      <td>{5: 30, 6: 58, 4: 23, 3: 15, 1: 1, 2: 2}</td>\n",
       "      <td>{5: 56, 6: 41, 4: 51, 3: 19, 1: 0, 2: 4}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[(c3, e5, e4), (e4, c5, c3, e6, Bc4, d5), (e4,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(c3, e5, e4, e6), (e4, c5, c3, e6, Bc4, d5, N...</td>\n",
       "      <td>[None, (-18, 436), None, (57, -25), None, (14,...</td>\n",
       "      <td>300</td>\n",
       "      <td>135</td>\n",
       "      <td>[418, 32, 30, 33, 170, 247, 7, 70, 10, 12, 50,...</td>\n",
       "      <td>[3, 6, 6, 6, 4, 2, 3, 6, 6, 3, 6, 4, 6, 6, 6, ...</td>\n",
       "      <td>{3: 20, 6: 64, 4: 23, 2: 4, 5: 24, 1: 0}</td>\n",
       "      <td>{3: 29, 6: 36, 4: 51, 2: 3, 5: 45, 1: 1}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[(e4, Nf6, e5, Nd5), (e4, e6, h3, d5), (e4, e6...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, Nf6, e5, Nd5, e6), (e4, e6, h3, d5, d4),...</td>\n",
       "      <td>[(87, 114), (17, 104), (-39, 64), None, None, ...</td>\n",
       "      <td>300</td>\n",
       "      <td>140</td>\n",
       "      <td>[201, 121, 25, 529, 64, 9, 0, 125, 5, 45, 22, ...</td>\n",
       "      <td>[4, 4, 5, 6, 6, 5, 6, 2, 5, 5, 5, 6, 5, 5, 5, ...</td>\n",
       "      <td>{4: 38, 5: 28, 6: 52, 2: 6, 3: 16}</td>\n",
       "      <td>{4: 38, 5: 57, 6: 45, 2: 2, 3: 18}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[(e4, d5, e5, d4, Nf3), (f4, e6, e3), (d4, e5,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, d5, e5, d4, Nf3, Nf6), (f4, e6, e3, Nf3)...</td>\n",
       "      <td>[(-1, 325), None, None, None, None, (100000, -...</td>\n",
       "      <td>300</td>\n",
       "      <td>128</td>\n",
       "      <td>[324, 99873, 2, 127, 439, 27, 57, -6, 14, 128,...</td>\n",
       "      <td>[5, 3, 6, 6, 6, 3, 5, 3, 3, 6, 6, 6, 5, 5, 5, ...</td>\n",
       "      <td>{5: 30, 3: 18, 6: 60, 4: 16, 2: 4}</td>\n",
       "      <td>{5: 62, 3: 16, 6: 44, 4: 43, 2: 7}</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 seq  \\\n",
       "0  [(e4, e5, Nf3, c6, Bc4, Bc5), (e4, e5, Qh5, Bc...   \n",
       "1  [(e4, e5, d3, d6, f4), (e4, e5, Nf3, Nc6, Bb5,...   \n",
       "2  [(c3, e5, e4), (e4, c5, c3, e6, Bc4, d5), (e4,...   \n",
       "3  [(e4, Nf6, e5, Nd5), (e4, e6, h3, d5), (e4, e6...   \n",
       "4  [(e4, d5, e5, d4, Nf3), (f4, e6, e3), (d4, e5,...   \n",
       "\n",
       "                                                 res    elo  \\\n",
       "0  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "1  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "2  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "3  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "4  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "\n",
       "                                                pred  \\\n",
       "0  [(e4, e5, Nf3, c6, Bc4, Bc5, Nc6), (e4, e5, Qh...   \n",
       "1  [(e4, e5, d3, d6, f4, Nf3), (e4, e5, Nf3, Nc6,...   \n",
       "2  [(c3, e5, e4, e6), (e4, c5, c3, e6, Bc4, d5, N...   \n",
       "3  [(e4, Nf6, e5, Nd5, e6), (e4, e6, h3, d5, d4),...   \n",
       "4  [(e4, d5, e5, d4, Nf3, Nf6), (f4, e6, e3, Nf3)...   \n",
       "\n",
       "                                               evals  total_evals  \\\n",
       "0  [None, None, (-6, 87), None, None, (13, -3), (...          300   \n",
       "1  [None, None, None, None, (66, -64), (-12, 16),...          300   \n",
       "2  [None, (-18, 436), None, (57, -25), None, (14,...          300   \n",
       "3  [(87, 114), (17, 104), (-39, 64), None, None, ...          300   \n",
       "4  [(-1, 325), None, None, None, None, (100000, -...          300   \n",
       "\n",
       "   invalid_seq                                              score  \\\n",
       "0          151  [81, 10, 153, 10, 43, 62, 6, 570, -5, 269, 562...   \n",
       "1          129  [2, 4, 382, 18, 153, 9, 72, 68, 28, 69, -3, 13...   \n",
       "2          135  [418, 32, 30, 33, 170, 247, 7, 70, 10, 12, 50,...   \n",
       "3          140  [201, 121, 25, 529, 64, 9, 0, 125, 5, 45, 22, ...   \n",
       "4          128  [324, 99873, 2, 127, 439, 27, 57, -6, 14, 128,...   \n",
       "\n",
       "                                             seq_len  \\\n",
       "0  [6, 6, 5, 4, 4, 4, 4, 5, 5, 5, 6, 3, 4, 5, 6, ...   \n",
       "1  [5, 6, 4, 6, 4, 3, 6, 6, 3, 5, 5, 6, 6, 3, 5, ...   \n",
       "2  [3, 6, 6, 6, 4, 2, 3, 6, 6, 3, 6, 4, 6, 6, 6, ...   \n",
       "3  [4, 4, 5, 6, 6, 5, 6, 2, 5, 5, 5, 6, 5, 5, 5, ...   \n",
       "4  [5, 3, 6, 6, 6, 3, 5, 3, 3, 6, 6, 6, 5, 5, 5, ...   \n",
       "\n",
       "                                 inv_by_len  \\\n",
       "0        {6: 65, 5: 37, 4: 28, 3: 18, 2: 3}   \n",
       "1  {5: 30, 6: 58, 4: 23, 3: 15, 1: 1, 2: 2}   \n",
       "2  {3: 20, 6: 64, 4: 23, 2: 4, 5: 24, 1: 0}   \n",
       "3        {4: 38, 5: 28, 6: 52, 2: 6, 3: 16}   \n",
       "4        {5: 30, 3: 18, 6: 60, 4: 16, 2: 4}   \n",
       "\n",
       "                               valid_by_len  \n",
       "0        {6: 41, 5: 49, 4: 44, 3: 12, 2: 3}  \n",
       "1  {5: 56, 6: 41, 4: 51, 3: 19, 1: 0, 2: 4}  \n",
       "2  {3: 29, 6: 36, 4: 51, 2: 3, 5: 45, 1: 1}  \n",
       "3        {4: 38, 5: 57, 6: 45, 2: 2, 3: 18}  \n",
       "4        {5: 62, 3: 16, 6: 44, 4: 43, 2: 7}  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cd0cb820",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:18.005064Z",
     "iopub.status.busy": "2024-10-03T19:44:18.004448Z",
     "iopub.status.idle": "2024-10-03T19:44:18.018848Z",
     "shell.execute_reply": "2024-10-03T19:44:18.017529Z"
    },
    "papermill": {
     "duration": 0.029364,
     "end_time": "2024-10-03T19:44:18.021641",
     "exception": false,
     "start_time": "2024-10-03T19:44:17.992277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# iters = [s for  s, evals in zip(slen,evals) if evals is not None]\n",
    "df['score_len'] = [[s for  s, evals in zip(slen,evals) if evals is not None] for slen,evals in zip(df['seq_len'],df['evals'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "63384eba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:18.045659Z",
     "iopub.status.busy": "2024-10-03T19:44:18.044460Z",
     "iopub.status.idle": "2024-10-03T19:44:18.052022Z",
     "shell.execute_reply": "2024-10-03T19:44:18.050705Z"
    },
    "papermill": {
     "duration": 0.021918,
     "end_time": "2024-10-03T19:44:18.054463",
     "exception": false,
     "start_time": "2024-10-03T19:44:18.032545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Failure rates by seq len\n",
    "from collections import defaultdict\n",
    "\n",
    "def group_by(list1, list2):\n",
    "    # Initialize a defaultdict to hold the aggregated sums\n",
    "    aggregated = defaultdict(int)\n",
    "#     counts = defaultdict(int)\n",
    "\n",
    "    \n",
    "    # Aggregate values by unique keys in list1 and sum corresponding values in list2\n",
    "    for key, value in zip(list1, list2):\n",
    "        if value < 80_000: # Exclude Mates\n",
    "            aggregated[key] += value\n",
    "#             counts[key] += 1\n",
    "\n",
    "    \n",
    "    # Convert back to a dictionary (if needed) and print the result\n",
    "#     result = {key: round(aggregated[key]/counts[key],2) for key in aggregated}\n",
    "    # print(result)\n",
    "    return dict(aggregated)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "05c1003a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:18.078858Z",
     "iopub.status.busy": "2024-10-03T19:44:18.078412Z",
     "iopub.status.idle": "2024-10-03T19:44:18.088377Z",
     "shell.execute_reply": "2024-10-03T19:44:18.087227Z"
    },
    "papermill": {
     "duration": 0.025842,
     "end_time": "2024-10-03T19:44:18.090905",
     "exception": false,
     "start_time": "2024-10-03T19:44:18.065063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{5: 4518, 4: 2883, 3: 448, 6: 3481, 2: 183}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "group_by(df['score_len'].iloc[0],df['score'].iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ba4bd678",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:18.114265Z",
     "iopub.status.busy": "2024-10-03T19:44:18.113804Z",
     "iopub.status.idle": "2024-10-03T19:44:18.653507Z",
     "shell.execute_reply": "2024-10-03T19:44:18.652228Z"
    },
    "papermill": {
     "duration": 0.554332,
     "end_time": "2024-10-03T19:44:18.656028",
     "exception": false,
     "start_time": "2024-10-03T19:44:18.101696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seq</th>\n",
       "      <th>res</th>\n",
       "      <th>elo</th>\n",
       "      <th>pred</th>\n",
       "      <th>evals</th>\n",
       "      <th>total_evals</th>\n",
       "      <th>invalid_seq</th>\n",
       "      <th>score</th>\n",
       "      <th>seq_len</th>\n",
       "      <th>inv_by_len</th>\n",
       "      <th>valid_by_len</th>\n",
       "      <th>score_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[(e4, e5, Nf3, c6, Bc4, Bc5), (e4, e5, Qh5, Bc...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, e5, Nf3, c6, Bc4, Bc5, Nc6), (e4, e5, Qh...</td>\n",
       "      <td>[None, None, (-6, 87), None, None, (13, -3), (...</td>\n",
       "      <td>300</td>\n",
       "      <td>151</td>\n",
       "      <td>[81, 10, 153, 10, 43, 62, 6, 570, -5, 269, 562...</td>\n",
       "      <td>[6, 6, 5, 4, 4, 4, 4, 5, 5, 5, 6, 3, 4, 5, 6, ...</td>\n",
       "      <td>{6: 65, 5: 37, 4: 28, 3: 18, 2: 3}</td>\n",
       "      <td>{6: 41, 5: 49, 4: 44, 3: 12, 2: 3}</td>\n",
       "      <td>[5, 4, 4, 5, 4, 5, 3, 6, 4, 4, 6, 5, 5, 6, 4, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[(e4, e5, d3, d6, f4), (e4, e5, Nf3, Nc6, Bb5,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, e5, d3, d6, f4, Nf3), (e4, e5, Nf3, Nc6,...</td>\n",
       "      <td>[None, None, None, None, (66, -64), (-12, 16),...</td>\n",
       "      <td>300</td>\n",
       "      <td>129</td>\n",
       "      <td>[2, 4, 382, 18, 153, 9, 72, 68, 28, 69, -3, 13...</td>\n",
       "      <td>[5, 6, 4, 6, 4, 3, 6, 6, 3, 5, 5, 6, 6, 3, 5, ...</td>\n",
       "      <td>{5: 30, 6: 58, 4: 23, 3: 15, 1: 1, 2: 2}</td>\n",
       "      <td>{5: 56, 6: 41, 4: 51, 3: 19, 1: 0, 2: 4}</td>\n",
       "      <td>[4, 3, 6, 6, 5, 6, 2, 5, 2, 3, 5, 5, 6, 4, 5, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[(c3, e5, e4), (e4, c5, c3, e6, Bc4, d5), (e4,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(c3, e5, e4, e6), (e4, c5, c3, e6, Bc4, d5, N...</td>\n",
       "      <td>[None, (-18, 436), None, (57, -25), None, (14,...</td>\n",
       "      <td>300</td>\n",
       "      <td>135</td>\n",
       "      <td>[418, 32, 30, 33, 170, 247, 7, 70, 10, 12, 50,...</td>\n",
       "      <td>[3, 6, 6, 6, 4, 2, 3, 6, 6, 3, 6, 4, 6, 6, 6, ...</td>\n",
       "      <td>{3: 20, 6: 64, 4: 23, 2: 4, 5: 24, 1: 0}</td>\n",
       "      <td>{3: 29, 6: 36, 4: 51, 2: 3, 5: 45, 1: 1}</td>\n",
       "      <td>[6, 6, 2, 3, 6, 4, 6, 6, 5, 4, 6, 3, 3, 3, 5, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[(e4, Nf6, e5, Nd5), (e4, e6, h3, d5), (e4, e6...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, Nf6, e5, Nd5, e6), (e4, e6, h3, d5, d4),...</td>\n",
       "      <td>[(87, 114), (17, 104), (-39, 64), None, None, ...</td>\n",
       "      <td>300</td>\n",
       "      <td>140</td>\n",
       "      <td>[201, 121, 25, 529, 64, 9, 0, 125, 5, 45, 22, ...</td>\n",
       "      <td>[4, 4, 5, 6, 6, 5, 6, 2, 5, 5, 5, 6, 5, 5, 5, ...</td>\n",
       "      <td>{4: 38, 5: 28, 6: 52, 2: 6, 3: 16}</td>\n",
       "      <td>{4: 38, 5: 57, 6: 45, 2: 2, 3: 18}</td>\n",
       "      <td>[4, 4, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[(e4, d5, e5, d4, Nf3), (f4, e6, e3), (d4, e5,...</td>\n",
       "      <td>[Instruction:\\nPredict the next chess move in ...</td>\n",
       "      <td>inter</td>\n",
       "      <td>[(e4, d5, e5, d4, Nf3, Nf6), (f4, e6, e3, Nf3)...</td>\n",
       "      <td>[(-1, 325), None, None, None, None, (100000, -...</td>\n",
       "      <td>300</td>\n",
       "      <td>128</td>\n",
       "      <td>[324, 99873, 2, 127, 439, 27, 57, -6, 14, 128,...</td>\n",
       "      <td>[5, 3, 6, 6, 6, 3, 5, 3, 3, 6, 6, 6, 5, 5, 5, ...</td>\n",
       "      <td>{5: 30, 3: 18, 6: 60, 4: 16, 2: 4}</td>\n",
       "      <td>{5: 62, 3: 16, 6: 44, 4: 43, 2: 7}</td>\n",
       "      <td>[5, 3, 3, 6, 6, 5, 5, 5, 6, 3, 6, 4, 6, 5, 6, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 seq  \\\n",
       "0  [(e4, e5, Nf3, c6, Bc4, Bc5), (e4, e5, Qh5, Bc...   \n",
       "1  [(e4, e5, d3, d6, f4), (e4, e5, Nf3, Nc6, Bb5,...   \n",
       "2  [(c3, e5, e4), (e4, c5, c3, e6, Bc4, d5), (e4,...   \n",
       "3  [(e4, Nf6, e5, Nd5), (e4, e6, h3, d5), (e4, e6...   \n",
       "4  [(e4, d5, e5, d4, Nf3), (f4, e6, e3), (d4, e5,...   \n",
       "\n",
       "                                                 res    elo  \\\n",
       "0  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "1  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "2  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "3  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "4  [Instruction:\\nPredict the next chess move in ...  inter   \n",
       "\n",
       "                                                pred  \\\n",
       "0  [(e4, e5, Nf3, c6, Bc4, Bc5, Nc6), (e4, e5, Qh...   \n",
       "1  [(e4, e5, d3, d6, f4, Nf3), (e4, e5, Nf3, Nc6,...   \n",
       "2  [(c3, e5, e4, e6), (e4, c5, c3, e6, Bc4, d5, N...   \n",
       "3  [(e4, Nf6, e5, Nd5, e6), (e4, e6, h3, d5, d4),...   \n",
       "4  [(e4, d5, e5, d4, Nf3, Nf6), (f4, e6, e3, Nf3)...   \n",
       "\n",
       "                                               evals  total_evals  \\\n",
       "0  [None, None, (-6, 87), None, None, (13, -3), (...          300   \n",
       "1  [None, None, None, None, (66, -64), (-12, 16),...          300   \n",
       "2  [None, (-18, 436), None, (57, -25), None, (14,...          300   \n",
       "3  [(87, 114), (17, 104), (-39, 64), None, None, ...          300   \n",
       "4  [(-1, 325), None, None, None, None, (100000, -...          300   \n",
       "\n",
       "   invalid_seq                                              score  \\\n",
       "0          151  [81, 10, 153, 10, 43, 62, 6, 570, -5, 269, 562...   \n",
       "1          129  [2, 4, 382, 18, 153, 9, 72, 68, 28, 69, -3, 13...   \n",
       "2          135  [418, 32, 30, 33, 170, 247, 7, 70, 10, 12, 50,...   \n",
       "3          140  [201, 121, 25, 529, 64, 9, 0, 125, 5, 45, 22, ...   \n",
       "4          128  [324, 99873, 2, 127, 439, 27, 57, -6, 14, 128,...   \n",
       "\n",
       "                                             seq_len  \\\n",
       "0  [6, 6, 5, 4, 4, 4, 4, 5, 5, 5, 6, 3, 4, 5, 6, ...   \n",
       "1  [5, 6, 4, 6, 4, 3, 6, 6, 3, 5, 5, 6, 6, 3, 5, ...   \n",
       "2  [3, 6, 6, 6, 4, 2, 3, 6, 6, 3, 6, 4, 6, 6, 6, ...   \n",
       "3  [4, 4, 5, 6, 6, 5, 6, 2, 5, 5, 5, 6, 5, 5, 5, ...   \n",
       "4  [5, 3, 6, 6, 6, 3, 5, 3, 3, 6, 6, 6, 5, 5, 5, ...   \n",
       "\n",
       "                                 inv_by_len  \\\n",
       "0        {6: 65, 5: 37, 4: 28, 3: 18, 2: 3}   \n",
       "1  {5: 30, 6: 58, 4: 23, 3: 15, 1: 1, 2: 2}   \n",
       "2  {3: 20, 6: 64, 4: 23, 2: 4, 5: 24, 1: 0}   \n",
       "3        {4: 38, 5: 28, 6: 52, 2: 6, 3: 16}   \n",
       "4        {5: 30, 3: 18, 6: 60, 4: 16, 2: 4}   \n",
       "\n",
       "                               valid_by_len  \\\n",
       "0        {6: 41, 5: 49, 4: 44, 3: 12, 2: 3}   \n",
       "1  {5: 56, 6: 41, 4: 51, 3: 19, 1: 0, 2: 4}   \n",
       "2  {3: 29, 6: 36, 4: 51, 2: 3, 5: 45, 1: 1}   \n",
       "3        {4: 38, 5: 57, 6: 45, 2: 2, 3: 18}   \n",
       "4        {5: 62, 3: 16, 6: 44, 4: 43, 2: 7}   \n",
       "\n",
       "                                           score_len  \n",
       "0  [5, 4, 4, 5, 4, 5, 3, 6, 4, 4, 6, 5, 5, 6, 4, ...  \n",
       "1  [4, 3, 6, 6, 5, 6, 2, 5, 2, 3, 5, 5, 6, 4, 5, ...  \n",
       "2  [6, 6, 2, 3, 6, 4, 6, 6, 5, 4, 6, 3, 3, 3, 5, ...  \n",
       "3  [4, 4, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, ...  \n",
       "4  [5, 3, 3, 6, 6, 5, 5, 5, 6, 3, 6, 4, 6, 5, 6, ...  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "281a4a39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:18.680317Z",
     "iopub.status.busy": "2024-10-03T19:44:18.679867Z",
     "iopub.status.idle": "2024-10-03T19:44:18.696844Z",
     "shell.execute_reply": "2024-10-03T19:44:18.695535Z"
    },
    "papermill": {
     "duration": 0.032758,
     "end_time": "2024-10-03T19:44:18.699896",
     "exception": false,
     "start_time": "2024-10-03T19:44:18.667138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{5: 42265, 4: 18802, 3: 5647, 6: 53518, 2: 645, 1: 82}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def sum_dict(data):\n",
    "    sums = defaultdict(int)\n",
    "    for scores in data:\n",
    "        for key in scores:\n",
    "            sums[key] += scores[key]\n",
    "            \n",
    "    return dict(sums)\n",
    "\n",
    "tot_scores = sum_dict(df['score_len'])\n",
    "tot_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "969d4509",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:18.726053Z",
     "iopub.status.busy": "2024-10-03T19:44:18.724881Z",
     "iopub.status.idle": "2024-10-03T19:44:18.737618Z",
     "shell.execute_reply": "2024-10-03T19:44:18.736505Z"
    },
    "papermill": {
     "duration": 0.027939,
     "end_time": "2024-10-03T19:44:18.740085",
     "exception": false,
     "start_time": "2024-10-03T19:44:18.712146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{5: 8336, 4: 3650, 3: 1169, 6: 10353, 2: 132, 1: 16}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def count_dict(data):\n",
    "    sums = defaultdict(int)\n",
    "    for scores in data:\n",
    "        for key in scores:\n",
    "            sums[key] += 1\n",
    "            \n",
    "    return dict(sums)\n",
    "\n",
    "tot_counts = count_dict(df['score_len'])\n",
    "tot_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f5be6c2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:18.765674Z",
     "iopub.status.busy": "2024-10-03T19:44:18.764984Z",
     "iopub.status.idle": "2024-10-03T19:44:18.775070Z",
     "shell.execute_reply": "2024-10-03T19:44:18.773566Z"
    },
    "papermill": {
     "duration": 0.026339,
     "end_time": "2024-10-03T19:44:18.777910",
     "exception": false,
     "start_time": "2024-10-03T19:44:18.751571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{5: 5.07, 4: 5.15, 3: 4.83, 6: 5.17, 2: 4.89, 1: 5.12}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_score = {key: round(tot_scores[key]/tot_counts[key],2) for key in tot_scores}\n",
    "avg_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5b257e07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-03T19:44:18.803628Z",
     "iopub.status.busy": "2024-10-03T19:44:18.803181Z",
     "iopub.status.idle": "2024-10-03T19:44:19.162830Z",
     "shell.execute_reply": "2024-10-03T19:44:19.161568Z"
    },
    "papermill": {
     "duration": 0.375748,
     "end_time": "2024-10-03T19:44:19.165407",
     "exception": false,
     "start_time": "2024-10-03T19:44:18.789659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Separate the keys and values\n",
    "keys = list(avg_score.keys())\n",
    "values1 = list(avg_score.values())\n",
    "\n",
    "# Create the bar plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(keys, values1, align='center', edgecolor='black')\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Sequence Length')\n",
    "plt.ylabel('Centipawn Value')\n",
    "plt.title('Average Loss by Sequence Length')\n",
    "\n",
    "# Add a legend\n",
    "plt.legend()\n",
    "# plt.grid()\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db6fd352",
   "metadata": {
    "papermill": {
     "duration": 0.012369,
     "end_time": "2024-10-03T19:44:19.190855",
     "exception": false,
     "start_time": "2024-10-03T19:44:19.178486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5807312,
     "sourceId": 9535065,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30775,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.567557,
   "end_time": "2024-10-03T19:44:19.925458",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-03T19:44:08.357901",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
