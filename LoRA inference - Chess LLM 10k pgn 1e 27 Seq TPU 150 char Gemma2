{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c075a9f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:07:12.225830Z",
     "iopub.status.busy": "2024-10-27T21:07:12.225187Z",
     "iopub.status.idle": "2024-10-27T21:07:12.234852Z",
     "shell.execute_reply": "2024-10-27T21:07:12.234112Z"
    },
    "papermill": {
     "duration": 0.020771,
     "end_time": "2024-10-27T21:07:12.236495",
     "exception": false,
     "start_time": "2024-10-27T21:07:12.215724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Modify inputs here\n",
    "tune_size = 10_000\n",
    "train_size = 2 # For train test split\n",
    "max_dataset_size = 200 #'full' #20_000 leads to about ~1M sequences for inference\n",
    "\n",
    "# model_name = \"gemma_instruct_2b_en\"\n",
    "# model_name = \"gemma_2b_en\"\n",
    "model_name = \"gemma2_2b_en\"\n",
    "\n",
    "# lora_h5 = \"gemma_2b_enV2-100\"\n",
    "total_epochs = 1 # from training\n",
    "\n",
    "# Max seq len, from max to 80 due to memory issues\n",
    "max_seq_len = 27\n",
    "\n",
    "\n",
    "# Set max_char length for model out here\n",
    "max_char_output = 150 #128 # 64 ~seq length 11, 150 for seq_len ~27\n",
    "max_char_input = 150 #128\n",
    "\n",
    "# Set batch size for memory opt\n",
    "batch_size = 24 # 300\n",
    "\n",
    "cpu = 'TPU'\n",
    "file_name = f'lora_infer_{tune_size}pgn-{model_name}-{total_epochs}e-{max_seq_len}len-{max_dataset_size}set-{cpu}-{max_char_output}ch.pkl'\n",
    "\n",
    "LORA_WEIGHTS_PATH = \"/kaggle/input/lora-updated-chess-llm/gemma2_2b_en-10000pgn-1e-24len-TPU-8.lora.h5\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "172f5a51",
   "metadata": {
    "papermill": {
     "duration": 0.0074,
     "end_time": "2024-10-27T21:07:12.251658",
     "exception": false,
     "start_time": "2024-10-27T21:07:12.244258",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "68671806",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:07:12.267926Z",
     "iopub.status.busy": "2024-10-27T21:07:12.267624Z",
     "iopub.status.idle": "2024-10-27T21:08:56.415904Z",
     "shell.execute_reply": "2024-10-27T21:08:56.415013Z"
    },
    "papermill": {
     "duration": 104.159106,
     "end_time": "2024-10-27T21:08:56.418184",
     "exception": false,
     "start_time": "2024-10-27T21:07:12.259078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tensorflow 2.16.1 requires ml-dtypes~=0.3.1, but you have ml-dtypes 0.4.1 which is incompatible.\r\n",
      "tensorflow 2.16.1 requires tensorboard<2.17,>=2.16, but you have tensorboard 2.18.0 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0m\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\r\n",
      "\u001b[0m"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\r\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tensorflow-cpu 2.18.0 requires ml-dtypes<0.5.0,>=0.4.0, but you have ml-dtypes 0.3.2 which is incompatible.\r\n",
      "tensorflow-cpu 2.18.0 requires tensorboard<2.19,>=2.18, but you have tensorboard 2.16.2 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0m\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\r\n",
      "\u001b[0m\r\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\r\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tensorflow-cpu 2.18.0 requires ml-dtypes<0.5.0,>=0.4.0, but you have ml-dtypes 0.3.2 which is incompatible.\r\n",
      "tensorflow-cpu 2.18.0 requires tensorboard<2.19,>=2.18, but you have tensorboard 2.16.2 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0m\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\r\n",
      "\u001b[0m"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\r\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tf-keras 2.16.0 requires tensorflow<2.17,>=2.16, but you have tensorflow 2.17.1 which is incompatible.\r\n",
      "tensorflow-cpu 2.18.0 requires ml-dtypes<0.5.0,>=0.4.0, but you have ml-dtypes 0.3.2 which is incompatible.\r\n",
      "tensorflow-cpu 2.18.0 requires tensorboard<2.19,>=2.18, but you have tensorboard 2.17.1 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0m\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\r\n",
      "\u001b[0m"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\r\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\r\n"
     ]
    }
   ],
   "source": [
    "if cpu == 'TPU':\n",
    "    !pip install -q tensorflow-cpu\n",
    "    !pip install -q -U keras-nlp tensorflow-hub\n",
    "    !pip install -q -U keras>=3\n",
    "    !pip install -q -U tensorflow-text\n",
    "else:\n",
    "    # Install Keras\n",
    "    !pip install -q -U keras-nlp\n",
    "    !pip install -q -U keras>=3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b8b88c24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:08:56.435059Z",
     "iopub.status.busy": "2024-10-27T21:08:56.434748Z",
     "iopub.status.idle": "2024-10-27T21:08:56.438851Z",
     "shell.execute_reply": "2024-10-27T21:08:56.438182Z"
    },
    "papermill": {
     "duration": 0.014616,
     "end_time": "2024-10-27T21:08:56.440540",
     "exception": false,
     "start_time": "2024-10-27T21:08:56.425924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "os.environ[\"KERAS_BACKEND\"] = \"jax\"  # Or \"torch\" or \"tensorflow\".\n",
    "# Avoid memory fragmentation on JAX backend.\n",
    "os.environ[\"XLA_PYTHON_CLIENT_MEM_FRACTION\"] = \"1.0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f6d76cf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:08:56.456144Z",
     "iopub.status.busy": "2024-10-27T21:08:56.455919Z",
     "iopub.status.idle": "2024-10-27T21:09:55.635970Z",
     "shell.execute_reply": "2024-10-27T21:09:55.634631Z"
    },
    "papermill": {
     "duration": 59.190816,
     "end_time": "2024-10-27T21:09:55.638306",
     "exception": false,
     "start_time": "2024-10-27T21:08:56.447490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-10-27 21:09:07.370809: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-10-27 21:09:07.396173: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-10-27 21:09:07.403227: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Logging before InitGoogle() is written to STDERR\n",
      "E0000 00:00:1730063352.631661      77 common_lib.cc:798] Could not set metric server port: INVALID_ARGUMENT: Could not find SliceBuilder port 8471 in any of the 0 ports provided in `tpu_process_addresses`=\"local\"\n",
      "=== Source Location Trace: === \n",
      "learning/45eac/tfrc/runtime/common_lib.cc:479\n",
      "E1027 21:09:12.684227826      77 oauth2_credentials.cc:238]            oauth_fetch: UNKNOWN:C-ares status is not ARES_SUCCESS qtype=A name=metadata.google.internal. is_balancer=0: Domain name not found {created_time:\"2024-10-27T21:09:12.684212458+00:00\", grpc_status:2}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "normalizer.cc(51) LOG(INFO) precompiled_charsmap is empty. use identity normalization.\n"
     ]
    }
   ],
   "source": [
    "import keras\n",
    "import keras_nlp\n",
    "\n",
    "# Load the model\n",
    "gemma_lm = keras_nlp.models.GemmaCausalLM.from_preset(model_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6904d4ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:55.655980Z",
     "iopub.status.busy": "2024-10-27T21:09:55.655383Z",
     "iopub.status.idle": "2024-10-27T21:09:55.684678Z",
     "shell.execute_reply": "2024-10-27T21:09:55.683755Z"
    },
    "papermill": {
     "duration": 0.040081,
     "end_time": "2024-10-27T21:09:55.686579",
     "exception": false,
     "start_time": "2024-10-27T21:09:55.646498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                                                  </span>┃<span style=\"font-weight: bold\">                                   Config </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                              │                      Vocab size: <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                                                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                  Config\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                              │                      Vocab size: \u001b[38;5;34m256,000\u001b[0m │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2304</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,614,341,888</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">589,824,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2304\u001b[0m)        │   \u001b[38;5;34m2,614,341,888\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n",
       "│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m589,824,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n",
       "│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,614,341,888</span> (9.74 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,614,341,888\u001b[0m (9.74 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,614,341,888</span> (9.74 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,614,341,888\u001b[0m (9.74 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gemma_lm.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f3d06ca",
   "metadata": {
    "papermill": {
     "duration": 0.007802,
     "end_time": "2024-10-27T21:09:55.702641",
     "exception": false,
     "start_time": "2024-10-27T21:09:55.694839",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Test max length outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "22e990c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:55.720370Z",
     "iopub.status.busy": "2024-10-27T21:09:55.720113Z",
     "iopub.status.idle": "2024-10-27T21:09:55.724229Z",
     "shell.execute_reply": "2024-10-27T21:09:55.723332Z"
    },
    "papermill": {
     "duration": 0.015233,
     "end_time": "2024-10-27T21:09:55.725889",
     "exception": false,
     "start_time": "2024-10-27T21:09:55.710656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Test on seq len of 80\n",
    "# sample_text = \"\"\"Instruction:\n",
    "# Predict the next chess move in the sequence ('e4', 'e5', 'Nf3', 'Nc6', 'd3', 'Bc5', 'c3', \n",
    "# 'Nf6', 'Ng5', 'O-O', 'Be3', 'Bb6', 'Be2', 'd6', 'O-O', 'h6', 'Nf3', 'Bg4', 'Nbd2', 'Qd7', \n",
    "# 'Qb3', 'Rae8', 'Bxb6', 'axb6', 'a4', 'Na5', 'Qc2', 'c5', 'b4', 'cxb4', 'cxb4', 'Nc6', 'b5',\n",
    "# 'Na5', 'Nc4', 'Nxc4', 'dxc4', 'Rc8', 'Rad1', 'Qe6', 'Qb3', 'Nxe4', 'h3', 'Bh5', 'Bd3', 'Nc5',\n",
    "# 'Qc2', 'Bxf3', 'gxf3', 'Nxd3', 'Rxd3', 'Qxc4', 'Qxc4', 'Rxc4', 'Rxd6', 'Rxa4', 'Rxb6', 'Rb8',\n",
    "# 'Re1', 'f6', 'f4', 'Rxf4', 'Rc1', 'Rb4', 'Rc7', 'Rb1+', 'Kg2', 'Rb4', 'Rbxb7', 'Rxb7', 'Rxb7',\n",
    "# 'Kh7', 'b6', 'Kg6', 'Rb8', 'f5', 'b7', 'e4', 'f4', 'e3')\n",
    "# The next move in the sequence is 'Nf3+' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n",
    "# \"\"\"\n",
    "# test_output = gemma_lm.generate(sample_text, max_length=450)\n",
    "# print(test_output)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64404fe9",
   "metadata": {
    "papermill": {
     "duration": 0.007653,
     "end_time": "2024-10-27T21:09:55.741530",
     "exception": false,
     "start_time": "2024-10-27T21:09:55.733877",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# LoRA Weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f56bf8a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:55.758832Z",
     "iopub.status.busy": "2024-10-27T21:09:55.758556Z",
     "iopub.status.idle": "2024-10-27T21:09:56.383447Z",
     "shell.execute_reply": "2024-10-27T21:09:56.382302Z"
    },
    "papermill": {
     "duration": 0.635957,
     "end_time": "2024-10-27T21:09:56.385474",
     "exception": false,
     "start_time": "2024-10-27T21:09:55.749517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                                                  </span>┃<span style=\"font-weight: bold\">                                   Config </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                              │                      Vocab size: <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                                                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                  Config\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                              │                      Vocab size: \u001b[38;5;34m256,000\u001b[0m │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2304</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,617,270,528</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">589,824,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2304\u001b[0m)        │   \u001b[38;5;34m2,617,270,528\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n",
       "│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m589,824,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n",
       "│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,617,270,528</span> (9.75 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,617,270,528\u001b[0m (9.75 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,928,640</span> (11.17 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,928,640\u001b[0m (11.17 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,614,341,888</span> (9.74 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m2,614,341,888\u001b[0m (9.74 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Enable LoRA for the model and set the LoRA rank to 4.\n",
    "gemma_lm.backbone.enable_lora(rank=4)\n",
    "gemma_lm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "22756bf9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:56.407287Z",
     "iopub.status.busy": "2024-10-27T21:09:56.406456Z",
     "iopub.status.idle": "2024-10-27T21:09:56.740995Z",
     "shell.execute_reply": "2024-10-27T21:09:56.739663Z"
    },
    "papermill": {
     "duration": 0.348415,
     "end_time": "2024-10-27T21:09:56.743628",
     "exception": false,
     "start_time": "2024-10-27T21:09:56.395213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Limit the input sequence length to 512 (to control memory usage).\n",
    "# gemma_lm.preprocessor.sequence_length = 512\n",
    "gemma_lm.preprocessor.sequence_length = max_char_input\n",
    "\n",
    "\n",
    "# Define paths\n",
    "# model_name = \"gemma_2b_enV2-100\"\n",
    "# model_name = \"gemma_2b_enV2-1k\"\n",
    "\n",
    "# LORA_WEIGHTS_PATH = f\"/kaggle/input/lora-updated-chess-llm/{lora_h5}\"\n",
    "\n",
    "# Load only the lora weights\n",
    "gemma_lm.backbone.load_lora_weights(LORA_WEIGHTS_PATH)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2099607",
   "metadata": {
    "papermill": {
     "duration": 0.009302,
     "end_time": "2024-10-27T21:09:56.763187",
     "exception": false,
     "start_time": "2024-10-27T21:09:56.753885",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Test Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "df44c51c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:56.784337Z",
     "iopub.status.busy": "2024-10-27T21:09:56.783511Z",
     "iopub.status.idle": "2024-10-27T21:09:58.497434Z",
     "shell.execute_reply": "2024-10-27T21:09:58.496246Z"
    },
    "papermill": {
     "duration": 1.726772,
     "end_time": "2024-10-27T21:09:58.499161",
     "exception": false,
     "start_time": "2024-10-27T21:09:56.772389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>white_username</th>\n",
       "      <th>black_username</th>\n",
       "      <th>white_id</th>\n",
       "      <th>black_id</th>\n",
       "      <th>white_rating</th>\n",
       "      <th>black_rating</th>\n",
       "      <th>white_result</th>\n",
       "      <th>black_result</th>\n",
       "      <th>time_class</th>\n",
       "      <th>time_control</th>\n",
       "      <th>rules</th>\n",
       "      <th>rated</th>\n",
       "      <th>fen</th>\n",
       "      <th>pgn</th>\n",
       "      <th>move_seq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>miniman2804</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/miniman2804</td>\n",
       "      <td>1708</td>\n",
       "      <td>1608</td>\n",
       "      <td>win</td>\n",
       "      <td>checkmated</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/259200</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r2r4/p2p1p1p/b6R/n1p1kp2/2P2P2/3BP3/PP5P/4K2R ...</td>\n",
       "      <td>[Event \"Enjoyable games 2 - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(d4, Nf6, c4, e6, Nc3, Bb4, Qb3, Bxc3+, Qxc3, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>koltcho69</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/koltcho69</td>\n",
       "      <td>1726</td>\n",
       "      <td>1577</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>8/5Q1k/4n1pp/8/7P/2N2b2/PP3P2/5K2 b - - 1 33</td>\n",
       "      <td>[Event \"Rapid Rats - Board 5\"]\\n[Site \"Chess.c...</td>\n",
       "      <td>(e4, e5, Nf3, Nc6, Bc4, Bc5, c3, a6, d4, exd4,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>enhmandah</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/enhmandah</td>\n",
       "      <td>1727</td>\n",
       "      <td>842</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>rn1q1b1r/kb2p1pp/2p5/p1Q5/N1BP2n1/4PN2/1P3PPP/...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(d4, d5, e3, c6, c4, dxc4, Bxc4, b5, Bb3, a5, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>enhmandah</td>\n",
       "      <td>-Amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/enhmandah</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>819</td>\n",
       "      <td>1727</td>\n",
       "      <td>checkmated</td>\n",
       "      <td>win</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r3kb1r/pp3ppp/3p1n2/2pKp3/P3P3/1P6/4qP1P/QNB5 ...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(e4, c5, b3, Nc6, a4, d6, Bb5, Bd7, Qf3, Nd4, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>Shalllow-Blue</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/shalllow-blue</td>\n",
       "      <td>1729</td>\n",
       "      <td>1116</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r3b2r/pp6/2pPpR1k/4n3/2P3Q1/3B4/PP4PP/R5K1 b -...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(d4, e6, c4, Qf6, Nf3, d6, Bg5, Qg6, Nc3, c6, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  white_username black_username                                    white_id  \\\n",
       "0         -Amos-    miniman2804     https://api.chess.com/pub/player/-amos-   \n",
       "1         -Amos-      koltcho69     https://api.chess.com/pub/player/-amos-   \n",
       "2         -Amos-      enhmandah     https://api.chess.com/pub/player/-amos-   \n",
       "3      enhmandah         -Amos-  https://api.chess.com/pub/player/enhmandah   \n",
       "4         -Amos-  Shalllow-Blue     https://api.chess.com/pub/player/-amos-   \n",
       "\n",
       "                                         black_id  white_rating  black_rating  \\\n",
       "0    https://api.chess.com/pub/player/miniman2804          1708          1608   \n",
       "1      https://api.chess.com/pub/player/koltcho69          1726          1577   \n",
       "2      https://api.chess.com/pub/player/enhmandah          1727           842   \n",
       "3         https://api.chess.com/pub/player/-amos-           819          1727   \n",
       "4  https://api.chess.com/pub/player/shalllow-blue          1729          1116   \n",
       "\n",
       "  white_result black_result time_class time_control  rules  rated  \\\n",
       "0          win   checkmated      daily     1/259200  chess   True   \n",
       "1          win     resigned      daily     1/172800  chess   True   \n",
       "2          win     resigned      daily     1/172800  chess   True   \n",
       "3   checkmated          win      daily     1/172800  chess   True   \n",
       "4          win     resigned      daily     1/172800  chess   True   \n",
       "\n",
       "                                                 fen  \\\n",
       "0  r2r4/p2p1p1p/b6R/n1p1kp2/2P2P2/3BP3/PP5P/4K2R ...   \n",
       "1       8/5Q1k/4n1pp/8/7P/2N2b2/PP3P2/5K2 b - - 1 33   \n",
       "2  rn1q1b1r/kb2p1pp/2p5/p1Q5/N1BP2n1/4PN2/1P3PPP/...   \n",
       "3  r3kb1r/pp3ppp/3p1n2/2pKp3/P3P3/1P6/4qP1P/QNB5 ...   \n",
       "4  r3b2r/pp6/2pPpR1k/4n3/2P3Q1/3B4/PP4PP/R5K1 b -...   \n",
       "\n",
       "                                                 pgn  \\\n",
       "0  [Event \"Enjoyable games 2 - Round 1\"]\\n[Site \"...   \n",
       "1  [Event \"Rapid Rats - Board 5\"]\\n[Site \"Chess.c...   \n",
       "2  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...   \n",
       "3  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...   \n",
       "4  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...   \n",
       "\n",
       "                                            move_seq  \n",
       "0  (d4, Nf6, c4, e6, Nc3, Bb4, Qb3, Bxc3+, Qxc3, ...  \n",
       "1  (e4, e5, Nf3, Nc6, Bc4, Bc5, c3, a6, d4, exd4,...  \n",
       "2  (d4, d5, e3, c6, c4, dxc4, Bxc4, b5, Bb3, a5, ...  \n",
       "3  (e4, c5, b3, Nc6, a4, d6, Bb5, Bd7, Qf3, Nd4, ...  \n",
       "4  (d4, e6, c4, Qf6, Nf3, d6, Bg5, Qg6, Nc3, c6, ...  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df0 = pd.read_pickle('/kaggle/input/60k-chess-clean/club_games_data.pkl')\n",
    "\n",
    "df0.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e42c07a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:58.519365Z",
     "iopub.status.busy": "2024-10-27T21:09:58.519035Z",
     "iopub.status.idle": "2024-10-27T21:09:58.572713Z",
     "shell.execute_reply": "2024-10-27T21:09:58.571767Z"
    },
    "papermill": {
     "duration": 0.065724,
     "end_time": "2024-10-27T21:09:58.574484",
     "exception": false,
     "start_time": "2024-10-27T21:09:58.508760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 66879 entries, 0 to 66878\n",
      "Data columns (total 15 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   white_username  66879 non-null  object\n",
      " 1   black_username  66879 non-null  object\n",
      " 2   white_id        66879 non-null  object\n",
      " 3   black_id        66879 non-null  object\n",
      " 4   white_rating    66879 non-null  int64 \n",
      " 5   black_rating    66879 non-null  int64 \n",
      " 6   white_result    66879 non-null  object\n",
      " 7   black_result    66879 non-null  object\n",
      " 8   time_class      66879 non-null  object\n",
      " 9   time_control    66879 non-null  object\n",
      " 10  rules           66879 non-null  object\n",
      " 11  rated           66879 non-null  bool  \n",
      " 12  fen             66879 non-null  object\n",
      " 13  pgn             66879 non-null  object\n",
      " 14  move_seq        65270 non-null  object\n",
      "dtypes: bool(1), int64(2), object(12)\n",
      "memory usage: 7.2+ MB\n"
     ]
    }
   ],
   "source": [
    "df0.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f5a5cea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:58.593871Z",
     "iopub.status.busy": "2024-10-27T21:09:58.593563Z",
     "iopub.status.idle": "2024-10-27T21:09:58.674128Z",
     "shell.execute_reply": "2024-10-27T21:09:58.672856Z"
    },
    "papermill": {
     "duration": 0.092896,
     "end_time": "2024-10-27T21:09:58.676550",
     "exception": false,
     "start_time": "2024-10-27T21:09:58.583654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df0[df0['rules']=='chess'].dropna() # Classic chess only, and drop None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "32053a78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:58.697490Z",
     "iopub.status.busy": "2024-10-27T21:09:58.697166Z",
     "iopub.status.idle": "2024-10-27T21:09:58.750278Z",
     "shell.execute_reply": "2024-10-27T21:09:58.749235Z"
    },
    "papermill": {
     "duration": 0.065398,
     "end_time": "2024-10-27T21:09:58.751875",
     "exception": false,
     "start_time": "2024-10-27T21:09:58.686477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 65034 entries, 0 to 66878\n",
      "Data columns (total 15 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   white_username  65034 non-null  object\n",
      " 1   black_username  65034 non-null  object\n",
      " 2   white_id        65034 non-null  object\n",
      " 3   black_id        65034 non-null  object\n",
      " 4   white_rating    65034 non-null  int64 \n",
      " 5   black_rating    65034 non-null  int64 \n",
      " 6   white_result    65034 non-null  object\n",
      " 7   black_result    65034 non-null  object\n",
      " 8   time_class      65034 non-null  object\n",
      " 9   time_control    65034 non-null  object\n",
      " 10  rules           65034 non-null  object\n",
      " 11  rated           65034 non-null  bool  \n",
      " 12  fen             65034 non-null  object\n",
      " 13  pgn             65034 non-null  object\n",
      " 14  move_seq        65034 non-null  object\n",
      "dtypes: bool(1), int64(2), object(12)\n",
      "memory usage: 7.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3123dbf5",
   "metadata": {
    "papermill": {
     "duration": 0.009183,
     "end_time": "2024-10-27T21:09:58.770977",
     "exception": false,
     "start_time": "2024-10-27T21:09:58.761794",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Reduce size of dataset\n",
    "\n",
    "Too large, need to reduce since we have limited GPU time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "23dc2bc2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:58.818444Z",
     "iopub.status.busy": "2024-10-27T21:09:58.818153Z",
     "iopub.status.idle": "2024-10-27T21:09:58.829405Z",
     "shell.execute_reply": "2024-10-27T21:09:58.828481Z"
    },
    "papermill": {
     "duration": 0.023672,
     "end_time": "2024-10-27T21:09:58.831202",
     "exception": false,
     "start_time": "2024-10-27T21:09:58.807530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# truncate dataset size, 20k is about 1M sequences\n",
    "if max_dataset_size != 'full':\n",
    "    df = df.sample(n=max_dataset_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d90c8584",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:58.851386Z",
     "iopub.status.busy": "2024-10-27T21:09:58.851124Z",
     "iopub.status.idle": "2024-10-27T21:09:59.905021Z",
     "shell.execute_reply": "2024-10-27T21:09:59.903740Z"
    },
    "papermill": {
     "duration": 1.066686,
     "end_time": "2024-10-27T21:09:59.907398",
     "exception": false,
     "start_time": "2024-10-27T21:09:58.840712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# tune_size = 1_000 # Number of pgn samples to use in tuning\n",
    "min_elo = 1_000 # I want the model to tune on the better half of players\n",
    "\n",
    "\n",
    "df_low_elo = df[df['white_rating']<min_elo]\n",
    "\n",
    "df = df[df['white_rating']>=min_elo]\n",
    "\n",
    "\n",
    "X = df.drop('white_rating', axis=1)\n",
    "y = df['white_rating']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=train_size, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "83d7c9dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:59.928158Z",
     "iopub.status.busy": "2024-10-27T21:09:59.927568Z",
     "iopub.status.idle": "2024-10-27T21:09:59.932446Z",
     "shell.execute_reply": "2024-10-27T21:09:59.931577Z"
    },
    "papermill": {
     "duration": 0.017353,
     "end_time": "2024-10-27T21:09:59.934256",
     "exception": false,
     "start_time": "2024-10-27T21:09:59.916903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 138\n"
     ]
    }
   ],
   "source": [
    "print(len(X_train),len(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7969ffe6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:59.953676Z",
     "iopub.status.busy": "2024-10-27T21:09:59.953378Z",
     "iopub.status.idle": "2024-10-27T21:09:59.957521Z",
     "shell.execute_reply": "2024-10-27T21:09:59.956755Z"
    },
    "papermill": {
     "duration": 0.015781,
     "end_time": "2024-10-27T21:09:59.959134",
     "exception": false,
     "start_time": "2024-10-27T21:09:59.943353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60\n"
     ]
    }
   ],
   "source": [
    "print(len(df_low_elo))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c08aa80d",
   "metadata": {
    "papermill": {
     "duration": 0.009149,
     "end_time": "2024-10-27T21:09:59.977491",
     "exception": false,
     "start_time": "2024-10-27T21:09:59.968342",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will use the test set as the high elo test, and then the filtered lower elo as another test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "88f7981b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:09:59.997433Z",
     "iopub.status.busy": "2024-10-27T21:09:59.997187Z",
     "iopub.status.idle": "2024-10-27T21:10:00.002819Z",
     "shell.execute_reply": "2024-10-27T21:10:00.001966Z"
    },
    "papermill": {
     "duration": 0.017676,
     "end_time": "2024-10-27T21:10:00.004477",
     "exception": false,
     "start_time": "2024-10-27T21:09:59.986801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('e4', 'c5', 'b3', 'Nc6', 'a4', 'Nf6#')]\n",
      "{('e4',), ('e4', 'c5'), ('e4', 'c5', 'b3', 'Nc6', 'a4'), ('e4', 'c5', 'b3'), ('e4', 'c5', 'b3', 'Nc6')}\n"
     ]
    }
   ],
   "source": [
    "def seq_set(seq_data, n):\n",
    "    # List of all UNIQUE sequences of length < n in a given dataset of moves\n",
    "    sequences = set()\n",
    "    \n",
    "    for seq in seq_data:\n",
    "        max_n = n if len(seq) >= n else len(seq)\n",
    "        #sequences.update(seq[:t] for t in range(1,max_n+1))\n",
    "        # Minor edit to allow for full sequnces of max length, excludes check mates\n",
    "        sequences.update(seq[:t] for t in range(1,max_n))\n",
    "\n",
    "\n",
    "    return sequences\n",
    "        \n",
    "# Trained on n=6, max seq of 5 and asked to predict 6th\n",
    "test_seq_input = [('e4', 'c5', 'b3', 'Nc6', 'a4', 'Nf6#')]\n",
    "print(test_seq_input)\n",
    "print(seq_set(test_seq_input, 1_000))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8329cd7e",
   "metadata": {
    "papermill": {
     "duration": 0.010497,
     "end_time": "2024-10-27T21:10:00.025968",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.015471",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Set max seq length "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2bccf9d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.048020Z",
     "iopub.status.busy": "2024-10-27T21:10:00.047755Z",
     "iopub.status.idle": "2024-10-27T21:10:00.054586Z",
     "shell.execute_reply": "2024-10-27T21:10:00.053819Z"
    },
    "papermill": {
     "duration": 0.020011,
     "end_time": "2024-10-27T21:10:00.056292",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.036281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1339"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "low_elo_seq = seq_set(df_low_elo['move_seq'], max_seq_len)\n",
    "len(low_elo_seq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "836e828a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.076353Z",
     "iopub.status.busy": "2024-10-27T21:10:00.076115Z",
     "iopub.status.idle": "2024-10-27T21:10:00.082937Z",
     "shell.execute_reply": "2024-10-27T21:10:00.082104Z"
    },
    "papermill": {
     "duration": 0.018969,
     "end_time": "2024-10-27T21:10:00.084651",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.065682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3106"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "high_elo_seq = seq_set(X_test['move_seq'], max_seq_len)\n",
    "len(high_elo_seq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6e1fbcc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.104996Z",
     "iopub.status.busy": "2024-10-27T21:10:00.104740Z",
     "iopub.status.idle": "2024-10-27T21:10:00.109478Z",
     "shell.execute_reply": "2024-10-27T21:10:00.108721Z"
    },
    "papermill": {
     "duration": 0.016945,
     "end_time": "2024-10-27T21:10:00.111176",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.094231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "intersect = low_elo_seq & high_elo_seq\n",
    "\n",
    "len(intersect)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2cecfa1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.132087Z",
     "iopub.status.busy": "2024-10-27T21:10:00.131850Z",
     "iopub.status.idle": "2024-10-27T21:10:00.136849Z",
     "shell.execute_reply": "2024-10-27T21:10:00.136117Z"
    },
    "papermill": {
     "duration": 0.0175,
     "end_time": "2024-10-27T21:10:00.138521",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.121021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1278"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "low_set = low_elo_seq - high_elo_seq\n",
    "len(low_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "66be4d4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.159141Z",
     "iopub.status.busy": "2024-10-27T21:10:00.158905Z",
     "iopub.status.idle": "2024-10-27T21:10:00.163881Z",
     "shell.execute_reply": "2024-10-27T21:10:00.163024Z"
    },
    "papermill": {
     "duration": 0.017084,
     "end_time": "2024-10-27T21:10:00.165398",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.148314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3045"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "high_set = high_elo_seq - low_elo_seq\n",
    "len(high_set)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6f5fbad",
   "metadata": {
    "papermill": {
     "duration": 0.009803,
     "end_time": "2024-10-27T21:10:00.184859",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.175056",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Total Size of Inference Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0e3d5501",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.205553Z",
     "iopub.status.busy": "2024-10-27T21:10:00.205298Z",
     "iopub.status.idle": "2024-10-27T21:10:00.209177Z",
     "shell.execute_reply": "2024-10-27T21:10:00.208396Z"
    },
    "papermill": {
     "duration": 0.016234,
     "end_time": "2024-10-27T21:10:00.210817",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.194583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4,384\n"
     ]
    }
   ],
   "source": [
    "total_size = len(high_set) + len(low_set) + len(intersect)\n",
    "\n",
    "print(f\"{total_size:,}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0dfb8f6",
   "metadata": {
    "papermill": {
     "duration": 0.009628,
     "end_time": "2024-10-27T21:10:00.230299",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.220671",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Metrics Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "14d06c07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.251038Z",
     "iopub.status.busy": "2024-10-27T21:10:00.250802Z",
     "iopub.status.idle": "2024-10-27T21:10:00.255248Z",
     "shell.execute_reply": "2024-10-27T21:10:00.254473Z"
    },
    "papermill": {
     "duration": 0.016826,
     "end_time": "2024-10-27T21:10:00.256903",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.240077",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import time\n",
    "\n",
    "def time_wrapper(func):\n",
    "    def wrapper(*args, **kwargs):\n",
    "        start_time = time.time()  # Record the start time\n",
    "        result = func(*args, **kwargs)  # Call the original function\n",
    "        end_time = time.time()  # Record the end time\n",
    "        print(f\"Execution time: {end_time - start_time:.4f} seconds\")\n",
    "        return result\n",
    "    return wrapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5b1687b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.277506Z",
     "iopub.status.busy": "2024-10-27T21:10:00.277261Z",
     "iopub.status.idle": "2024-10-27T21:10:00.281859Z",
     "shell.execute_reply": "2024-10-27T21:10:00.281089Z"
    },
    "papermill": {
     "duration": 0.017006,
     "end_time": "2024-10-27T21:10:00.283650",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.266644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def apply_format(seq):\n",
    "    prompt = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\".format(\n",
    "            instruction=f\"Predict the next chess move in the sequence {str(list(seq))}\",\n",
    "            response=\"\",\n",
    "        )\n",
    "    return prompt\n",
    "\n",
    "\n",
    "@time_wrapper\n",
    "def batch_prompt(seq_list):\n",
    "    batch_prompts = list(map(apply_format, seq_list))\n",
    "    \n",
    "    output = gemma_lm.generate(batch_prompts, max_length=max_char_output)\n",
    "    #print(output)\n",
    "    #seq.append(output.split(' ')[-1].strip(\"'\"))\n",
    "    #print(output)\n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6c4c7b09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.304219Z",
     "iopub.status.busy": "2024-10-27T21:10:00.303947Z",
     "iopub.status.idle": "2024-10-27T21:10:00.308665Z",
     "shell.execute_reply": "2024-10-27T21:10:00.307894Z"
    },
    "papermill": {
     "duration": 0.017115,
     "end_time": "2024-10-27T21:10:00.310304",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.293189",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n",
      "[4, 5, 6, 7, 8]\n"
     ]
    }
   ],
   "source": [
    "def remove_and_return(lst, n):\n",
    "    result = lst[:n]\n",
    "    del lst[:n]\n",
    "    \n",
    "    return result\n",
    "\n",
    "my_list = [1, 2, 3, 4, 5, 6, 7, 8]\n",
    "print(remove_and_return(my_list, 3))  # Output: [1, 2, 3]\n",
    "print(my_list)  # Output: [4, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f999f826",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.331032Z",
     "iopub.status.busy": "2024-10-27T21:10:00.330795Z",
     "iopub.status.idle": "2024-10-27T21:10:00.334996Z",
     "shell.execute_reply": "2024-10-27T21:10:00.334224Z"
    },
    "papermill": {
     "duration": 0.016506,
     "end_time": "2024-10-27T21:10:00.336570",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.320064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def segment_all(seq_list, batch_size):\n",
    "    data = seq_list.copy()\n",
    "    final_output = []\n",
    "    while len(data) > 0:\n",
    "        batch = remove_and_return(data, batch_size)\n",
    "        final_output.append(batch)\n",
    "    return final_output\n",
    "        \n",
    "        \n",
    "# test = segment_all(list(intersect)[:1000], 300)\n",
    "\n",
    "# print(len(test))|"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9a7e380b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.357257Z",
     "iopub.status.busy": "2024-10-27T21:10:00.357022Z",
     "iopub.status.idle": "2024-10-27T21:10:00.361021Z",
     "shell.execute_reply": "2024-10-27T21:10:00.360263Z"
    },
    "papermill": {
     "duration": 0.016515,
     "end_time": "2024-10-27T21:10:00.362765",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.346250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def run_all(seq_set, n):\n",
    "    all_res = []\n",
    "    segments = segment_all(list(seq_set), n)\n",
    "    for sample in segments:\n",
    "        res = batch_prompt(sample)\n",
    "        all_res.append((sample,  res))\n",
    "    return all_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b9e26570",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T21:10:00.383276Z",
     "iopub.status.busy": "2024-10-27T21:10:00.383004Z",
     "iopub.status.idle": "2024-10-27T22:08:17.255216Z",
     "shell.execute_reply": "2024-10-27T22:08:17.254342Z"
    },
    "papermill": {
     "duration": 3496.901185,
     "end_time": "2024-10-27T22:08:17.273505",
     "exception": false,
     "start_time": "2024-10-27T21:10:00.372320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 56.2393 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.7629 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.7967 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5212 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 24.7528 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 24.4981 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.0380 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.7999 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2805 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.2921 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.0535 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5212 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.5097 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0260 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 30.0588 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.5323 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.2694 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0274 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.3016 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.7845 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.2893 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.7969 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.0044 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2787 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.5535 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.5327 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.7838 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 24.7494 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 23.9919 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5214 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.5521 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7798 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2918 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.5533 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2916 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.7970 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5310 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0390 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0396 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.0142 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.2804 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2854 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.2772 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5330 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2940 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.2901 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.5196 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 30.3251 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.5419 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.5541 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.7758 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.0202 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5227 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5206 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7719 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7736 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.2890 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.2891 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.0370 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.5528 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5194 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.2694 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.5465 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.0354 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 22.7273 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7712 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.2565 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.7948 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.0156 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.8056 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 24.7512 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.2669 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 24.7516 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 30.0607 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 23.7414 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.2587 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.2998 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2769 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.5302 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 22.9815 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.5311 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.7824 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.7607 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2772 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 24.7494 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 30.3102 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7723 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0248 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.0039 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5192 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.0369 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.7644 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 30.0610 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.7614 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.2995 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.5411 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.7630 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.8061 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5200 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0244 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0260 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.7838 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2771 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.7606 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5183 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7732 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0237 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.0340 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.7931 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0242 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5186 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.7930 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.5097 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.3051 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 24.7496 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7737 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.7825 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.8036 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.3092 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0268 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0237 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.2665 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.0360 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5184 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.3007 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.0025 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 50.2395 seconds\n"
     ]
    }
   ],
   "source": [
    "high_res = run_all(high_set, batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e5d80b69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T22:08:17.306990Z",
     "iopub.status.busy": "2024-10-27T22:08:17.306652Z",
     "iopub.status.idle": "2024-10-27T22:08:59.239021Z",
     "shell.execute_reply": "2024-10-27T22:08:59.238167Z"
    },
    "papermill": {
     "duration": 41.967534,
     "end_time": "2024-10-27T22:08:59.257127",
     "exception": false,
     "start_time": "2024-10-27T22:08:17.289593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 9.3403 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 6.8149 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.7725 seconds\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "inter_res = run_all(intersect, batch_size)\n",
    "\n",
    "print(len(inter_res))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "93f06856",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T22:08:59.290431Z",
     "iopub.status.busy": "2024-10-27T22:08:59.290122Z",
     "iopub.status.idle": "2024-10-27T22:08:59.294515Z",
     "shell.execute_reply": "2024-10-27T22:08:59.293793Z"
    },
    "papermill": {
     "duration": 0.023057,
     "end_time": "2024-10-27T22:08:59.296247",
     "exception": false,
     "start_time": "2024-10-27T22:08:59.273190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('e4', 'b6')\n",
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'b6']\n",
      "\n",
      "Response:\n",
      "The next move is 'Nf3'\n"
     ]
    }
   ],
   "source": [
    "n_sample = 22\n",
    "print(inter_res[0][0][n_sample])\n",
    "print(inter_res[0][1][n_sample])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "600d79e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T22:08:59.329397Z",
     "iopub.status.busy": "2024-10-27T22:08:59.329143Z",
     "iopub.status.idle": "2024-10-27T22:33:36.770711Z",
     "shell.execute_reply": "2024-10-27T22:33:36.769877Z"
    },
    "papermill": {
     "duration": 1477.481424,
     "end_time": "2024-10-27T22:33:36.793716",
     "exception": false,
     "start_time": "2024-10-27T22:08:59.312292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5176 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.2900 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.0372 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2784 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.0040 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.5424 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7725 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.2672 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.5196 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.2996 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.5307 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7731 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.7835 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.3005 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 22.9803 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.5432 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.7957 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2788 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.0405 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7807 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.0463 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.0135 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.5418 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 22.4759 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.0367 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2775 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.5298 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.3000 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.5437 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.5318 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2789 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0261 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2777 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.7831 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.2572 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.5404 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.7945 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.7608 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.7717 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.2888 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 24.7503 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2773 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 29.3019 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 24.2460 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.7933 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 31.0699 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.5307 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.2781 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 25.5090 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.7936 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.5307 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 28.0357 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 27.0259 seconds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 26.8777 seconds\n"
     ]
    }
   ],
   "source": [
    "low_res = run_all(low_set, batch_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d635600",
   "metadata": {
    "papermill": {
     "duration": 0.018752,
     "end_time": "2024-10-27T22:33:36.832239",
     "exception": false,
     "start_time": "2024-10-27T22:33:36.813487",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Save Results\n",
    "\n",
    "Save the output for each given sequence of the type high, low, inter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4b423de4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T22:33:36.872175Z",
     "iopub.status.busy": "2024-10-27T22:33:36.871530Z",
     "iopub.status.idle": "2024-10-27T22:33:36.876073Z",
     "shell.execute_reply": "2024-10-27T22:33:36.875331Z"
    },
    "papermill": {
     "duration": 0.026943,
     "end_time": "2024-10-27T22:33:36.877692",
     "exception": false,
     "start_time": "2024-10-27T22:33:36.850749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def to_df(data, name):\n",
    "    sample_df = pd.DataFrame(data)\n",
    "    sample_df[\"elo\"] = name\n",
    "    sample_df.columns = ['seq', 'res', 'elo']\n",
    "    return sample_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "89bfafc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T22:33:36.916417Z",
     "iopub.status.busy": "2024-10-27T22:33:36.915917Z",
     "iopub.status.idle": "2024-10-27T22:33:36.922525Z",
     "shell.execute_reply": "2024-10-27T22:33:36.921757Z"
    },
    "papermill": {
     "duration": 0.027788,
     "end_time": "2024-10-27T22:33:36.924195",
     "exception": false,
     "start_time": "2024-10-27T22:33:36.896407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "inter_df = to_df(inter_res,'inter')\n",
    "high_df = to_df(high_res,'high')\n",
    "low_df = to_df(low_res,'low')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5cd96fff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T22:33:36.962245Z",
     "iopub.status.busy": "2024-10-27T22:33:36.962016Z",
     "iopub.status.idle": "2024-10-27T22:33:36.966469Z",
     "shell.execute_reply": "2024-10-27T22:33:36.965811Z"
    },
    "papermill": {
     "duration": 0.025593,
     "end_time": "2024-10-27T22:33:36.968049",
     "exception": false,
     "start_time": "2024-10-27T22:33:36.942456",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "final_df = pd.concat([inter_df, high_df, low_df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d157d32a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-27T22:33:37.006366Z",
     "iopub.status.busy": "2024-10-27T22:33:37.005959Z",
     "iopub.status.idle": "2024-10-27T22:33:37.016860Z",
     "shell.execute_reply": "2024-10-27T22:33:37.016137Z"
    },
    "papermill": {
     "duration": 0.031971,
     "end_time": "2024-10-27T22:33:37.018466",
     "exception": false,
     "start_time": "2024-10-27T22:33:36.986495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000\n",
      "gemma2_2b_en\n"
     ]
    }
   ],
   "source": [
    "print(tune_size)\n",
    "print(model_name)\n",
    "\n",
    "# file_name = f'lora_infer_{tune_size}.pkl'\n",
    "final_df.to_pickle(f'/kaggle/working/{file_name}')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "tpu1vmV38",
   "dataSources": [
    {
     "datasetId": 5790268,
     "sourceId": 9512215,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5827474,
     "sourceId": 9562421,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5791295,
     "sourceId": 9738078,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 3533,
     "modelInstanceId": 5171,
     "sourceId": 11371,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 3533,
     "modelInstanceId": 5388,
     "sourceId": 11372,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 78150,
     "modelInstanceId": 72244,
     "sourceId": 85984,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30776,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.15"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5194.205451,
   "end_time": "2024-10-27T22:33:44.794329",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-27T21:07:10.588878",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
