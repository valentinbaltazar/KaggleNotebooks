{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9f8096f5",
   "metadata": {
    "papermill": {
     "duration": 0.010187,
     "end_time": "2024-09-30T23:32:05.266214",
     "exception": false,
     "start_time": "2024-09-30T23:32:05.256027",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ee4a7e5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:32:05.287415Z",
     "iopub.status.busy": "2024-09-30T23:32:05.286992Z",
     "iopub.status.idle": "2024-09-30T23:32:32.172077Z",
     "shell.execute_reply": "2024-09-30T23:32:32.170456Z"
    },
    "papermill": {
     "duration": 26.899033,
     "end_time": "2024-09-30T23:32:32.175019",
     "exception": false,
     "start_time": "2024-09-30T23:32:05.275986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Install Keras\n",
    "!pip install -q -U keras-nlp\n",
    "!pip install -q -U keras>=3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cb3c411a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:32:32.196415Z",
     "iopub.status.busy": "2024-09-30T23:32:32.195502Z",
     "iopub.status.idle": "2024-09-30T23:32:32.200757Z",
     "shell.execute_reply": "2024-09-30T23:32:32.199953Z"
    },
    "papermill": {
     "duration": 0.017819,
     "end_time": "2024-09-30T23:32:32.202615",
     "exception": false,
     "start_time": "2024-09-30T23:32:32.184796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "os.environ[\"KERAS_BACKEND\"] = \"jax\"  # Or \"torch\" or \"tensorflow\".\n",
    "# Avoid memory fragmentation on JAX backend.\n",
    "os.environ[\"XLA_PYTHON_CLIENT_MEM_FRACTION\"]=\"1.00\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d8853856",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:32:32.223335Z",
     "iopub.status.busy": "2024-09-30T23:32:32.223010Z",
     "iopub.status.idle": "2024-09-30T23:33:38.018191Z",
     "shell.execute_reply": "2024-09-30T23:33:38.017233Z"
    },
    "papermill": {
     "duration": 65.807841,
     "end_time": "2024-09-30T23:33:38.020758",
     "exception": false,
     "start_time": "2024-09-30T23:32:32.212917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "normalizer.cc(51) LOG(INFO) precompiled_charsmap is empty. use identity normalization.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                                                  </span>┃<span style=\"font-weight: bold\">                                   Config </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                              │                      Vocab size: <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                                                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                  Config\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                              │                      Vocab size: \u001b[38;5;34m256,000\u001b[0m │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">524,288,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)        │   \u001b[38;5;34m2,506,172,416\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n",
       "│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m524,288,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n",
       "│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import keras\n",
    "import keras_nlp\n",
    "\n",
    "# Load the model\n",
    "gemma_lm = keras_nlp.models.GemmaCausalLM.from_preset(\"gemma_2b_en\")\n",
    "gemma_lm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e904bec3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:38.049343Z",
     "iopub.status.busy": "2024-09-30T23:33:38.048706Z",
     "iopub.status.idle": "2024-09-30T23:33:38.325014Z",
     "shell.execute_reply": "2024-09-30T23:33:38.324100Z"
    },
    "papermill": {
     "duration": 0.290577,
     "end_time": "2024-09-30T23:33:38.327007",
     "exception": false,
     "start_time": "2024-09-30T23:33:38.036430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                                                  </span>┃<span style=\"font-weight: bold\">                                   Config </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                              │                      Vocab size: <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                                                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                  Config\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                              │                      Vocab size: \u001b[38;5;34m256,000\u001b[0m │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,507,536,384</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">524,288,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)        │   \u001b[38;5;34m2,507,536,384\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n",
       "│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m524,288,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n",
       "│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,507,536,384</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,507,536,384\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,363,968</span> (5.20 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,363,968\u001b[0m (5.20 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Enable LoRA for the model and set the LoRA rank to 4.\n",
    "gemma_lm.backbone.enable_lora(rank=4)\n",
    "gemma_lm.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a157efe9",
   "metadata": {
    "papermill": {
     "duration": 0.011621,
     "end_time": "2024-09-30T23:33:38.350553",
     "exception": false,
     "start_time": "2024-09-30T23:33:38.338932",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# LoRA Weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cfc9974e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:38.375251Z",
     "iopub.status.busy": "2024-09-30T23:33:38.374874Z",
     "iopub.status.idle": "2024-09-30T23:33:38.575463Z",
     "shell.execute_reply": "2024-09-30T23:33:38.574556Z"
    },
    "papermill": {
     "duration": 0.215849,
     "end_time": "2024-09-30T23:33:38.577803",
     "exception": false,
     "start_time": "2024-09-30T23:33:38.361954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Limit the input sequence length to 512 (to control memory usage).\n",
    "gemma_lm.preprocessor.sequence_length = 512\n",
    "\n",
    "# Define paths\n",
    "model_name = \"gemma_2b_enV2-100\"\n",
    "# model_name = \"gemma_2b_enV2-1k\"\n",
    "\n",
    "LORA_WEIGHTS_PATH = f\"/kaggle/input/lora-updated-chess-llm/{model_name}.lora.h5\"\n",
    "\n",
    "# Load only the lora weights\n",
    "gemma_lm.backbone.load_lora_weights(LORA_WEIGHTS_PATH)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a696d086",
   "metadata": {
    "papermill": {
     "duration": 0.011801,
     "end_time": "2024-09-30T23:33:38.601902",
     "exception": false,
     "start_time": "2024-09-30T23:33:38.590101",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Test Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "89e762fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:38.627035Z",
     "iopub.status.busy": "2024-09-30T23:33:38.626187Z",
     "iopub.status.idle": "2024-09-30T23:33:40.569139Z",
     "shell.execute_reply": "2024-09-30T23:33:40.568232Z"
    },
    "papermill": {
     "duration": 1.957739,
     "end_time": "2024-09-30T23:33:40.571411",
     "exception": false,
     "start_time": "2024-09-30T23:33:38.613672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>white_username</th>\n",
       "      <th>black_username</th>\n",
       "      <th>white_id</th>\n",
       "      <th>black_id</th>\n",
       "      <th>white_rating</th>\n",
       "      <th>black_rating</th>\n",
       "      <th>white_result</th>\n",
       "      <th>black_result</th>\n",
       "      <th>time_class</th>\n",
       "      <th>time_control</th>\n",
       "      <th>rules</th>\n",
       "      <th>rated</th>\n",
       "      <th>fen</th>\n",
       "      <th>pgn</th>\n",
       "      <th>move_seq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>miniman2804</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/miniman2804</td>\n",
       "      <td>1708</td>\n",
       "      <td>1608</td>\n",
       "      <td>win</td>\n",
       "      <td>checkmated</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/259200</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r2r4/p2p1p1p/b6R/n1p1kp2/2P2P2/3BP3/PP5P/4K2R ...</td>\n",
       "      <td>[Event \"Enjoyable games 2 - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(d4, Nf6, c4, e6, Nc3, Bb4, Qb3, Bxc3+, Qxc3, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>koltcho69</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/koltcho69</td>\n",
       "      <td>1726</td>\n",
       "      <td>1577</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>8/5Q1k/4n1pp/8/7P/2N2b2/PP3P2/5K2 b - - 1 33</td>\n",
       "      <td>[Event \"Rapid Rats - Board 5\"]\\n[Site \"Chess.c...</td>\n",
       "      <td>(e4, e5, Nf3, Nc6, Bc4, Bc5, c3, a6, d4, exd4,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>enhmandah</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/enhmandah</td>\n",
       "      <td>1727</td>\n",
       "      <td>842</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>rn1q1b1r/kb2p1pp/2p5/p1Q5/N1BP2n1/4PN2/1P3PPP/...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(d4, d5, e3, c6, c4, dxc4, Bxc4, b5, Bb3, a5, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>enhmandah</td>\n",
       "      <td>-Amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/enhmandah</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>819</td>\n",
       "      <td>1727</td>\n",
       "      <td>checkmated</td>\n",
       "      <td>win</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r3kb1r/pp3ppp/3p1n2/2pKp3/P3P3/1P6/4qP1P/QNB5 ...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(e4, c5, b3, Nc6, a4, d6, Bb5, Bd7, Qf3, Nd4, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>Shalllow-Blue</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/shalllow-blue</td>\n",
       "      <td>1729</td>\n",
       "      <td>1116</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r3b2r/pp6/2pPpR1k/4n3/2P3Q1/3B4/PP4PP/R5K1 b -...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(d4, e6, c4, Qf6, Nf3, d6, Bg5, Qg6, Nc3, c6, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  white_username black_username                                    white_id  \\\n",
       "0         -Amos-    miniman2804     https://api.chess.com/pub/player/-amos-   \n",
       "1         -Amos-      koltcho69     https://api.chess.com/pub/player/-amos-   \n",
       "2         -Amos-      enhmandah     https://api.chess.com/pub/player/-amos-   \n",
       "3      enhmandah         -Amos-  https://api.chess.com/pub/player/enhmandah   \n",
       "4         -Amos-  Shalllow-Blue     https://api.chess.com/pub/player/-amos-   \n",
       "\n",
       "                                         black_id  white_rating  black_rating  \\\n",
       "0    https://api.chess.com/pub/player/miniman2804          1708          1608   \n",
       "1      https://api.chess.com/pub/player/koltcho69          1726          1577   \n",
       "2      https://api.chess.com/pub/player/enhmandah          1727           842   \n",
       "3         https://api.chess.com/pub/player/-amos-           819          1727   \n",
       "4  https://api.chess.com/pub/player/shalllow-blue          1729          1116   \n",
       "\n",
       "  white_result black_result time_class time_control  rules  rated  \\\n",
       "0          win   checkmated      daily     1/259200  chess   True   \n",
       "1          win     resigned      daily     1/172800  chess   True   \n",
       "2          win     resigned      daily     1/172800  chess   True   \n",
       "3   checkmated          win      daily     1/172800  chess   True   \n",
       "4          win     resigned      daily     1/172800  chess   True   \n",
       "\n",
       "                                                 fen  \\\n",
       "0  r2r4/p2p1p1p/b6R/n1p1kp2/2P2P2/3BP3/PP5P/4K2R ...   \n",
       "1       8/5Q1k/4n1pp/8/7P/2N2b2/PP3P2/5K2 b - - 1 33   \n",
       "2  rn1q1b1r/kb2p1pp/2p5/p1Q5/N1BP2n1/4PN2/1P3PPP/...   \n",
       "3  r3kb1r/pp3ppp/3p1n2/2pKp3/P3P3/1P6/4qP1P/QNB5 ...   \n",
       "4  r3b2r/pp6/2pPpR1k/4n3/2P3Q1/3B4/PP4PP/R5K1 b -...   \n",
       "\n",
       "                                                 pgn  \\\n",
       "0  [Event \"Enjoyable games 2 - Round 1\"]\\n[Site \"...   \n",
       "1  [Event \"Rapid Rats - Board 5\"]\\n[Site \"Chess.c...   \n",
       "2  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...   \n",
       "3  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...   \n",
       "4  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...   \n",
       "\n",
       "                                            move_seq  \n",
       "0  (d4, Nf6, c4, e6, Nc3, Bb4, Qb3, Bxc3+, Qxc3, ...  \n",
       "1  (e4, e5, Nf3, Nc6, Bc4, Bc5, c3, a6, d4, exd4,...  \n",
       "2  (d4, d5, e3, c6, c4, dxc4, Bxc4, b5, Bb3, a5, ...  \n",
       "3  (e4, c5, b3, Nc6, a4, d6, Bb5, Bd7, Qf3, Nd4, ...  \n",
       "4  (d4, e6, c4, Qf6, Nf3, d6, Bg5, Qg6, Nc3, c6, ...  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df0 = pd.read_pickle('/kaggle/input/60k-chess-clean/club_games_data.pkl')\n",
    "\n",
    "df0.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2a51fefc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:40.597556Z",
     "iopub.status.busy": "2024-09-30T23:33:40.596948Z",
     "iopub.status.idle": "2024-09-30T23:33:40.703287Z",
     "shell.execute_reply": "2024-09-30T23:33:40.702335Z"
    },
    "papermill": {
     "duration": 0.121903,
     "end_time": "2024-09-30T23:33:40.705559",
     "exception": false,
     "start_time": "2024-09-30T23:33:40.583656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 66879 entries, 0 to 66878\n",
      "Data columns (total 15 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   white_username  66879 non-null  object\n",
      " 1   black_username  66879 non-null  object\n",
      " 2   white_id        66879 non-null  object\n",
      " 3   black_id        66879 non-null  object\n",
      " 4   white_rating    66879 non-null  int64 \n",
      " 5   black_rating    66879 non-null  int64 \n",
      " 6   white_result    66879 non-null  object\n",
      " 7   black_result    66879 non-null  object\n",
      " 8   time_class      66879 non-null  object\n",
      " 9   time_control    66879 non-null  object\n",
      " 10  rules           66879 non-null  object\n",
      " 11  rated           66879 non-null  bool  \n",
      " 12  fen             66879 non-null  object\n",
      " 13  pgn             66879 non-null  object\n",
      " 14  move_seq        65270 non-null  object\n",
      "dtypes: bool(1), int64(2), object(12)\n",
      "memory usage: 7.2+ MB\n"
     ]
    }
   ],
   "source": [
    "df0.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2c862554",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:40.732125Z",
     "iopub.status.busy": "2024-09-30T23:33:40.731244Z",
     "iopub.status.idle": "2024-09-30T23:33:40.863698Z",
     "shell.execute_reply": "2024-09-30T23:33:40.862653Z"
    },
    "papermill": {
     "duration": 0.148211,
     "end_time": "2024-09-30T23:33:40.866124",
     "exception": false,
     "start_time": "2024-09-30T23:33:40.717913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df0[df0['rules']=='chess'].dropna() # Classic chess only, and drop None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6d1ba50e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:40.892191Z",
     "iopub.status.busy": "2024-09-30T23:33:40.891808Z",
     "iopub.status.idle": "2024-09-30T23:33:40.981798Z",
     "shell.execute_reply": "2024-09-30T23:33:40.980653Z"
    },
    "papermill": {
     "duration": 0.105619,
     "end_time": "2024-09-30T23:33:40.983937",
     "exception": false,
     "start_time": "2024-09-30T23:33:40.878318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 65034 entries, 0 to 66878\n",
      "Data columns (total 15 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   white_username  65034 non-null  object\n",
      " 1   black_username  65034 non-null  object\n",
      " 2   white_id        65034 non-null  object\n",
      " 3   black_id        65034 non-null  object\n",
      " 4   white_rating    65034 non-null  int64 \n",
      " 5   black_rating    65034 non-null  int64 \n",
      " 6   white_result    65034 non-null  object\n",
      " 7   black_result    65034 non-null  object\n",
      " 8   time_class      65034 non-null  object\n",
      " 9   time_control    65034 non-null  object\n",
      " 10  rules           65034 non-null  object\n",
      " 11  rated           65034 non-null  bool  \n",
      " 12  fen             65034 non-null  object\n",
      " 13  pgn             65034 non-null  object\n",
      " 14  move_seq        65034 non-null  object\n",
      "dtypes: bool(1), int64(2), object(12)\n",
      "memory usage: 7.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "89b95d37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:41.012689Z",
     "iopub.status.busy": "2024-09-30T23:33:41.012311Z",
     "iopub.status.idle": "2024-09-30T23:33:41.936922Z",
     "shell.execute_reply": "2024-09-30T23:33:41.936008Z"
    },
    "papermill": {
     "duration": 0.941807,
     "end_time": "2024-09-30T23:33:41.939256",
     "exception": false,
     "start_time": "2024-09-30T23:33:40.997449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "tune_size = 1_00 # Number of pgn samples to use in tuning\n",
    "min_elo = 1_000 # I want the model to tune on the better half of players\n",
    "\n",
    "\n",
    "df_low_elo = df[df['white_rating']<min_elo]\n",
    "\n",
    "df = df[df['white_rating']>=min_elo]\n",
    "\n",
    "\n",
    "X = df.drop('white_rating', axis=1)\n",
    "y = df['white_rating']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=tune_size, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3bcc838b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:41.966374Z",
     "iopub.status.busy": "2024-09-30T23:33:41.965727Z",
     "iopub.status.idle": "2024-09-30T23:33:41.971145Z",
     "shell.execute_reply": "2024-09-30T23:33:41.970218Z"
    },
    "papermill": {
     "duration": 0.02154,
     "end_time": "2024-09-30T23:33:41.973509",
     "exception": false,
     "start_time": "2024-09-30T23:33:41.951969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 47858\n"
     ]
    }
   ],
   "source": [
    "print(len(X_train),len(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9a4dd054",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.000072Z",
     "iopub.status.busy": "2024-09-30T23:33:41.999138Z",
     "iopub.status.idle": "2024-09-30T23:33:42.003657Z",
     "shell.execute_reply": "2024-09-30T23:33:42.002790Z"
    },
    "papermill": {
     "duration": 0.019631,
     "end_time": "2024-09-30T23:33:42.005568",
     "exception": false,
     "start_time": "2024-09-30T23:33:41.985937",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17076\n"
     ]
    }
   ],
   "source": [
    "print(len(df_low_elo))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ee75846",
   "metadata": {
    "papermill": {
     "duration": 0.012166,
     "end_time": "2024-09-30T23:33:42.029751",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.017585",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will use the test set as the high elo test, and then the filtered lower elo as another test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7cbd5968",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.055496Z",
     "iopub.status.busy": "2024-09-30T23:33:42.055124Z",
     "iopub.status.idle": "2024-09-30T23:33:42.064440Z",
     "shell.execute_reply": "2024-09-30T23:33:42.063539Z"
    },
    "papermill": {
     "duration": 0.024611,
     "end_time": "2024-09-30T23:33:42.066341",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.041730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3      (e4, c5, b3, Nc6, a4, d6, Bb5, Bd7, Qf3, Nd4, ...\n",
      "223    (e4, d5, e5, d4, c3, f6, cxd4, Qxd4, Nf3, Qe4+...\n",
      "Name: move_seq, dtype: object\n",
      "{('e4', 'c5', 'b3'), ('e4', 'd5'), ('e4',), ('e4', 'd5', 'e5'), ('e4', 'c5')}\n"
     ]
    }
   ],
   "source": [
    "def seq_set(seq_data, n):\n",
    "    # List of all UNIQUE sequences of length < n in a given dataset of moves\n",
    "    sequences = set()\n",
    "    \n",
    "    for seq in seq_data:\n",
    "        max_n = n if len(seq) >= n else len(seq)\n",
    "        sequences.update(seq[:t] for t in range(1,max_n+1))\n",
    "\n",
    "    return sequences\n",
    "        \n",
    "# Trained on n=6, max seq of 5 and asked to predict 6th\n",
    "print(df_low_elo['move_seq'][:2])\n",
    "print(seq_set(df_low_elo['move_seq'][:2], 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7796c06e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.092179Z",
     "iopub.status.busy": "2024-09-30T23:33:42.091816Z",
     "iopub.status.idle": "2024-09-30T23:33:42.153800Z",
     "shell.execute_reply": "2024-09-30T23:33:42.152875Z"
    },
    "papermill": {
     "duration": 0.07724,
     "end_time": "2024-09-30T23:33:42.155825",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.078585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21407"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "low_elo_seq = seq_set(df_low_elo['move_seq'], 6)\n",
    "len(low_elo_seq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bbd52f41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.183174Z",
     "iopub.status.busy": "2024-09-30T23:33:42.182308Z",
     "iopub.status.idle": "2024-09-30T23:33:42.345776Z",
     "shell.execute_reply": "2024-09-30T23:33:42.344829Z"
    },
    "papermill": {
     "duration": 0.17911,
     "end_time": "2024-09-30T23:33:42.347835",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.168725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "31953"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "high_elo_seq = seq_set(X_test['move_seq'], 6)\n",
    "len(high_elo_seq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8df58d1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.374572Z",
     "iopub.status.busy": "2024-09-30T23:33:42.374231Z",
     "iopub.status.idle": "2024-09-30T23:33:42.384676Z",
     "shell.execute_reply": "2024-09-30T23:33:42.383834Z"
    },
    "papermill": {
     "duration": 0.025862,
     "end_time": "2024-09-30T23:33:42.386643",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.360781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8146"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "intersect = low_elo_seq & high_elo_seq\n",
    "\n",
    "len(intersect)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "502b880e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.413797Z",
     "iopub.status.busy": "2024-09-30T23:33:42.413018Z",
     "iopub.status.idle": "2024-09-30T23:33:42.423348Z",
     "shell.execute_reply": "2024-09-30T23:33:42.422487Z"
    },
    "papermill": {
     "duration": 0.025883,
     "end_time": "2024-09-30T23:33:42.425181",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.399298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13261"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "low_set = low_elo_seq - high_elo_seq\n",
    "len(low_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ebf2c6ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.451825Z",
     "iopub.status.busy": "2024-09-30T23:33:42.451346Z",
     "iopub.status.idle": "2024-09-30T23:33:42.463637Z",
     "shell.execute_reply": "2024-09-30T23:33:42.462803Z"
    },
    "papermill": {
     "duration": 0.027747,
     "end_time": "2024-09-30T23:33:42.465528",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.437781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23807"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "high_set = high_elo_seq - low_elo_seq\n",
    "len(high_set)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c766c01",
   "metadata": {
    "papermill": {
     "duration": 0.012581,
     "end_time": "2024-09-30T23:33:42.490719",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.478138",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Metrics Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "785e736c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.517962Z",
     "iopub.status.busy": "2024-09-30T23:33:42.517147Z",
     "iopub.status.idle": "2024-09-30T23:33:42.522512Z",
     "shell.execute_reply": "2024-09-30T23:33:42.521773Z"
    },
    "papermill": {
     "duration": 0.020984,
     "end_time": "2024-09-30T23:33:42.524390",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.503406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import time\n",
    "\n",
    "def time_wrapper(func):\n",
    "    def wrapper(*args, **kwargs):\n",
    "        start_time = time.time()  # Record the start time\n",
    "        result = func(*args, **kwargs)  # Call the original function\n",
    "        end_time = time.time()  # Record the end time\n",
    "        print(f\"Execution time: {end_time - start_time:.4f} seconds\")\n",
    "        return result\n",
    "    return wrapper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3631d940",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.551054Z",
     "iopub.status.busy": "2024-09-30T23:33:42.550766Z",
     "iopub.status.idle": "2024-09-30T23:33:42.556070Z",
     "shell.execute_reply": "2024-09-30T23:33:42.555346Z"
    },
    "papermill": {
     "duration": 0.020646,
     "end_time": "2024-09-30T23:33:42.557846",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.537200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def apply_format(seq):\n",
    "    prompt = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\".format(\n",
    "            instruction=f\"Predict the next chess move in the sequence {str(list(seq))}\",\n",
    "            response=\"\",\n",
    "        )\n",
    "    return prompt\n",
    "\n",
    "\n",
    "@time_wrapper\n",
    "def batch_prompt(seq_list):\n",
    "    batch_prompts = list(map(apply_format, seq_list))\n",
    "    \n",
    "    output = gemma_lm.generate(batch_prompts, max_length=64)\n",
    "    #print(output)\n",
    "    #seq.append(output.split(' ')[-1].strip(\"'\"))\n",
    "    #print(output)\n",
    "    return output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b6825ee6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.584702Z",
     "iopub.status.busy": "2024-09-30T23:33:42.584376Z",
     "iopub.status.idle": "2024-09-30T23:33:42.589844Z",
     "shell.execute_reply": "2024-09-30T23:33:42.588994Z"
    },
    "papermill": {
     "duration": 0.021113,
     "end_time": "2024-09-30T23:33:42.591910",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.570797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n",
      "[4, 5, 6, 7, 8]\n"
     ]
    }
   ],
   "source": [
    "def remove_and_return(lst, n):\n",
    "    result = lst[:n]\n",
    "    del lst[:n]\n",
    "    \n",
    "    return result\n",
    "\n",
    "my_list = [1, 2, 3, 4, 5, 6, 7, 8]\n",
    "print(remove_and_return(my_list, 3))  # Output: [1, 2, 3]\n",
    "print(my_list)  # Output: [4, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "25b81b07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.618750Z",
     "iopub.status.busy": "2024-09-30T23:33:42.618425Z",
     "iopub.status.idle": "2024-09-30T23:33:42.623379Z",
     "shell.execute_reply": "2024-09-30T23:33:42.622587Z"
    },
    "papermill": {
     "duration": 0.020388,
     "end_time": "2024-09-30T23:33:42.625167",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.604779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def segment_all(seq_list, batch_size):\n",
    "    data = seq_list.copy()\n",
    "    final_output = []\n",
    "    while len(data) > 0:\n",
    "        batch = remove_and_return(data, batch_size)\n",
    "        final_output.append(batch)\n",
    "    return final_output\n",
    "        \n",
    "        \n",
    "# test = segment_all(list(intersect)[:1000], 300)\n",
    "\n",
    "# print(len(test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c4ef2796",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.652408Z",
     "iopub.status.busy": "2024-09-30T23:33:42.651517Z",
     "iopub.status.idle": "2024-09-30T23:33:42.656657Z",
     "shell.execute_reply": "2024-09-30T23:33:42.655846Z"
    },
    "papermill": {
     "duration": 0.020615,
     "end_time": "2024-09-30T23:33:42.658590",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.637975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def run_all(seq_set, n):\n",
    "    all_res = []\n",
    "    segments = segment_all(list(seq_set), n)\n",
    "    for sample in segments:\n",
    "        res = batch_prompt(sample)\n",
    "        all_res.append((sample,  res))\n",
    "    return all_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "65f254c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:33:42.685685Z",
     "iopub.status.busy": "2024-09-30T23:33:42.685377Z",
     "iopub.status.idle": "2024-09-30T23:41:21.267940Z",
     "shell.execute_reply": "2024-09-30T23:41:21.266748Z"
    },
    "papermill": {
     "duration": 458.598285,
     "end_time": "2024-09-30T23:41:21.270145",
     "exception": false,
     "start_time": "2024-09-30T23:33:42.671860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 43.2873 seconds\n",
      "Execution time: 15.4922 seconds\n",
      "Execution time: 15.7116 seconds\n",
      "Execution time: 14.8280 seconds\n",
      "Execution time: 14.6126 seconds\n",
      "Execution time: 15.7139 seconds\n",
      "Execution time: 15.7143 seconds\n",
      "Execution time: 15.4933 seconds\n",
      "Execution time: 17.7016 seconds\n",
      "Execution time: 15.4919 seconds\n",
      "Execution time: 15.9330 seconds\n",
      "Execution time: 15.7129 seconds\n",
      "Execution time: 15.0515 seconds\n",
      "Execution time: 15.7143 seconds\n",
      "Execution time: 15.7156 seconds\n",
      "Execution time: 14.6086 seconds\n",
      "Execution time: 14.8289 seconds\n",
      "Execution time: 15.7132 seconds\n",
      "Execution time: 15.4918 seconds\n",
      "Execution time: 14.6075 seconds\n",
      "Execution time: 15.0503 seconds\n",
      "Execution time: 15.7133 seconds\n",
      "Execution time: 14.6068 seconds\n",
      "Execution time: 14.8280 seconds\n",
      "Execution time: 15.4923 seconds\n",
      "Execution time: 15.9337 seconds\n",
      "Execution time: 14.8309 seconds\n",
      "Execution time: 14.6947 seconds\n",
      "28\n"
     ]
    }
   ],
   "source": [
    "inter_res = run_all(intersect, 300)\n",
    "\n",
    "print(len(inter_res))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "44080e6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:41:21.303008Z",
     "iopub.status.busy": "2024-09-30T23:41:21.302218Z",
     "iopub.status.idle": "2024-09-30T23:41:21.307268Z",
     "shell.execute_reply": "2024-09-30T23:41:21.306402Z"
    },
    "papermill": {
     "duration": 0.024,
     "end_time": "2024-09-30T23:41:21.309567",
     "exception": false,
     "start_time": "2024-09-30T23:41:21.285567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('d4', 'd5', 'Nf3', 'b6')\n",
      "Instruction:\n",
      "Predict the next chess move in the sequence ['d4', 'd5', 'Nf3', 'b6']\n",
      "\n",
      "Response:\n",
      "The next move is 'c4'\n"
     ]
    }
   ],
   "source": [
    "n_sample = 22\n",
    "print(inter_res[0][0][n_sample])\n",
    "print(inter_res[0][1][n_sample])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "128c9d6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-30T23:41:21.341501Z",
     "iopub.status.busy": "2024-09-30T23:41:21.340956Z",
     "iopub.status.idle": "2024-10-01T00:00:24.187689Z",
     "shell.execute_reply": "2024-10-01T00:00:24.186636Z"
    },
    "papermill": {
     "duration": 1142.885674,
     "end_time": "2024-10-01T00:00:24.210522",
     "exception": false,
     "start_time": "2024-09-30T23:41:21.324848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 13.7425 seconds\n",
      "Execution time: 13.7275 seconds\n",
      "Execution time: 14.3864 seconds\n",
      "Execution time: 14.1667 seconds\n",
      "Execution time: 13.9483 seconds\n",
      "Execution time: 14.6106 seconds\n",
      "Execution time: 14.3865 seconds\n",
      "Execution time: 13.7248 seconds\n",
      "Execution time: 13.7260 seconds\n",
      "Execution time: 13.7240 seconds\n",
      "Execution time: 14.8290 seconds\n",
      "Execution time: 13.7239 seconds\n",
      "Execution time: 15.0494 seconds\n",
      "Execution time: 14.6071 seconds\n",
      "Execution time: 14.6102 seconds\n",
      "Execution time: 13.7257 seconds\n",
      "Execution time: 13.7286 seconds\n",
      "Execution time: 14.1662 seconds\n",
      "Execution time: 13.7262 seconds\n",
      "Execution time: 13.9500 seconds\n",
      "Execution time: 13.7253 seconds\n",
      "Execution time: 13.9439 seconds\n",
      "Execution time: 14.8290 seconds\n",
      "Execution time: 15.4918 seconds\n",
      "Execution time: 13.7243 seconds\n",
      "Execution time: 13.7241 seconds\n",
      "Execution time: 15.0496 seconds\n",
      "Execution time: 15.2699 seconds\n",
      "Execution time: 14.8268 seconds\n",
      "Execution time: 14.8270 seconds\n",
      "Execution time: 14.6082 seconds\n",
      "Execution time: 14.3865 seconds\n",
      "Execution time: 13.9444 seconds\n",
      "Execution time: 14.3871 seconds\n",
      "Execution time: 13.7243 seconds\n",
      "Execution time: 13.7235 seconds\n",
      "Execution time: 14.6078 seconds\n",
      "Execution time: 14.1659 seconds\n",
      "Execution time: 13.9453 seconds\n",
      "Execution time: 13.9452 seconds\n",
      "Execution time: 13.9457 seconds\n",
      "Execution time: 13.7251 seconds\n",
      "Execution time: 13.9452 seconds\n",
      "Execution time: 14.6082 seconds\n",
      "Execution time: 13.7254 seconds\n",
      "Execution time: 13.5026 seconds\n",
      "Execution time: 13.9464 seconds\n",
      "Execution time: 14.6075 seconds\n",
      "Execution time: 13.7230 seconds\n",
      "Execution time: 13.9456 seconds\n",
      "Execution time: 15.0515 seconds\n",
      "Execution time: 13.7245 seconds\n",
      "Execution time: 14.6087 seconds\n",
      "Execution time: 13.9446 seconds\n",
      "Execution time: 13.7236 seconds\n",
      "Execution time: 14.8310 seconds\n",
      "Execution time: 13.9435 seconds\n",
      "Execution time: 14.3899 seconds\n",
      "Execution time: 14.6133 seconds\n",
      "Execution time: 14.8286 seconds\n",
      "Execution time: 13.9467 seconds\n",
      "Execution time: 13.5026 seconds\n",
      "Execution time: 14.6075 seconds\n",
      "Execution time: 14.8316 seconds\n",
      "Execution time: 15.0501 seconds\n",
      "Execution time: 13.7291 seconds\n",
      "Execution time: 14.1752 seconds\n",
      "Execution time: 13.7250 seconds\n",
      "Execution time: 13.7262 seconds\n",
      "Execution time: 13.7279 seconds\n",
      "Execution time: 14.6093 seconds\n",
      "Execution time: 14.1710 seconds\n",
      "Execution time: 13.7286 seconds\n",
      "Execution time: 14.8315 seconds\n",
      "Execution time: 13.9453 seconds\n",
      "Execution time: 14.6091 seconds\n",
      "Execution time: 14.8275 seconds\n",
      "Execution time: 14.1663 seconds\n",
      "Execution time: 13.9461 seconds\n",
      "Execution time: 20.5311 seconds\n"
     ]
    }
   ],
   "source": [
    "high_res = run_all(high_set, 300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "704a1a2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-01T00:00:24.255532Z",
     "iopub.status.busy": "2024-10-01T00:00:24.254583Z",
     "iopub.status.idle": "2024-10-01T00:11:15.601502Z",
     "shell.execute_reply": "2024-10-01T00:11:15.600430Z"
    },
    "papermill": {
     "duration": 651.395418,
     "end_time": "2024-10-01T00:11:15.627606",
     "exception": false,
     "start_time": "2024-10-01T00:00:24.232188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 13.9604 seconds\n",
      "Execution time: 13.5028 seconds\n",
      "Execution time: 14.8288 seconds\n",
      "Execution time: 14.6098 seconds\n",
      "Execution time: 15.0499 seconds\n",
      "Execution time: 13.7231 seconds\n",
      "Execution time: 14.8296 seconds\n",
      "Execution time: 14.1679 seconds\n",
      "Execution time: 13.7270 seconds\n",
      "Execution time: 14.8290 seconds\n",
      "Execution time: 14.6108 seconds\n",
      "Execution time: 14.3912 seconds\n",
      "Execution time: 14.8316 seconds\n",
      "Execution time: 13.9458 seconds\n",
      "Execution time: 13.7266 seconds\n",
      "Execution time: 14.8295 seconds\n",
      "Execution time: 13.7237 seconds\n",
      "Execution time: 13.9456 seconds\n",
      "Execution time: 14.6103 seconds\n",
      "Execution time: 14.6089 seconds\n",
      "Execution time: 16.3756 seconds\n",
      "Execution time: 14.6107 seconds\n",
      "Execution time: 14.6100 seconds\n",
      "Execution time: 14.8288 seconds\n",
      "Execution time: 13.7259 seconds\n",
      "Execution time: 14.6072 seconds\n",
      "Execution time: 14.8306 seconds\n",
      "Execution time: 14.6107 seconds\n",
      "Execution time: 13.9491 seconds\n",
      "Execution time: 13.7266 seconds\n",
      "Execution time: 13.7297 seconds\n",
      "Execution time: 14.8294 seconds\n",
      "Execution time: 13.7254 seconds\n",
      "Execution time: 15.0529 seconds\n",
      "Execution time: 13.7253 seconds\n",
      "Execution time: 14.6094 seconds\n",
      "Execution time: 14.1695 seconds\n",
      "Execution time: 14.6105 seconds\n",
      "Execution time: 14.8317 seconds\n",
      "Execution time: 14.6081 seconds\n",
      "Execution time: 15.0502 seconds\n",
      "Execution time: 14.6108 seconds\n",
      "Execution time: 14.6109 seconds\n",
      "Execution time: 14.6138 seconds\n",
      "Execution time: 16.2305 seconds\n"
     ]
    }
   ],
   "source": [
    "low_res = run_all(low_set, 300)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae21f2fd",
   "metadata": {
    "papermill": {
     "duration": 0.024447,
     "end_time": "2024-10-01T00:11:15.676605",
     "exception": false,
     "start_time": "2024-10-01T00:11:15.652158",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Save Results\n",
    "\n",
    "Save the output for each given sequence of the type high, low, inter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "eb3be473",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-01T00:11:15.728169Z",
     "iopub.status.busy": "2024-10-01T00:11:15.727250Z",
     "iopub.status.idle": "2024-10-01T00:11:15.732747Z",
     "shell.execute_reply": "2024-10-01T00:11:15.731740Z"
    },
    "papermill": {
     "duration": 0.033335,
     "end_time": "2024-10-01T00:11:15.734712",
     "exception": false,
     "start_time": "2024-10-01T00:11:15.701377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def to_df(data, name):\n",
    "    sample_df = pd.DataFrame(data)\n",
    "    sample_df[\"elo\"] = name\n",
    "    sample_df.columns = ['seq', 'res', 'elo']\n",
    "    return sample_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9dc48f99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-01T00:11:15.786889Z",
     "iopub.status.busy": "2024-10-01T00:11:15.785881Z",
     "iopub.status.idle": "2024-10-01T00:11:15.794250Z",
     "shell.execute_reply": "2024-10-01T00:11:15.793314Z"
    },
    "papermill": {
     "duration": 0.036563,
     "end_time": "2024-10-01T00:11:15.796344",
     "exception": false,
     "start_time": "2024-10-01T00:11:15.759781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "inter_df = to_df(inter_res,'inter')\n",
    "high_df = to_df(high_res,'high')\n",
    "low_df = to_df(low_res,'low')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "93f4e11b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-01T00:11:15.854999Z",
     "iopub.status.busy": "2024-10-01T00:11:15.854240Z",
     "iopub.status.idle": "2024-10-01T00:11:15.864168Z",
     "shell.execute_reply": "2024-10-01T00:11:15.862974Z"
    },
    "papermill": {
     "duration": 0.045611,
     "end_time": "2024-10-01T00:11:15.867070",
     "exception": false,
     "start_time": "2024-10-01T00:11:15.821459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "final_df = pd.concat([inter_df, high_df, low_df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "79eb7e97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-01T00:11:15.929883Z",
     "iopub.status.busy": "2024-10-01T00:11:15.928796Z",
     "iopub.status.idle": "2024-10-01T00:11:15.982827Z",
     "shell.execute_reply": "2024-10-01T00:11:15.981515Z"
    },
    "papermill": {
     "duration": 0.084734,
     "end_time": "2024-10-01T00:11:15.985508",
     "exception": false,
     "start_time": "2024-10-01T00:11:15.900774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100\n",
      "gemma_2b_enV2-100\n"
     ]
    }
   ],
   "source": [
    "print(tune_size)\n",
    "print(model_name)\n",
    "\n",
    "file_name = f'lora_infer_{tune_size}.pkl'\n",
    "final_df.to_pickle(f'/kaggle/working/{file_name}')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5790268,
     "sourceId": 9512215,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5791295,
     "sourceId": 9513539,
     "sourceType": "datasetVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 3533,
     "modelInstanceId": 5171,
     "sourceId": 11371,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30776,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2356.797691,
   "end_time": "2024-10-01T00:11:19.142094",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-30T23:32:02.344403",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
