{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6db19cd0",
   "metadata": {
    "papermill": {
     "duration": 0.009976,
     "end_time": "2024-09-28T02:13:42.680774",
     "exception": false,
     "start_time": "2024-09-28T02:13:42.670798",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Intro\n",
    "\n",
    "This notebook will be testing how well an LLM can play chess, by predicting the next best move in a given chess sequence."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c343d34b",
   "metadata": {
    "papermill": {
     "duration": 0.008748,
     "end_time": "2024-09-28T02:13:42.698665",
     "exception": false,
     "start_time": "2024-09-28T02:13:42.689917",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Base Chess Knowledge\n",
    "\n",
    "Let's first examine how a base model generates a response about chess content."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1afbc57c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:13:42.717898Z",
     "iopub.status.busy": "2024-09-28T02:13:42.717519Z",
     "iopub.status.idle": "2024-09-28T02:14:08.435590Z",
     "shell.execute_reply": "2024-09-28T02:14:08.434340Z"
    },
    "papermill": {
     "duration": 25.730447,
     "end_time": "2024-09-28T02:14:08.437998",
     "exception": false,
     "start_time": "2024-09-28T02:13:42.707551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Install Keras\n",
    "!pip install -q -U keras-nlp\n",
    "!pip install -q -U keras>=3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7ea28ba3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:14:08.458792Z",
     "iopub.status.busy": "2024-09-28T02:14:08.458448Z",
     "iopub.status.idle": "2024-09-28T02:14:08.463329Z",
     "shell.execute_reply": "2024-09-28T02:14:08.462524Z"
    },
    "papermill": {
     "duration": 0.017075,
     "end_time": "2024-09-28T02:14:08.465339",
     "exception": false,
     "start_time": "2024-09-28T02:14:08.448264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "os.environ[\"KERAS_BACKEND\"] = \"jax\"  # Or \"torch\" or \"tensorflow\".\n",
    "# Avoid memory fragmentation on JAX backend.\n",
    "os.environ[\"XLA_PYTHON_CLIENT_MEM_FRACTION\"]=\"1.00\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1d3d43b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:14:08.484536Z",
     "iopub.status.busy": "2024-09-28T02:14:08.484223Z",
     "iopub.status.idle": "2024-09-28T02:15:20.166723Z",
     "shell.execute_reply": "2024-09-28T02:15:20.165823Z"
    },
    "papermill": {
     "duration": 71.694377,
     "end_time": "2024-09-28T02:15:20.168842",
     "exception": false,
     "start_time": "2024-09-28T02:14:08.474465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "normalizer.cc(51) LOG(INFO) precompiled_charsmap is empty. use identity normalization.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                                                  </span>┃<span style=\"font-weight: bold\">                                   Config </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                              │                      Vocab size: <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                                                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                  Config\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                              │                      Vocab size: \u001b[38;5;34m256,000\u001b[0m │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">524,288,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)        │   \u001b[38;5;34m2,506,172,416\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n",
       "│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m524,288,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n",
       "│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import keras\n",
    "import keras_nlp\n",
    "\n",
    "# Load the model\n",
    "gemma_lm = keras_nlp.models.GemmaCausalLM.from_preset(\"gemma_2b_en\")\n",
    "gemma_lm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e287aad6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:15:20.191054Z",
     "iopub.status.busy": "2024-09-28T02:15:20.190549Z",
     "iopub.status.idle": "2024-09-28T02:15:34.755893Z",
     "shell.execute_reply": "2024-09-28T02:15:34.754930Z"
    },
    "papermill": {
     "duration": 14.578712,
     "end_time": "2024-09-28T02:15:34.758019",
     "exception": false,
     "start_time": "2024-09-28T02:15:20.179307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "List some chess moves in PGN format:\n",
      "\n",
      "Response:\n",
      "1.e4 e5 2.Nf3 Nc6 3.d4 Nf6 4.Nc3 Bc5 5.Be3 d6 6.O-O Be7 7.c3 O-O 8.d5 c6 9.Nf4 d5 10.cxd5 exd5 11.Nxd5 Nxd5 12.Bxd5 Qxd5 13.Qxd5 Qxd5 14.Qxd5 Qxd5 15.Qxd5 Qxd5 16.Qxd5 Qxd5 17.Qxd5 Qxd5 18.Qxd5 Qxd5 19.Qxd5 Qxd5 20.Qxd5 Qxd5 21.Qxd5 Qxd5 22.Qxd5 Qxd5 23.Qxd5 Qxd5 24.Qxd5 Qxd5 25.Qxd5 Qxd5 26.Qxd5 Qxd5 27.\n"
     ]
    }
   ],
   "source": [
    "# Test some example prompts\n",
    "template = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n",
    "\n",
    "prompt = template.format(\n",
    "    instruction=\"List some chess moves in PGN format:\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "81dfa548",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:15:34.780330Z",
     "iopub.status.busy": "2024-09-28T02:15:34.779663Z",
     "iopub.status.idle": "2024-09-28T02:15:39.920264Z",
     "shell.execute_reply": "2024-09-28T02:15:39.919347Z"
    },
    "papermill": {
     "duration": 5.154047,
     "end_time": "2024-09-28T02:15:39.922509",
     "exception": false,
     "start_time": "2024-09-28T02:15:34.768462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Explain this chess sequence: 1. e4 e5 2. Nf3 c6 3. Nc3 d6 4. d4 exd4 5. Qxd4 Nf6 6. Bg5 Nbd7\n",
      "\n",
      "Response:\n",
      "The sequence is a typical Queen's Gambit Declined. The idea is to play the Queen's Gambit, but to play the Queen's Gambit Declined. The idea is to play the Queen's Gambit, but to play the Queen's Gambit Declined. The idea is to play the Queen's Gambit, but to play the Queen's Gambit Declined. The idea is to play the Queen's Gambit, but to play the Queen's Gambit Declined. The idea is to play the Queen's Gambit, but to play the Queen's Gambit Declined. The idea is to play the Queen's Gambit, but to play the Queen's Gambit Declined. The idea is to play the Queen's Gambit, but to play the Queen's Gambit Declined. The idea is to play the Queen's Gambit, but to play the Queen's Gambit Declined. The idea is to play the Queen\n"
     ]
    }
   ],
   "source": [
    "# Test some example prompts\n",
    "template = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n",
    "\n",
    "prompt = template.format(\n",
    "    instruction=\"Explain this chess sequence: 1. e4 e5 2. Nf3 c6 3. Nc3 d6 4. d4 exd4 5. Qxd4 Nf6 6. Bg5 Nbd7\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4275aeb8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:15:39.945331Z",
     "iopub.status.busy": "2024-09-28T02:15:39.944967Z",
     "iopub.status.idle": "2024-09-28T02:15:45.647626Z",
     "shell.execute_reply": "2024-09-28T02:15:45.646602Z"
    },
    "papermill": {
     "duration": 5.716728,
     "end_time": "2024-09-28T02:15:45.650130",
     "exception": false,
     "start_time": "2024-09-28T02:15:39.933402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "What is the next chess move in the PGN: 1.e4 e5 2.Nf3 c6 3.Nc3 d6\n",
      "\n",
      "Response:\n",
      "The next move is 3...d5.\n",
      "\n",
      "Explanation:\n",
      "The PGN: 1.e4 e5 2.Nf3 c6 3.Nc3 d6 is a chess game between two players. The first player, White, plays the move 1.e4, which is the move of the knight on the square e4. The second player, Black, plays the move 2.Nf3, which is the move of the knight on the square f3. The third player, White, plays the move 3.Nc3, which is the move of the knight on the square c3. The fourth player, Black, plays the move 3...d6, which is the move of the knight on the square d6. The fifth player, White, plays the move 4.Nd5, which is the move of the knight on the square e5. The sixth player, Black, plays the move 5.Nf3, which is the move of the knight on the square f3. The\n"
     ]
    }
   ],
   "source": [
    "# Test some example prompts\n",
    "template = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n",
    "\n",
    "prompt = template.format(\n",
    "    instruction=\"What is the next chess move in the PGN: 1.e4 e5 2.Nf3 c6 3.Nc3 d6\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d2e385f",
   "metadata": {
    "papermill": {
     "duration": 0.010653,
     "end_time": "2024-09-28T02:15:45.671557",
     "exception": false,
     "start_time": "2024-09-28T02:15:45.660904",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. Dataset\n",
    "\n",
    "Here we load the dataset that will be used to fine tune the model to predict best chess moves."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bae021c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:15:45.693960Z",
     "iopub.status.busy": "2024-09-28T02:15:45.693610Z",
     "iopub.status.idle": "2024-09-28T02:15:57.336705Z",
     "shell.execute_reply": "2024-09-28T02:15:57.335672Z"
    },
    "papermill": {
     "duration": 11.657043,
     "end_time": "2024-09-28T02:15:57.339168",
     "exception": false,
     "start_time": "2024-09-28T02:15:45.682125",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n",
      "  pid, fd = os.forkpty()\n"
     ]
    }
   ],
   "source": [
    "# Chess module\n",
    "!pip install -q chess"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3d7a3483",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:15:57.362247Z",
     "iopub.status.busy": "2024-09-28T02:15:57.361891Z",
     "iopub.status.idle": "2024-09-28T02:16:00.670052Z",
     "shell.execute_reply": "2024-09-28T02:16:00.669115Z"
    },
    "papermill": {
     "duration": 3.322278,
     "end_time": "2024-09-28T02:16:00.672309",
     "exception": false,
     "start_time": "2024-09-28T02:15:57.350031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>white_username</th>\n",
       "      <th>black_username</th>\n",
       "      <th>white_id</th>\n",
       "      <th>black_id</th>\n",
       "      <th>white_rating</th>\n",
       "      <th>black_rating</th>\n",
       "      <th>white_result</th>\n",
       "      <th>black_result</th>\n",
       "      <th>time_class</th>\n",
       "      <th>time_control</th>\n",
       "      <th>rules</th>\n",
       "      <th>rated</th>\n",
       "      <th>fen</th>\n",
       "      <th>pgn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>miniman2804</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/miniman2804</td>\n",
       "      <td>1708</td>\n",
       "      <td>1608</td>\n",
       "      <td>win</td>\n",
       "      <td>checkmated</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/259200</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r2r4/p2p1p1p/b6R/n1p1kp2/2P2P2/3BP3/PP5P/4K2R ...</td>\n",
       "      <td>[Event \"Enjoyable games 2 - Round 1\"]\\n[Site \"...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>koltcho69</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/koltcho69</td>\n",
       "      <td>1726</td>\n",
       "      <td>1577</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>8/5Q1k/4n1pp/8/7P/2N2b2/PP3P2/5K2 b - - 1 33</td>\n",
       "      <td>[Event \"Rapid Rats - Board 5\"]\\n[Site \"Chess.c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>enhmandah</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/enhmandah</td>\n",
       "      <td>1727</td>\n",
       "      <td>842</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>rn1q1b1r/kb2p1pp/2p5/p1Q5/N1BP2n1/4PN2/1P3PPP/...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>enhmandah</td>\n",
       "      <td>-Amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/enhmandah</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>819</td>\n",
       "      <td>1727</td>\n",
       "      <td>checkmated</td>\n",
       "      <td>win</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r3kb1r/pp3ppp/3p1n2/2pKp3/P3P3/1P6/4qP1P/QNB5 ...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>Shalllow-Blue</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/shalllow-blue</td>\n",
       "      <td>1729</td>\n",
       "      <td>1116</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r3b2r/pp6/2pPpR1k/4n3/2P3Q1/3B4/PP4PP/R5K1 b -...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  white_username black_username                                    white_id  \\\n",
       "0         -Amos-    miniman2804     https://api.chess.com/pub/player/-amos-   \n",
       "1         -Amos-      koltcho69     https://api.chess.com/pub/player/-amos-   \n",
       "2         -Amos-      enhmandah     https://api.chess.com/pub/player/-amos-   \n",
       "3      enhmandah         -Amos-  https://api.chess.com/pub/player/enhmandah   \n",
       "4         -Amos-  Shalllow-Blue     https://api.chess.com/pub/player/-amos-   \n",
       "\n",
       "                                         black_id  white_rating  black_rating  \\\n",
       "0    https://api.chess.com/pub/player/miniman2804          1708          1608   \n",
       "1      https://api.chess.com/pub/player/koltcho69          1726          1577   \n",
       "2      https://api.chess.com/pub/player/enhmandah          1727           842   \n",
       "3         https://api.chess.com/pub/player/-amos-           819          1727   \n",
       "4  https://api.chess.com/pub/player/shalllow-blue          1729          1116   \n",
       "\n",
       "  white_result black_result time_class time_control  rules  rated  \\\n",
       "0          win   checkmated      daily     1/259200  chess   True   \n",
       "1          win     resigned      daily     1/172800  chess   True   \n",
       "2          win     resigned      daily     1/172800  chess   True   \n",
       "3   checkmated          win      daily     1/172800  chess   True   \n",
       "4          win     resigned      daily     1/172800  chess   True   \n",
       "\n",
       "                                                 fen  \\\n",
       "0  r2r4/p2p1p1p/b6R/n1p1kp2/2P2P2/3BP3/PP5P/4K2R ...   \n",
       "1       8/5Q1k/4n1pp/8/7P/2N2b2/PP3P2/5K2 b - - 1 33   \n",
       "2  rn1q1b1r/kb2p1pp/2p5/p1Q5/N1BP2n1/4PN2/1P3PPP/...   \n",
       "3  r3kb1r/pp3ppp/3p1n2/2pKp3/P3P3/1P6/4qP1P/QNB5 ...   \n",
       "4  r3b2r/pp6/2pPpR1k/4n3/2P3Q1/3B4/PP4PP/R5K1 b -...   \n",
       "\n",
       "                                                 pgn  \n",
       "0  [Event \"Enjoyable games 2 - Round 1\"]\\n[Site \"...  \n",
       "1  [Event \"Rapid Rats - Board 5\"]\\n[Site \"Chess.c...  \n",
       "2  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...  \n",
       "3  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...  \n",
       "4  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load Dataset and parse PGN to LLM dataset\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "data_path = \"/kaggle/input/chesscom-user-games-60000-games/club_games_data.csv\"\n",
    "\n",
    "df = pd.read_csv(data_path)\n",
    "\n",
    "df.reset_index()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "491db38c",
   "metadata": {
    "papermill": {
     "duration": 0.010777,
     "end_time": "2024-09-28T02:16:00.694603",
     "exception": false,
     "start_time": "2024-09-28T02:16:00.683826",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Parse a given PGN, extract the moves into a list and also add some language context"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "27773f42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:00.718818Z",
     "iopub.status.busy": "2024-09-28T02:16:00.718500Z",
     "iopub.status.idle": "2024-09-28T02:16:00.867290Z",
     "shell.execute_reply": "2024-09-28T02:16:00.866361Z"
    },
    "papermill": {
     "duration": 0.163252,
     "end_time": "2024-09-28T02:16:00.869573",
     "exception": false,
     "start_time": "2024-09-28T02:16:00.706321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PGN:\n",
      "\n",
      "[Event \"Rapid Rats - Board 5\"]\n",
      "[Site \"Chess.com\"]\n",
      "[Date \"2013.01.19\"]\n",
      "[Round \"-\"]\n",
      "[White \"-Amos-\"]\n",
      "[Black \"koltcho69\"]\n",
      "[Result \"1-0\"]\n",
      "[Match \"https://www.chess.com/club/matches/219602\"]\n",
      "[CurrentPosition \"8/5Q1k/4n1pp/8/7P/2N2b2/PP3P2/5K2 b - - 1 33\"]\n",
      "[Timezone \"UTC\"]\n",
      "[ECO \"C53\"]\n",
      "[ECOUrl \"https://www.chess.com/openings/Giuoco-Piano-Game-Main-Line\"]\n",
      "[UTCDate \"2013.01.19\"]\n",
      "[UTCTime \"14:29:25\"]\n",
      "[WhiteElo \"1726\"]\n",
      "[BlackElo \"1577\"]\n",
      "[TimeControl \"1/172800\"]\n",
      "[Termination \"-Amos- won by resignation\"]\n",
      "[StartTime \"14:29:25\"]\n",
      "[EndDate \"2013.02.01\"]\n",
      "[EndTime \"18:22:03\"]\n",
      "[Link \"https://www.chess.com/game/daily/64070770\"]\n",
      "\n",
      "1. e4 e5 2. Nf3 Nc6 3. Bc4 Bc5 4. c3 a6 5. d4 exd4 6. cxd4 Be7 7. Qb3 Na5 8. Qc2 Nxc4 9. Qxc4 d6 10. Nc3 c6 11. O-O h6 12. Re1 Nf6 13. d5 c5 14. e5 dxe5 15. Nxe5 O-O 16. Ng6 Re8 17. Rxe7 Rxe7 18. Nxe7+ Qxe7 19. Bf4 b5 20. d6 Qd7 21. Qxc5 Bb7 22. Qc7 Qxc7 23. dxc7 Nd5 24. Rd1 Nxf4 25. Rd8+ Kh7 26. Rxa8 Bxa8 27. c8=Q Bxg2 28. Qxa6 Bf3 29. Qxb5 Nh3+ 30. Kf1 g6 31. Qd7 Ng5 32. h4 Ne6 33. Qxf7+ 1-0\n",
      "\n",
      "\n",
      "Moves List:\n",
      "\n",
      "['e4', 'e5', 'Nf3', 'Nc6', 'Bc4', 'Bc5', 'c3', 'a6', 'd4', 'exd4', 'cxd4', 'Be7', 'Qb3', 'Na5', 'Qc2', 'Nxc4', 'Qxc4', 'd6', 'Nc3', 'c6', 'O-O', 'h6', 'Re1', 'Nf6', 'd5', 'c5', 'e5', 'dxe5', 'Nxe5', 'O-O', 'Ng6', 'Re8', 'Rxe7', 'Rxe7', 'Nxe7+', 'Qxe7', 'Bf4', 'b5', 'd6', 'Qd7', 'Qxc5', 'Bb7', 'Qc7', 'Qxc7', 'dxc7', 'Nd5', 'Rd1', 'Nxf4', 'Rd8+', 'Kh7', 'Rxa8', 'Bxa8', 'c8=Q', 'Bxg2', 'Qxa6', 'Bf3', 'Qxb5', 'Nh3+', 'Kf1', 'g6', 'Qd7', 'Ng5', 'h4', 'Ne6', 'Qxf7+']\n",
      "\n",
      "Explanation:\n",
      "\n",
      "['Pawn moves to e4', 'Pawn moves to e5', 'Knight moves to f3', 'Knight moves to c6', 'Bishop moves to c4', 'Bishop moves to c5', 'Pawn moves to c3', 'Pawn moves to a6', 'Pawn moves to d4', 'Pawn captures Pawn on d4', 'Pawn captures Pawn on d4', 'Bishop moves to e7', 'Queen moves to b3', 'Knight moves to a5', 'Queen moves to c2', 'Knight captures Bishop on c4', 'Queen captures Knight on c4', 'Pawn moves to d6', 'Knight moves to c3', 'Pawn moves to c6', 'Castles kingside', 'Pawn moves to h6', 'Rook moves to e1', 'Knight moves to f6', 'Pawn moves to d5', 'Pawn moves to c5', 'Pawn moves to e5', 'Pawn captures Pawn on e5', 'Knight captures Pawn on e5', 'Castles kingside', 'Knight moves to g6', 'Rook moves to e8', 'Rook captures Bishop on e7', 'Rook captures Rook on e7', 'Knight captures Rook on e7 with check', 'Queen captures Knight on e7', 'Bishop moves to f4', 'Pawn moves to b5', 'Pawn moves to d6', 'Queen moves to d7', 'Queen captures Pawn on c5', 'Bishop moves to b7', 'Queen moves to c7', 'Queen captures Queen on c7', 'Pawn captures Queen on c7', 'Knight moves to d5', 'Rook moves to d1', 'Knight captures Bishop on f4', 'Rook moves to d8 with check', 'King moves to h7', 'Rook captures Rook on a8', 'Bishop captures Rook on a8', 'Pawn moves to c8 and promotes to a Queen', 'Bishop captures Pawn on g2', 'Queen captures Pawn on a6', 'Bishop moves to f3', 'Queen captures Pawn on b5', 'Knight moves to h3 with check', 'King moves to f1', 'Pawn moves to g6', 'Queen moves to d7', 'Knight moves to g5', 'Pawn moves to h4', 'Knight moves to e6', 'Queen captures Pawn on f7 with check']\n",
      "\n",
      "Outcome:\n",
      "\n",
      "{'termination': '-Amos- won by resignation', 'result': '1-0', 'winner': 'White'}\n"
     ]
    }
   ],
   "source": [
    "# Language Generator\n",
    "import chess\n",
    "import chess.pgn\n",
    "import io\n",
    "\n",
    "def describe_move(board, move):\n",
    "    # Get the move in a human-readable format\n",
    "    piece_moved = board.piece_at(move.from_square)\n",
    "    move_san = board.san(move)\n",
    "\n",
    "    # Piece names\n",
    "    piece_names = {\n",
    "        chess.PAWN: \"Pawn\",\n",
    "        chess.KNIGHT: \"Knight\",\n",
    "        chess.BISHOP: \"Bishop\",\n",
    "        chess.ROOK: \"Rook\",\n",
    "        chess.QUEEN: \"Queen\",\n",
    "        chess.KING: \"King\"\n",
    "    }\n",
    "\n",
    "    # Capture move\n",
    "    if board.is_capture(move):\n",
    "        action = \"captures\"\n",
    "        target_square = move.to_square\n",
    "        captured_piece = board.piece_at(target_square)\n",
    "        if captured_piece:\n",
    "            captured_piece_name = piece_names.get(captured_piece.piece_type, \"piece\")\n",
    "        else:\n",
    "            captured_piece_name = \"a piece\"\n",
    "        description = f\"\"\"{piece_names[piece_moved.piece_type]} {action} {captured_piece_name} on {chess.square_name(move.to_square)}\"\"\"\n",
    "    else:\n",
    "        # Regular move\n",
    "        action = \"moves to\"\n",
    "        description = f\"{piece_names[piece_moved.piece_type]} {action} {chess.square_name(move.to_square)}\"\n",
    "    if move.promotion:\n",
    "        description += f\" and promotes to a {piece_names[move.promotion]}\"\n",
    "\n",
    "    # Special moves\n",
    "    if board.is_castling(move):\n",
    "        if move.to_square == chess.G1 or move.to_square == chess.G8:\n",
    "            description = \"Castles kingside\"\n",
    "        else:\n",
    "            description = \"Castles queenside\"\n",
    "    if board.is_checkmate():\n",
    "        description += \" and checkmates\"\n",
    "    if board.gives_check(move):\n",
    "        description += \" with check\"\n",
    "\n",
    "    return description\n",
    "\n",
    "def parse_pgn_from_string(pgn_string):\n",
    "    # Parse the PGN string using a StringIO object\n",
    "    pgn = io.StringIO(pgn_string)\n",
    "    game = chess.pgn.read_game(pgn)\n",
    "\n",
    "    board = game.board()\n",
    "   \n",
    "    moves = []\n",
    "    moves_descriptions = []\n",
    "    outcome = {}\n",
    "  \n",
    "    for move in game.mainline_moves():\n",
    "        moves.append(board.san(move))\n",
    "        moves_descriptions.append(describe_move(board, move))\n",
    "        board.push(move)  # Make the move on the board\n",
    "        \n",
    "\n",
    "    # Get game termination, result, and winner\n",
    "    termination = game.headers.get(\"Termination\", \"Unknown\")\n",
    "    result = game.headers.get(\"Result\", \"Unknown\")\n",
    "    winner = \"White\" if result == \"1-0\" else \"Black\" if result == \"0-1\" else \"Draw\"\n",
    "\n",
    "    outcome['termination'] = termination\n",
    "    outcome['result'] = result\n",
    "    outcome['winner'] = winner\n",
    "\n",
    "\n",
    "    return moves, moves_descriptions, outcome\n",
    "\n",
    "# Apply the function to each row in the DataFrame\n",
    "idx = 1\n",
    "test_pgn = df['pgn'].iloc[idx]\n",
    "desc = parse_pgn_from_string(test_pgn)\n",
    "\n",
    "print(\"PGN:\\n\")\n",
    "print(test_pgn)\n",
    "\n",
    "print(\"\\nMoves List:\\n\")\n",
    "print(desc[0])\n",
    "\n",
    "print(\"\\nExplanation:\\n\")\n",
    "print(desc[1])\n",
    "\n",
    "print(\"\\nOutcome:\\n\")\n",
    "print(desc[2])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae24187c",
   "metadata": {
    "papermill": {
     "duration": 0.010645,
     "end_time": "2024-09-28T02:16:00.891960",
     "exception": false,
     "start_time": "2024-09-28T02:16:00.881315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will fine tune with just the list of moves for now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "00ce8c9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:00.914888Z",
     "iopub.status.busy": "2024-09-28T02:16:00.914586Z",
     "iopub.status.idle": "2024-09-28T02:16:00.932201Z",
     "shell.execute_reply": "2024-09-28T02:16:00.931389Z"
    },
    "papermill": {
     "duration": 0.03142,
     "end_time": "2024-09-28T02:16:00.934322",
     "exception": false,
     "start_time": "2024-09-28T02:16:00.902902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4']\n",
      "\n",
      "Response:\n",
      "The next move is 'e5'\n",
      "-------\n",
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5']\n",
      "\n",
      "Response:\n",
      "The next move is 'Nf3'\n",
      "-------\n",
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5', 'Nf3']\n",
      "\n",
      "Response:\n",
      "The next move is 'Nc6'\n",
      "-------\n",
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5', 'Nf3', 'Nc6']\n",
      "\n",
      "Response:\n",
      "The next move is 'Bc4'\n",
      "-------\n",
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5', 'Nf3', 'Nc6', 'Bc4']\n",
      "\n",
      "Response:\n",
      "The next move is 'Bc5'\n",
      "-------\n"
     ]
    }
   ],
   "source": [
    "# Pgn to move list for training\n",
    "\n",
    "def load_data(pgn, n_moves=6, verb=False):\n",
    "    data = []\n",
    "    pgn_details = parse_pgn_from_string(pgn)\n",
    "    if len(pgn_details[0]) < n_moves:\n",
    "        if verb:\n",
    "            print(\"PGN move limit exceeded.\")\n",
    "            print(pgn_details[0])\n",
    "        return None\n",
    "    for i in range(1, n_moves):\n",
    "        prev_moves = \"Predict the next chess move in the sequence \" + str(pgn_details[0][:i])\n",
    "        best_move = f\"The next move is '{pgn_details[0][i]}'\"\n",
    "  \n",
    "        template = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n",
    "        formated_temp = template.format(instruction=prev_moves,response=best_move)\n",
    "        if verb:\n",
    "            print(formated_temp + '\\n-------')\n",
    "        data.append(formated_temp)\n",
    "    return data\n",
    "\n",
    "test_data = load_data(test_pgn, verb=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "528711a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:00.957499Z",
     "iopub.status.busy": "2024-09-28T02:16:00.957164Z",
     "iopub.status.idle": "2024-09-28T02:16:00.962594Z",
     "shell.execute_reply": "2024-09-28T02:16:00.961633Z"
    },
    "papermill": {
     "duration": 0.019084,
     "end_time": "2024-09-28T02:16:00.964455",
     "exception": false,
     "start_time": "2024-09-28T02:16:00.945371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Instruction:\\nPredict the next chess move in the sequence ['e4']\\n\\nResponse:\\nThe next move is 'e5'\""
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets see the data as string in the list\n",
    "test_data[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "64ba2b03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:00.988229Z",
     "iopub.status.busy": "2024-09-28T02:16:00.987588Z",
     "iopub.status.idle": "2024-09-28T02:16:01.077302Z",
     "shell.execute_reply": "2024-09-28T02:16:01.076237Z"
    },
    "papermill": {
     "duration": 0.103478,
     "end_time": "2024-09-28T02:16:01.079166",
     "exception": false,
     "start_time": "2024-09-28T02:16:00.975688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 66879 entries, 0 to 66878\n",
      "Data columns (total 14 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   white_username  66879 non-null  object\n",
      " 1   black_username  66879 non-null  object\n",
      " 2   white_id        66879 non-null  object\n",
      " 3   black_id        66879 non-null  object\n",
      " 4   white_rating    66879 non-null  int64 \n",
      " 5   black_rating    66879 non-null  int64 \n",
      " 6   white_result    66879 non-null  object\n",
      " 7   black_result    66879 non-null  object\n",
      " 8   time_class      66879 non-null  object\n",
      " 9   time_control    66879 non-null  object\n",
      " 10  rules           66879 non-null  object\n",
      " 11  rated           66879 non-null  bool  \n",
      " 12  fen             66879 non-null  object\n",
      " 13  pgn             66879 non-null  object\n",
      "dtypes: bool(1), int64(2), object(11)\n",
      "memory usage: 6.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# split the dataset into train and test\n",
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1fdce0e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:01.103317Z",
     "iopub.status.busy": "2024-09-28T02:16:01.102636Z",
     "iopub.status.idle": "2024-09-28T02:16:01.113790Z",
     "shell.execute_reply": "2024-09-28T02:16:01.112926Z"
    },
    "papermill": {
     "duration": 0.025119,
     "end_time": "2024-09-28T02:16:01.115683",
     "exception": false,
     "start_time": "2024-09-28T02:16:01.090564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['chess', 'chess960', 'threecheck', 'crazyhouse', 'kingofthehill'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rules'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f528aeb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:01.139545Z",
     "iopub.status.busy": "2024-09-28T02:16:01.139176Z",
     "iopub.status.idle": "2024-09-28T02:16:01.144531Z",
     "shell.execute_reply": "2024-09-28T02:16:01.143646Z"
    },
    "papermill": {
     "duration": 0.019433,
     "end_time": "2024-09-28T02:16:01.146458",
     "exception": false,
     "start_time": "2024-09-28T02:16:01.127025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_train_set(df, n=100):\n",
    "    # PGNs to formated list of training points\n",
    "    df_clean = df[df['rules']=='chess']\n",
    "    train = df_clean['pgn'][:n]\n",
    "    moves = train.map(load_data)\n",
    "    \n",
    "    pgn_train = moves.dropna() # drop nulls\n",
    "    train_set = pgn_train.sum()\n",
    "    \n",
    "    return train_set"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cef4d303",
   "metadata": {
    "papermill": {
     "duration": 0.011119,
     "end_time": "2024-09-28T02:16:01.168934",
     "exception": false,
     "start_time": "2024-09-28T02:16:01.157815",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Inference before tuning\n",
    "\n",
    "Lets test the base model on a sample from the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "080f17b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:01.193338Z",
     "iopub.status.busy": "2024-09-28T02:16:01.192478Z",
     "iopub.status.idle": "2024-09-28T02:16:21.840204Z",
     "shell.execute_reply": "2024-09-28T02:16:21.838708Z"
    },
    "papermill": {
     "duration": 20.662108,
     "end_time": "2024-09-28T02:16:21.842414",
     "exception": false,
     "start_time": "2024-09-28T02:16:01.180306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Predict the next chess move in the sequence ['d4', 'Nf6', 'c4', 'e6']\n",
      "\n",
      "Response:\n",
      "'Nc6'\n",
      "\n",
      "Explanation:\n",
      "The next move is 'Nc6' because the knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n",
      "\n",
      "The knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n",
      "\n",
      "The knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n",
      "\n",
      "The knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n",
      "\n",
      "The knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n",
      "\n",
      "The knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n",
      "\n",
      "The knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n",
      "\n",
      "The knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n",
      "\n",
      "The knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n",
      "\n",
      "The knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n",
      "\n",
      "The knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc\n"
     ]
    }
   ],
   "source": [
    "prompt = template.format(\n",
    "    instruction=\"Predict the next chess move in the sequence ['d4', 'Nf6', 'c4', 'e6']\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=500))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9b7d542",
   "metadata": {
    "papermill": {
     "duration": 0.011225,
     "end_time": "2024-09-28T02:16:21.865494",
     "exception": false,
     "start_time": "2024-09-28T02:16:21.854269",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## LoRA\n",
    "\n",
    "With the new formated dataset we will fine tune the model with LoRA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3ec2f6b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:21.889807Z",
     "iopub.status.busy": "2024-09-28T02:16:21.889146Z",
     "iopub.status.idle": "2024-09-28T02:16:22.478436Z",
     "shell.execute_reply": "2024-09-28T02:16:22.477510Z"
    },
    "papermill": {
     "duration": 0.603707,
     "end_time": "2024-09-28T02:16:22.480584",
     "exception": false,
     "start_time": "2024-09-28T02:16:21.876877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "400\n"
     ]
    }
   ],
   "source": [
    "train_set = get_train_set(df, n=100) # Lets train on the first n pgns\n",
    "\n",
    "print(len(train_set))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3c1d961d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:22.505397Z",
     "iopub.status.busy": "2024-09-28T02:16:22.504845Z",
     "iopub.status.idle": "2024-09-28T02:16:22.510682Z",
     "shell.execute_reply": "2024-09-28T02:16:22.509796Z"
    },
    "papermill": {
     "duration": 0.020239,
     "end_time": "2024-09-28T02:16:22.512686",
     "exception": false,
     "start_time": "2024-09-28T02:16:22.492447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[\"Instruction:\\nPredict the next chess move in the sequence ['d4']\\n\\nResponse:\\nThe next move is 'Nf6'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['d4', 'Nf6']\\n\\nResponse:\\nThe next move is 'c4'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['d4', 'Nf6', 'c4']\\n\\nResponse:\\nThe next move is 'e6'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['d4', 'Nf6', 'c4', 'e6']\\n\\nResponse:\\nThe next move is 'Nc3'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['d4', 'Nf6', 'c4', 'e6', 'Nc3']\\n\\nResponse:\\nThe next move is 'Bb4'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['e4']\\n\\nResponse:\\nThe next move is 'e5'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['e4', 'e5']\\n\\nResponse:\\nThe next move is 'Nf3'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['e4', 'e5', 'Nf3']\\n\\nResponse:\\nThe next move is 'Nc6'\"]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_set[:8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3786cb44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:22.537277Z",
     "iopub.status.busy": "2024-09-28T02:16:22.537004Z",
     "iopub.status.idle": "2024-09-28T02:16:22.804016Z",
     "shell.execute_reply": "2024-09-28T02:16:22.803100Z"
    },
    "papermill": {
     "duration": 0.28157,
     "end_time": "2024-09-28T02:16:22.805978",
     "exception": false,
     "start_time": "2024-09-28T02:16:22.524408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                                                  </span>┃<span style=\"font-weight: bold\">                                   Config </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                              │                      Vocab size: <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                                                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                  Config\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                              │                      Vocab size: \u001b[38;5;34m256,000\u001b[0m │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,507,536,384</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">524,288,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)        │   \u001b[38;5;34m2,507,536,384\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n",
       "│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m524,288,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n",
       "│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,507,536,384</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,507,536,384\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,363,968</span> (5.20 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,363,968\u001b[0m (5.20 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Enable LoRA for the model and set the LoRA rank to 4.\n",
    "gemma_lm.backbone.enable_lora(rank=4)\n",
    "gemma_lm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "774baeaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:16:22.833293Z",
     "iopub.status.busy": "2024-09-28T02:16:22.832993Z",
     "iopub.status.idle": "2024-09-28T02:21:45.904386Z",
     "shell.execute_reply": "2024-09-28T02:21:45.903342Z"
    },
    "papermill": {
     "duration": 323.087333,
     "end_time": "2024-09-28T02:21:45.906519",
     "exception": false,
     "start_time": "2024-09-28T02:16:22.819186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m400/400\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 753ms/step - loss: 0.1442 - sparse_categorical_accuracy: 0.6122\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x7d4234204b80>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Limit the input sequence length to 512 (to control memory usage).\n",
    "gemma_lm.preprocessor.sequence_length = 512\n",
    "\n",
    "# Use AdamW (a common optimizer for transformer models).\n",
    "optimizer = keras.optimizers.AdamW(\n",
    "    learning_rate=5e-5,\n",
    "    weight_decay=0.01,\n",
    ")\n",
    "# Exclude layernorm and bias terms from decay.\n",
    "optimizer.exclude_from_weight_decay(var_names=[\"bias\", \"scale\"])\n",
    "\n",
    "gemma_lm.compile(\n",
    "    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
    "    optimizer=optimizer,\n",
    "    weighted_metrics=[keras.metrics.SparseCategoricalAccuracy()],\n",
    ")\n",
    "\n",
    "# Fit with train dataset\n",
    "# 100 pgns, 318s\n",
    "gemma_lm.fit(train_set, epochs=1, batch_size=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4860fd4",
   "metadata": {
    "papermill": {
     "duration": 0.043987,
     "end_time": "2024-09-28T02:21:45.995134",
     "exception": false,
     "start_time": "2024-09-28T02:21:45.951147",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Inference after fine tuning\n",
    "\n",
    "Now we will run the same promp as before and examine the improvement after LoRA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b9137919",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:21:46.085578Z",
     "iopub.status.busy": "2024-09-28T02:21:46.084703Z",
     "iopub.status.idle": "2024-09-28T02:21:54.242378Z",
     "shell.execute_reply": "2024-09-28T02:21:54.241215Z"
    },
    "papermill": {
     "duration": 8.205127,
     "end_time": "2024-09-28T02:21:54.244448",
     "exception": false,
     "start_time": "2024-09-28T02:21:46.039321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5']\n",
      "\n",
      "Response:\n",
      "The next move is 'c5'\n"
     ]
    }
   ],
   "source": [
    "# On a new sample\n",
    "prompt = template.format(\n",
    "    instruction=\"Predict the next chess move in the sequence ['e4', 'e5']\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7da5c812",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:21:54.336322Z",
     "iopub.status.busy": "2024-09-28T02:21:54.335929Z",
     "iopub.status.idle": "2024-09-28T02:21:54.756644Z",
     "shell.execute_reply": "2024-09-28T02:21:54.755249Z"
    },
    "papermill": {
     "duration": 0.469525,
     "end_time": "2024-09-28T02:21:54.758869",
     "exception": false,
     "start_time": "2024-09-28T02:21:54.289344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5']\n",
      "\n",
      "Response:\n",
      "The next move is 'c5'\n"
     ]
    }
   ],
   "source": [
    "# On a new sample\n",
    "prompt = template.format(\n",
    "    instruction=\"Predict the next chess move in the sequence ['e4', 'e5']\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "94fec0f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:21:54.849532Z",
     "iopub.status.busy": "2024-09-28T02:21:54.849142Z",
     "iopub.status.idle": "2024-09-28T02:21:55.243951Z",
     "shell.execute_reply": "2024-09-28T02:21:55.243043Z"
    },
    "papermill": {
     "duration": 0.442643,
     "end_time": "2024-09-28T02:21:55.246044",
     "exception": false,
     "start_time": "2024-09-28T02:21:54.803401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5', 'Nf3']\n",
      "\n",
      "Response:\n",
      "The next move is 'c3'\n"
     ]
    }
   ],
   "source": [
    "# On a new sample\n",
    "prompt = template.format(\n",
    "    instruction=\"Predict the next chess move in the sequence ['e4', 'e5', 'Nf3']\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "26bd7a10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:21:55.338672Z",
     "iopub.status.busy": "2024-09-28T02:21:55.338288Z",
     "iopub.status.idle": "2024-09-28T02:21:55.741490Z",
     "shell.execute_reply": "2024-09-28T02:21:55.740529Z"
    },
    "papermill": {
     "duration": 0.452206,
     "end_time": "2024-09-28T02:21:55.743693",
     "exception": false,
     "start_time": "2024-09-28T02:21:55.291487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5', 'Nf3', 'Nc6']\n",
      "\n",
      "Response:\n",
      "The next move is 'Nc3'\n"
     ]
    }
   ],
   "source": [
    "# On a new sample\n",
    "prompt = template.format(\n",
    "    instruction=\"Predict the next chess move in the sequence ['e4', 'e5', 'Nf3', 'Nc6']\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f1190bd",
   "metadata": {
    "papermill": {
     "duration": 0.044974,
     "end_time": "2024-09-28T02:21:55.833848",
     "exception": false,
     "start_time": "2024-09-28T02:21:55.788874",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Interesting...it can predict past the 5th move, despite thats not in the training set...\n",
    "\n",
    "Lets see how it plays a game on its own."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1793d02a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:21:55.926038Z",
     "iopub.status.busy": "2024-09-28T02:21:55.925672Z",
     "iopub.status.idle": "2024-09-28T02:21:59.205786Z",
     "shell.execute_reply": "2024-09-28T02:21:59.204752Z"
    },
    "papermill": {
     "duration": 3.328584,
     "end_time": "2024-09-28T02:21:59.207886",
     "exception": false,
     "start_time": "2024-09-28T02:21:55.879302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Nf3', 'e6', 'Nc3']\n",
      "['Nf3', 'e6', 'Nc3', 'Nc6']\n",
      "['Nf3', 'e6', 'Nc3', 'Nc6', 'Bg4']\n",
      "['Nf3', 'e6', 'Nc3', 'Nc6', 'Bg4', 'Nf6']\n",
      "['Nf3', 'e6', 'Nc3', 'Nc6', 'Bg4', 'Nf6', 'c4']\n",
      "['Nf3', 'e6', 'Nc3', 'Nc6', 'Bg4', 'Nf6', 'c4', 'e4']\n",
      "['Nf3', 'e6', 'Nc3', 'Nc6', 'Bg4', 'Nf6', 'c4', 'e4', 'd4']\n",
      "['Nf3', 'e6', 'Nc3', 'Nc6', 'Bg4', 'Nf6', 'c4', 'e4', 'd4', 'e5']\n"
     ]
    }
   ],
   "source": [
    "def play_game(moves, n=5):\n",
    "    move_list = moves\n",
    "    while len(move_list) < n:\n",
    "        prompt = template.format(\n",
    "            instruction=f\"Predict the next chess move in the sequence {str(move_list)}\",\n",
    "            response=\"\",\n",
    "        )\n",
    "\n",
    "        output = gemma_lm.generate(prompt, max_length=256)\n",
    "\n",
    "        move_list.append(output.split(' ')[-1].strip(\"'\"))\n",
    "\n",
    "        print(move_list)\n",
    "    \n",
    "play_game(['Nf3', 'e6'], 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84194173",
   "metadata": {
    "papermill": {
     "duration": 0.045378,
     "end_time": "2024-09-28T02:21:59.299517",
     "exception": false,
     "start_time": "2024-09-28T02:21:59.254139",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Save LoRA weights\n",
    "\n",
    "We only need to save the LoRA weights, which are very small compared to the model itsef."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7cf2f742",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:21:59.392301Z",
     "iopub.status.busy": "2024-09-28T02:21:59.391908Z",
     "iopub.status.idle": "2024-09-28T02:21:59.455873Z",
     "shell.execute_reply": "2024-09-28T02:21:59.454755Z"
    },
    "papermill": {
     "duration": 0.11255,
     "end_time": "2024-09-28T02:21:59.458124",
     "exception": false,
     "start_time": "2024-09-28T02:21:59.345574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_name = \"gemma_2b_enV2-100pgn\"\n",
    "gemma_lm.backbone.save_lora_weights(f\"/kaggle/working/{model_name}.lora.h5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7337370",
   "metadata": {
    "papermill": {
     "duration": 0.045023,
     "end_time": "2024-09-28T02:21:59.549569",
     "exception": false,
     "start_time": "2024-09-28T02:21:59.504546",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Example of how to load the model with LoRA weights."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0546b36d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T02:21:59.641734Z",
     "iopub.status.busy": "2024-09-28T02:21:59.640832Z",
     "iopub.status.idle": "2024-09-28T02:21:59.645518Z",
     "shell.execute_reply": "2024-09-28T02:21:59.644581Z"
    },
    "papermill": {
     "duration": 0.052943,
     "end_time": "2024-09-28T02:21:59.647446",
     "exception": false,
     "start_time": "2024-09-28T02:21:59.594503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Load the model like this\n",
    "\n",
    "# # Do TPU and GPU stuff\n",
    "# # .... \n",
    "\n",
    "# # Define paths\n",
    "# LORA_WEIGHTS_PATH = f\"/kaggle/working/{model_name}.lora.h5\"\n",
    "\n",
    "# model = keras_nlp.models.GemmaCausalLM.from_preset('gemma_instruct_2b_en')\n",
    "\n",
    "# model.backbone.enable_lora(rank=4)\n",
    "\n",
    "# model.preprocessor.sequence_length = 512\n",
    "\n",
    "# # Load only the lora weights\n",
    "# model.backbone.load_lora_weights(LORA_WEIGHTS_PATH)\n",
    "\n",
    "# output = model.generate(\"blah blah I'm a prompt template with stuff in me\", max_length=512)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 1488027,
     "sourceId": 2458363,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 3533,
     "modelInstanceId": 5171,
     "sourceId": 11371,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30776,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 502.920674,
   "end_time": "2024-09-28T02:22:02.872842",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-28T02:13:39.952168",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
