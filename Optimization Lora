{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.15","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":1944111,"sourceType":"datasetVersion","datasetId":1159749},{"sourceId":2458363,"sourceType":"datasetVersion","datasetId":1488027},{"sourceId":9512215,"sourceType":"datasetVersion","datasetId":5790268},{"sourceId":11371,"sourceType":"modelInstanceVersion","modelInstanceId":5171,"modelId":3533},{"sourceId":85984,"sourceType":"modelInstanceVersion","modelInstanceId":72244,"modelId":78150}],"dockerImageVersionId":30777,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Intro\n\nThis notebook will be testing how well an LLM can play chess, by predicting the next best move in a given chess sequence.","metadata":{}},{"cell_type":"code","source":"# Change model, tune size, and filename here\nclass CFG:\n    train_size = 100 # Number of pgn samples to use in tuning\n    min_elo = 1500 # Exclude games lower than this elo from train set\n    model_name = \"gemma_2b_en\"\n    total_epochs = 2\n    batch_size = 8 # 1 default\n    max_seq_length = 11 # if very large number --> gets all sub sequences of mainline sequence\n    # LoRA\n    max_input_len = 64 # 64 ~seq len 11\n    learning_rate = 5e-5\n    weight_decay = 0.05\n    rank = 4\n\n    cpu = 'TPU'\n    file_name = f\"{model_name}-{train_size}pgn-{total_epochs}e-{max_seq_length}len-{cpu}-{batch_size}.lora.h5\"","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:45:26.184061Z","iopub.execute_input":"2024-11-13T08:45:26.184344Z","iopub.status.idle":"2024-11-13T08:45:26.195576Z","shell.execute_reply.started":"2024-11-13T08:45:26.184314Z","shell.execute_reply":"2024-11-13T08:45:26.194911Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"# imports\n\nif CFG.cpu == 'TPU':\n    # For TPU\n    !pip install -q tensorflow-cpu\n    !pip install -q -U keras-nlp tensorflow-hub\n    !pip install -q -U keras>=3\n    !pip install -q -U tensorflow-text\nelse:\n    # Install Keras\n    !pip install -q -U keras-nlp\n    !pip install -q -U keras>=3","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:45:26.281746Z","iopub.execute_input":"2024-11-13T08:45:26.282061Z","iopub.status.idle":"2024-11-13T08:47:09.756012Z","shell.execute_reply.started":"2024-11-13T08:45:26.282032Z","shell.execute_reply":"2024-11-13T08:47:09.754924Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ntensorflow 2.16.1 requires ml-dtypes~=0.3.1, but you have ml-dtypes 0.4.1 which is incompatible.\ntensorflow 2.16.1 requires tensorboard<2.17,>=2.16, but you have tensorboard 2.18.0 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0m\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ntensorflow-cpu 2.18.0 requires ml-dtypes<0.5.0,>=0.4.0, but you have ml-dtypes 0.3.2 which is incompatible.\ntensorflow-cpu 2.18.0 requires tensorboard<2.19,>=2.18, but you have tensorboard 2.16.2 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0m\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ntensorflow-cpu 2.18.0 requires ml-dtypes<0.5.0,>=0.4.0, but you have ml-dtypes 0.3.2 which is incompatible.\ntensorflow-cpu 2.18.0 requires tensorboard<2.19,>=2.18, but you have tensorboard 2.16.2 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0m\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ntf-keras 2.16.0 requires tensorflow<2.17,>=2.16, but you have tensorflow 2.18.0 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0m\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.3.1\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load Model","metadata":{}},{"cell_type":"code","source":"!nvidia-smi","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch\nprint(\"Is CUDA available:\", torch.cuda.is_available())\nprint(\"GPU count:\", torch.cuda.device_count())\nif torch.cuda.is_available():\n    print(\"GPU name:\", torch.cuda.get_device_name(0))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\n\nos.environ[\"KERAS_BACKEND\"] = \"torch\"  # Or \"torch\" or \"tensorflow\".\n# Avoid memory fragmentation on JAX backend.\n# os.environ[\"XLA_PYTHON_CLIENT_MEM_FRACTION\"] = \"1.0\"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import keras\nimport keras_nlp\n\n# Load the model\ngemma_lm = keras_nlp.models.GemmaCausalLM.from_preset(CFG.model_name)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"gemma_lm.summary()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test some example prompts\ntemplate = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n\nprompt = template.format(\n    instruction=\"What is the next chess move in the PGN: 1.e4 e5 2.Nf3 c6 3.Nc3 d6\",\n    response=\"\",\n)\nprint(gemma_lm.generate(prompt, max_length=256))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Dataset\n\nThe dataset used if a modified version of the original, where I have added a column for sequences of moves for each row/PGN.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ndata = '/kaggle/input/chess-games/chess_games.csv'\n\ndf = pd.read_csv(data)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:47:09.757810Z","iopub.execute_input":"2024-11-13T08:47:09.758091Z","iopub.status.idle":"2024-11-13T08:48:44.030825Z","shell.execute_reply.started":"2024-11-13T08:47:09.758064Z","shell.execute_reply":"2024-11-13T08:48:44.029998Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"                Event            White       Black Result     UTCDate  \\\n0          Classical           eisaaaa    HAMID449    1-0  2016.06.30   \n1              Blitz            go4jas  Sergei1973    0-1  2016.06.30   \n2   Blitz tournament   Evangelistaizac      kafune    1-0  2016.06.30   \n3     Correspondence            Jvayne    Wsjvayne    1-0  2016.06.30   \n4   Blitz tournament            kyoday   BrettDale    0-1  2016.06.30   \n\n    UTCTime  WhiteElo  BlackElo  WhiteRatingDiff  BlackRatingDiff  ECO  \\\n0  22:00:01      1901      1896             11.0            -11.0  D10   \n1  22:00:01      1641      1627            -11.0             12.0  C20   \n2  22:00:02      1647      1688             13.0            -13.0  B01   \n3  22:00:02      1706      1317             27.0            -25.0  A00   \n4  22:00:02      1945      1900            -14.0             13.0  B90   \n\n                                         Opening TimeControl   Termination  \\\n0                                   Slav Defense       300+5  Time forfeit   \n1                      King's Pawn Opening: 2.b3       300+0        Normal   \n2  Scandinavian Defense: Mieses-Kotroc Variation       180+0  Time forfeit   \n3                           Van't Kruijs Opening           -        Normal   \n4    Sicilian Defense: Najdorf, Lipnitsky Attack       180+0  Time forfeit   \n\n                                                  AN  \n0  1. d4 d5 2. c4 c6 3. e3 a6 4. Nf3 e5 5. cxd5 e...  \n1  1. e4 e5 2. b3 Nf6 3. Bb2 Nc6 4. Nf3 d6 5. d3 ...  \n2  1. e4 d5 2. exd5 Qxd5 3. Nf3 Bg4 4. Be2 Nf6 5....  \n3  1. e3 Nf6 2. Bc4 d6 3. e4 e6 4. Nf3 Nxe4 5. Nd...  \n4  1. e4 c5 2. Nf3 d6 3. d4 cxd4 4. Nxd4 Nf6 5. N...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Event</th>\n      <th>White</th>\n      <th>Black</th>\n      <th>Result</th>\n      <th>UTCDate</th>\n      <th>UTCTime</th>\n      <th>WhiteElo</th>\n      <th>BlackElo</th>\n      <th>WhiteRatingDiff</th>\n      <th>BlackRatingDiff</th>\n      <th>ECO</th>\n      <th>Opening</th>\n      <th>TimeControl</th>\n      <th>Termination</th>\n      <th>AN</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Classical</td>\n      <td>eisaaaa</td>\n      <td>HAMID449</td>\n      <td>1-0</td>\n      <td>2016.06.30</td>\n      <td>22:00:01</td>\n      <td>1901</td>\n      <td>1896</td>\n      <td>11.0</td>\n      <td>-11.0</td>\n      <td>D10</td>\n      <td>Slav Defense</td>\n      <td>300+5</td>\n      <td>Time forfeit</td>\n      <td>1. d4 d5 2. c4 c6 3. e3 a6 4. Nf3 e5 5. cxd5 e...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Blitz</td>\n      <td>go4jas</td>\n      <td>Sergei1973</td>\n      <td>0-1</td>\n      <td>2016.06.30</td>\n      <td>22:00:01</td>\n      <td>1641</td>\n      <td>1627</td>\n      <td>-11.0</td>\n      <td>12.0</td>\n      <td>C20</td>\n      <td>King's Pawn Opening: 2.b3</td>\n      <td>300+0</td>\n      <td>Normal</td>\n      <td>1. e4 e5 2. b3 Nf6 3. Bb2 Nc6 4. Nf3 d6 5. d3 ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Blitz tournament</td>\n      <td>Evangelistaizac</td>\n      <td>kafune</td>\n      <td>1-0</td>\n      <td>2016.06.30</td>\n      <td>22:00:02</td>\n      <td>1647</td>\n      <td>1688</td>\n      <td>13.0</td>\n      <td>-13.0</td>\n      <td>B01</td>\n      <td>Scandinavian Defense: Mieses-Kotroc Variation</td>\n      <td>180+0</td>\n      <td>Time forfeit</td>\n      <td>1. e4 d5 2. exd5 Qxd5 3. Nf3 Bg4 4. Be2 Nf6 5....</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Correspondence</td>\n      <td>Jvayne</td>\n      <td>Wsjvayne</td>\n      <td>1-0</td>\n      <td>2016.06.30</td>\n      <td>22:00:02</td>\n      <td>1706</td>\n      <td>1317</td>\n      <td>27.0</td>\n      <td>-25.0</td>\n      <td>A00</td>\n      <td>Van't Kruijs Opening</td>\n      <td>-</td>\n      <td>Normal</td>\n      <td>1. e3 Nf6 2. Bc4 d6 3. e4 e6 4. Nf3 Nxe4 5. Nd...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Blitz tournament</td>\n      <td>kyoday</td>\n      <td>BrettDale</td>\n      <td>0-1</td>\n      <td>2016.06.30</td>\n      <td>22:00:02</td>\n      <td>1945</td>\n      <td>1900</td>\n      <td>-14.0</td>\n      <td>13.0</td>\n      <td>B90</td>\n      <td>Sicilian Defense: Najdorf, Lipnitsky Attack</td>\n      <td>180+0</td>\n      <td>Time forfeit</td>\n      <td>1. e4 c5 2. Nf3 d6 3. d4 cxd4 4. Nxd4 Nf6 5. N...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"We will only use valid 'chess' rule based games for training, we exclude wild formats.","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:48:44.031933Z","iopub.execute_input":"2024-11-13T08:48:44.032179Z","iopub.status.idle":"2024-11-13T08:48:44.042097Z","shell.execute_reply.started":"2024-11-13T08:48:44.032154Z","shell.execute_reply":"2024-11-13T08:48:44.041417Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 6256184 entries, 0 to 6256183\nData columns (total 15 columns):\n #   Column           Dtype  \n---  ------           -----  \n 0   Event            object \n 1   White            object \n 2   Black            object \n 3   Result           object \n 4   UTCDate          object \n 5   UTCTime          object \n 6   WhiteElo         int64  \n 7   BlackElo         int64  \n 8   WhiteRatingDiff  float64\n 9   BlackRatingDiff  float64\n 10  ECO              object \n 11  Opening          object \n 12  TimeControl      object \n 13  Termination      object \n 14  AN               object \ndtypes: float64(2), int64(2), object(11)\nmemory usage: 716.0+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df['WhiteElo'].hist()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:48:44.043654Z","iopub.execute_input":"2024-11-13T08:48:44.043876Z","iopub.status.idle":"2024-11-13T08:48:45.368549Z","shell.execute_reply.started":"2024-11-13T08:48:44.043853Z","shell.execute_reply":"2024-11-13T08:48:45.367874Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"df['Event'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:48:45.369500Z","iopub.execute_input":"2024-11-13T08:48:45.369855Z","iopub.status.idle":"2024-11-13T08:48:45.746426Z","shell.execute_reply.started":"2024-11-13T08:48:45.369824Z","shell.execute_reply":"2024-11-13T08:48:45.745724Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"array([' Classical ', ' Blitz ', ' Blitz tournament ', ' Correspondence ',\n       ' Classical tournament ', ' Bullet tournament ', ' Bullet ',\n       'Blitz tournament ', 'Bullet ', 'Classical ', 'Blitz ',\n       'Bullet tournament ', 'Classical tournament ', 'Correspondence '],\n      dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"df['Event'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:48:45.747435Z","iopub.execute_input":"2024-11-13T08:48:45.747693Z","iopub.status.idle":"2024-11-13T08:48:46.179179Z","shell.execute_reply.started":"2024-11-13T08:48:45.747667Z","shell.execute_reply":"2024-11-13T08:48:46.178512Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"Event\n Blitz                    2339554\n Classical                1510798\n Bullet                   1198177\n Bullet tournament         546774\n Blitz tournament          472258\n Classical tournament      165633\n Correspondence             22939\nBlitz                          20\nClassical                      13\nBullet                          8\nBlitz tournament                4\nBullet tournament               3\nClassical tournament            2\nCorrespondence                  1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df = df[df['Event']==' Classical '].dropna()\n\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:48:46.180332Z","iopub.execute_input":"2024-11-13T08:48:46.180645Z","iopub.status.idle":"2024-11-13T08:48:49.041807Z","shell.execute_reply.started":"2024-11-13T08:48:46.180609Z","shell.execute_reply":"2024-11-13T08:48:49.040944Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 1509062 entries, 0 to 6256183\nData columns (total 15 columns):\n #   Column           Non-Null Count    Dtype  \n---  ------           --------------    -----  \n 0   Event            1509062 non-null  object \n 1   White            1509062 non-null  object \n 2   Black            1509062 non-null  object \n 3   Result           1509062 non-null  object \n 4   UTCDate          1509062 non-null  object \n 5   UTCTime          1509062 non-null  object \n 6   WhiteElo         1509062 non-null  int64  \n 7   BlackElo         1509062 non-null  int64  \n 8   WhiteRatingDiff  1509062 non-null  float64\n 9   BlackRatingDiff  1509062 non-null  float64\n 10  ECO              1509062 non-null  object \n 11  Opening          1509062 non-null  object \n 12  TimeControl      1509062 non-null  object \n 13  Termination      1509062 non-null  object \n 14  AN               1509062 non-null  object \ndtypes: float64(2), int64(2), object(11)\nmemory usage: 184.2+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df['WhiteElo'].hist()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:48:49.042851Z","iopub.execute_input":"2024-11-13T08:48:49.043100Z","iopub.status.idle":"2024-11-13T08:48:49.213885Z","shell.execute_reply.started":"2024-11-13T08:48:49.043073Z","shell.execute_reply":"2024-11-13T08:48:49.213192Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Add Sequences to Dataset","metadata":{}},{"cell_type":"code","source":"df['AN'][0]","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:48:49.214932Z","iopub.execute_input":"2024-11-13T08:48:49.215189Z","iopub.status.idle":"2024-11-13T08:48:49.221824Z","shell.execute_reply.started":"2024-11-13T08:48:49.215161Z","shell.execute_reply":"2024-11-13T08:48:49.221151Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"'1. d4 d5 2. c4 c6 3. e3 a6 4. Nf3 e5 5. cxd5 e4 6. Ne5 cxd5 7. Qa4+ Bd7 8. Nxd7 Nxd7 9. Nc3 Nf6 10. Qb3 Be7 11. Nxd5 Qa5+ 12. Nc3 O-O 13. Be2 b5 14. O-O Rad8 15. Bd2 Qc7 16. Rac1 Qd6 17. Qc2 Qe6 18. Nb1 Bd6 19. a3 Nb6 20. Qc6 Nfd5 21. Ba5 Rc8 22. Qb7 Qh6 23. h3 Nc4 24. Bxc4 bxc4 25. Qxd5 Rfd8 26. Qxe4 Rd7 27. Bc3 Re7 28. Qf3 Re6 29. Nd2 Rf6 30. Qg4 Re8 31. Ne4 Rg6 32. Qd7 Rf8 33. Nxd6 Rxd6 34. Qc7 Rg6 35. Qh2 Re8 36. d5 f6 37. d6 Rd8 38. Rfd1 1-0'"},"metadata":{}}]},{"cell_type":"code","source":"def to_seq(moves):\n    return tuple([move for idx,move in enumerate(moves.split()) if not idx%3==0][:-1])\n\nprint(to_seq(df['AN'][0]))","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:48:49.224450Z","iopub.execute_input":"2024-11-13T08:48:49.224695Z","iopub.status.idle":"2024-11-13T08:48:49.231513Z","shell.execute_reply.started":"2024-11-13T08:48:49.224669Z","shell.execute_reply":"2024-11-13T08:48:49.230824Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"('d4', 'd5', 'c4', 'c6', 'e3', 'a6', 'Nf3', 'e5', 'cxd5', 'e4', 'Ne5', 'cxd5', 'Qa4+', 'Bd7', 'Nxd7', 'Nxd7', 'Nc3', 'Nf6', 'Qb3', 'Be7', 'Nxd5', 'Qa5+', 'Nc3', 'O-O', 'Be2', 'b5', 'O-O', 'Rad8', 'Bd2', 'Qc7', 'Rac1', 'Qd6', 'Qc2', 'Qe6', 'Nb1', 'Bd6', 'a3', 'Nb6', 'Qc6', 'Nfd5', 'Ba5', 'Rc8', 'Qb7', 'Qh6', 'h3', 'Nc4', 'Bxc4', 'bxc4', 'Qxd5', 'Rfd8', 'Qxe4', 'Rd7', 'Bc3', 'Re7', 'Qf3', 'Re6', 'Nd2', 'Rf6', 'Qg4', 'Re8', 'Ne4', 'Rg6', 'Qd7', 'Rf8', 'Nxd6', 'Rxd6', 'Qc7', 'Rg6', 'Qh2', 'Re8', 'd5', 'f6', 'd6', 'Rd8', 'Rfd1')\n","output_type":"stream"}]},{"cell_type":"code","source":"df['move_seq'] = df['AN'].map(to_seq)","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:48:49.232425Z","iopub.execute_input":"2024-11-13T08:48:49.232652Z","iopub.status.idle":"2024-11-13T08:49:24.778714Z","shell.execute_reply.started":"2024-11-13T08:48:49.232629Z","shell.execute_reply":"2024-11-13T08:49:24.777916Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:49:24.779754Z","iopub.execute_input":"2024-11-13T08:49:24.780007Z","iopub.status.idle":"2024-11-13T08:49:25.823127Z","shell.execute_reply.started":"2024-11-13T08:49:24.779981Z","shell.execute_reply":"2024-11-13T08:49:25.822404Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 1509062 entries, 0 to 6256183\nData columns (total 16 columns):\n #   Column           Non-Null Count    Dtype  \n---  ------           --------------    -----  \n 0   Event            1509062 non-null  object \n 1   White            1509062 non-null  object \n 2   Black            1509062 non-null  object \n 3   Result           1509062 non-null  object \n 4   UTCDate          1509062 non-null  object \n 5   UTCTime          1509062 non-null  object \n 6   WhiteElo         1509062 non-null  int64  \n 7   BlackElo         1509062 non-null  int64  \n 8   WhiteRatingDiff  1509062 non-null  float64\n 9   BlackRatingDiff  1509062 non-null  float64\n 10  ECO              1509062 non-null  object \n 11  Opening          1509062 non-null  object \n 12  TimeControl      1509062 non-null  object \n 13  Termination      1509062 non-null  object \n 14  AN               1509062 non-null  object \n 15  move_seq         1509062 non-null  object \ndtypes: float64(2), int64(2), object(12)\nmemory usage: 195.7+ MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Train & Test splits\n\nDataset to train and test sets.","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n# tune_size = 1_000 # Number of pgn samples to use in tuning\n# min_elo = 1_000 # I want the model to tune on the better half of players\n\ndf = df[df['WhiteElo']>= CFG.min_elo]\n\nX = df.drop('WhiteElo', axis=1)\ny = df['WhiteElo']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=CFG.train_size, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:51.542801Z","iopub.execute_input":"2024-11-13T08:50:51.543060Z","iopub.status.idle":"2024-11-13T08:50:55.480177Z","shell.execute_reply.started":"2024-11-13T08:50:51.543032Z","shell.execute_reply":"2024-11-13T08:50:55.479022Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"X_train.info()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.481394Z","iopub.execute_input":"2024-11-13T08:50:55.481975Z","iopub.status.idle":"2024-11-13T08:50:55.492576Z","shell.execute_reply.started":"2024-11-13T08:50:55.481940Z","shell.execute_reply":"2024-11-13T08:50:55.491752Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 100 entries, 2561130 to 635138\nData columns (total 15 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   Event            100 non-null    object \n 1   White            100 non-null    object \n 2   Black            100 non-null    object \n 3   Result           100 non-null    object \n 4   UTCDate          100 non-null    object \n 5   UTCTime          100 non-null    object \n 6   BlackElo         100 non-null    int64  \n 7   WhiteRatingDiff  100 non-null    float64\n 8   BlackRatingDiff  100 non-null    float64\n 9   ECO              100 non-null    object \n 10  Opening          100 non-null    object \n 11  TimeControl      100 non-null    object \n 12  Termination      100 non-null    object \n 13  AN               100 non-null    object \n 14  move_seq         100 non-null    object \ndtypes: float64(2), int64(1), object(12)\nmemory usage: 12.5+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"X_train['BlackElo'].hist()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.493617Z","iopub.execute_input":"2024-11-13T08:50:55.493859Z","iopub.status.idle":"2024-11-13T08:50:55.644510Z","shell.execute_reply.started":"2024-11-13T08:50:55.493835Z","shell.execute_reply":"2024-11-13T08:50:55.643693Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"X_train['move_seq'][:3]","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.645701Z","iopub.execute_input":"2024-11-13T08:50:55.646002Z","iopub.status.idle":"2024-11-13T08:50:55.653632Z","shell.execute_reply.started":"2024-11-13T08:50:55.645971Z","shell.execute_reply":"2024-11-13T08:50:55.652831Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"2561130    (e4, c5, Nf3, Nc6, d4, d6, d5, Ne5, Bb5+, Bd7,...\n4814810    (d4, Nc6, c3, h6, e3, a6, Na3, e5, Bd2, exd4, ...\n1837866    (e4, d5, exd5, Qxd5, Nc3, Qe5+, Be2, e6, Nf3, ...\nName: move_seq, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"print(X_train['move_seq'].iloc[5])","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.654621Z","iopub.execute_input":"2024-11-13T08:50:55.654904Z","iopub.status.idle":"2024-11-13T08:50:55.674913Z","shell.execute_reply.started":"2024-11-13T08:50:55.654875Z","shell.execute_reply":"2024-11-13T08:50:55.674215Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"('d4', 'Nf6', 'g3', 'b6', 'Bg2', 'Nc6', 'Nd2', 'Bb7', 'Ngf3', 'Nxd4', 'O-O', 'Nxf3+', 'Nxf3', 'Ng4', 'Re1', 'e6', 'a3', 'Qf6', 'e3', 'O-O-O', 'b4', 'Qxa1', 'Qe2', 'Qc3', 'Rd1', 'Be7', 'Rd3', 'Qa1', 'Rd1', 'Qf6', 'c4', 'Ba6', 'Bb2', 'Qf5', 'Nd4', 'Qh5', 'h3', 'Nf6', 'g4', 'Qh4', 'Nf3', 'Qh6', 'e4', 'g5', 'Bc1', 'Qg6', 'Nxg5', 'h5', 'e5', 'Nh7', 'Be4', 'Qg7', 'Nxh7', 'hxg4', 'hxg4', 'f5', 'exf6', 'Bxf6', 'b5', 'Bb7', 'Bxb7+', 'Kxb7', 'Qf3+', 'Kb8', 'Nxf6', 'Rdf8', 'Nxd7+', 'Qxd7', 'Qxf8+', 'Qc8', 'Qxc8+', 'Kxc8', 'Kg2', 'Rh4', 'f3', 'e5', 'Kg3', 'Rh6', 'Bxh6')\n","output_type":"stream"}]},{"cell_type":"code","source":"[X_train['move_seq'].iloc[0][:t] for t in range(1,3+1)]","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.675779Z","iopub.execute_input":"2024-11-13T08:50:55.676021Z","iopub.status.idle":"2024-11-13T08:50:55.690798Z","shell.execute_reply.started":"2024-11-13T08:50:55.675997Z","shell.execute_reply":"2024-11-13T08:50:55.690029Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"[('e4',), ('e4', 'c5'), ('e4', 'c5', 'Nf3')]"},"metadata":{}}]},{"cell_type":"code","source":"[('d4', 'e6')[:t] for t in range(1,3+1)]","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.691630Z","iopub.execute_input":"2024-11-13T08:50:55.691871Z","iopub.status.idle":"2024-11-13T08:50:55.704147Z","shell.execute_reply.started":"2024-11-13T08:50:55.691844Z","shell.execute_reply":"2024-11-13T08:50:55.703327Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"[('d4',), ('d4', 'e6'), ('d4', 'e6')]"},"metadata":{}}]},{"cell_type":"code","source":"def seq_set(seq_data, n):\n    # List of all sequences of length < n in a given dataset of moves\n    sequences = []\n    \n    for seq in seq_data:\n        max_n = n if len(seq) >= n else len(seq)\n        sequences.extend(seq[:t] for t in range(1,max_n+1))\n\n    return sequences\n\ntest_seq = [('e4', 'c6', 'd4', 'd5', 'exd5', 'cxd5', 'g3', 'Nc6', 'Bg2', 'e5', 'Nc3', 'Nc6', 'Bg2', 'e5', '#Qf5')]\nprint(len(test_seq[0]))\nseq_set(test_seq, 7)","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.705178Z","iopub.execute_input":"2024-11-13T08:50:55.705508Z","iopub.status.idle":"2024-11-13T08:50:55.718268Z","shell.execute_reply.started":"2024-11-13T08:50:55.705451Z","shell.execute_reply":"2024-11-13T08:50:55.717621Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"15\n","output_type":"stream"},{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"[('e4',),\n ('e4', 'c6'),\n ('e4', 'c6', 'd4'),\n ('e4', 'c6', 'd4', 'd5'),\n ('e4', 'c6', 'd4', 'd5', 'exd5'),\n ('e4', 'c6', 'd4', 'd5', 'exd5', 'cxd5'),\n ('e4', 'c6', 'd4', 'd5', 'exd5', 'cxd5', 'g3')]"},"metadata":{}}]},{"cell_type":"markdown","source":"## Set max seq length for training","metadata":{}},{"cell_type":"code","source":"all_seq = seq_set(X_train['move_seq'], CFG.max_seq_length)","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.719083Z","iopub.execute_input":"2024-11-13T08:50:55.719340Z","iopub.status.idle":"2024-11-13T08:50:55.728327Z","shell.execute_reply.started":"2024-11-13T08:50:55.719305Z","shell.execute_reply":"2024-11-13T08:50:55.727627Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"print(len(X_train['move_seq']))\nprint(len(all_seq))","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.732372Z","iopub.execute_input":"2024-11-13T08:50:55.732632Z","iopub.status.idle":"2024-11-13T08:50:55.739108Z","shell.execute_reply.started":"2024-11-13T08:50:55.732606Z","shell.execute_reply":"2024-11-13T08:50:55.738410Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"100\n1086\n","output_type":"stream"}]},{"cell_type":"code","source":"def parse_seq(seq_list):\n    # Parse seqs list into training list\n    template = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n    data = []\n    for seq in seq_list:\n        if len(seq) <= 1:\n            continue\n        else:\n            prev_moves = \"Predict the next chess move in the sequence \" + str(list(seq[:-1]))\n            best_move = f\"The next move is '{seq[-1]}'\"\n\n            formated_seq = template.format(instruction=prev_moves,response=best_move)\n            data.append(formated_seq)\n            # print(formated_seq)\n    return data\n\nprint(all_seq[:3])\nparse_seq(all_seq[:3])","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.739949Z","iopub.execute_input":"2024-11-13T08:50:55.740179Z","iopub.status.idle":"2024-11-13T08:50:55.750808Z","shell.execute_reply.started":"2024-11-13T08:50:55.740154Z","shell.execute_reply":"2024-11-13T08:50:55.750087Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"[('e4',), ('e4', 'c5'), ('e4', 'c5', 'Nf3')]\n","output_type":"stream"},{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"[\"Instruction:\\nPredict the next chess move in the sequence ['e4']\\n\\nResponse:\\nThe next move is 'c5'\",\n \"Instruction:\\nPredict the next chess move in the sequence ['e4', 'c5']\\n\\nResponse:\\nThe next move is 'Nf3'\"]"},"metadata":{}}]},{"cell_type":"markdown","source":"## Inference before tuning\n\nLets test the base model on a sample from the training set.","metadata":{}},{"cell_type":"code","source":"prompt = template.format(\n    instruction=\"Predict the next chess move in the sequence ['d4', 'Nf6', 'c4', 'e6']\",\n    response=\"\",\n)\nprint(gemma_lm.generate(prompt, max_length=256))","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:50:55.751715Z","iopub.execute_input":"2024-11-13T08:50:55.751965Z","iopub.status.idle":"2024-11-13T08:51:01.455454Z","shell.execute_reply.started":"2024-11-13T08:50:55.751939Z","shell.execute_reply":"2024-11-13T08:51:01.454609Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"Instruction:\nPredict the next chess move in the sequence ['d4', 'Nf6', 'c4', 'e6']\n\nResponse:\n'Nc6'\n\nExplanation:\nThe next move is 'Nc6' because the knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n\nThe knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n\nThe knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n\nThe knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the board.\n\nThe knight on 'd4' is the only piece that can move to 'Nc6' and it is the only piece that can move to 'Nc6' that is not already on the\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## LoRA\n\nWith the new formated dataset we will fine tune the model with LoRA.","metadata":{}},{"cell_type":"code","source":"train_set = parse_seq(all_seq)\n\nprint(len(train_set))","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:51:01.456424Z","iopub.execute_input":"2024-11-13T08:51:01.456683Z","iopub.status.idle":"2024-11-13T08:51:01.463791Z","shell.execute_reply.started":"2024-11-13T08:51:01.456655Z","shell.execute_reply":"2024-11-13T08:51:01.463042Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"986\n","output_type":"stream"}]},{"cell_type":"code","source":"train_set[:8]","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:51:01.464674Z","iopub.execute_input":"2024-11-13T08:51:01.464921Z","iopub.status.idle":"2024-11-13T08:51:01.478184Z","shell.execute_reply.started":"2024-11-13T08:51:01.464894Z","shell.execute_reply":"2024-11-13T08:51:01.477560Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"[\"Instruction:\\nPredict the next chess move in the sequence ['e4']\\n\\nResponse:\\nThe next move is 'c5'\",\n \"Instruction:\\nPredict the next chess move in the sequence ['e4', 'c5']\\n\\nResponse:\\nThe next move is 'Nf3'\",\n \"Instruction:\\nPredict the next chess move in the sequence ['e4', 'c5', 'Nf3']\\n\\nResponse:\\nThe next move is 'Nc6'\",\n \"Instruction:\\nPredict the next chess move in the sequence ['e4', 'c5', 'Nf3', 'Nc6']\\n\\nResponse:\\nThe next move is 'd4'\",\n \"Instruction:\\nPredict the next chess move in the sequence ['e4', 'c5', 'Nf3', 'Nc6', 'd4']\\n\\nResponse:\\nThe next move is 'd6'\",\n \"Instruction:\\nPredict the next chess move in the sequence ['e4', 'c5', 'Nf3', 'Nc6', 'd4', 'd6']\\n\\nResponse:\\nThe next move is 'd5'\",\n \"Instruction:\\nPredict the next chess move in the sequence ['e4', 'c5', 'Nf3', 'Nc6', 'd4', 'd6', 'd5']\\n\\nResponse:\\nThe next move is 'Ne5'\",\n \"Instruction:\\nPredict the next chess move in the sequence ['e4', 'c5', 'Nf3', 'Nc6', 'd4', 'd6', 'd5', 'Ne5']\\n\\nResponse:\\nThe next move is 'Bb5+'\"]"},"metadata":{}}]},{"cell_type":"code","source":"# Enable LoRA for the model and set the LoRA rank to 4.\ngemma_lm.backbone.enable_lora(rank=CFG.rank)\ngemma_lm.summary()","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:51:01.478997Z","iopub.execute_input":"2024-11-13T08:51:01.479219Z","iopub.status.idle":"2024-11-13T08:51:02.160446Z","shell.execute_reply.started":"2024-11-13T08:51:01.479195Z","shell.execute_reply":"2024-11-13T08:51:02.159627Z"},"trusted":true},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                                                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                  Config\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                              │                      Vocab size: \u001b[38;5;34m256,000\u001b[0m │\n└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                                                  </span>┃<span style=\"font-weight: bold\">                                   Config </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                              │                      Vocab size: <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)        │   \u001b[38;5;34m2,507,536,384\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m524,288,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,507,536,384</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">524,288,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,507,536,384\u001b[0m (9.34 GB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,507,536,384</span> (9.34 GB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,363,968\u001b[0m (5.20 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,363,968</span> (5.20 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"# Limit the input sequence length to 512 (to control memory usage).\ngemma_lm.preprocessor.sequence_length = CFG.max_input_len\n\n# Use AdamW (a common optimizer for transformer models).\noptimizer = keras.optimizers.AdamW(\n    learning_rate = CFG.learning_rate,\n    weight_decay = CFG.weight_decay,\n)\n# Exclude layernorm and bias terms from decay.\noptimizer.exclude_from_weight_decay(var_names=[\"bias\", \"scale\"])\n\ngemma_lm.compile(\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    optimizer=optimizer,\n    weighted_metrics=[keras.metrics.SparseCategoricalAccuracy()],\n)\n\n# Fit with train dataset\n# 100 pgns, 318s\ngemma_lm.fit(train_set, epochs=CFG.total_epochs, batch_size=CFG.batch_size)","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:51:02.161460Z","iopub.execute_input":"2024-11-13T08:51:02.161751Z","iopub.status.idle":"2024-11-13T08:52:18.341098Z","shell.execute_reply.started":"2024-11-13T08:51:02.161721Z","shell.execute_reply":"2024-11-13T08:52:18.340158Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"Epoch 1/2\n\u001b[1m124/124\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m56s\u001b[0m 265ms/step - loss: 1.8459 - sparse_categorical_accuracy: 0.5209\nEpoch 2/2\n\u001b[1m124/124\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 132ms/step - loss: 0.8942 - sparse_categorical_accuracy: 0.7550\n","output_type":"stream"},{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7a8b445d0e50>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Inference after fine tuning\n\nNow we will run the same promp as before and examine the improvement after LoRA.","metadata":{}},{"cell_type":"code","source":"# On a new sample\nprompt = template.format(\n    instruction=\"Predict the next chess move in the sequence ['e4', 'e5']\",\n    response=\"\",\n)\nprint(gemma_lm.generate(prompt, max_length=256))","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:52:18.342396Z","iopub.execute_input":"2024-11-13T08:52:18.342702Z","iopub.status.idle":"2024-11-13T08:52:32.367136Z","shell.execute_reply.started":"2024-11-13T08:52:18.342671Z","shell.execute_reply":"2024-11-13T08:52:32.366203Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Instruction:\nPredict the next chess move in the sequence ['e4', 'e5']\n\nResponse:\nThe next move is 'Nf3'\n","output_type":"stream"}]},{"cell_type":"code","source":"# On a new sample\nprompt = template.format(\n    instruction=\"Predict the next chess move in the sequence ['e4', 'e5', 'Nf3']\",\n    response=\"\",\n)\nprint(gemma_lm.generate(prompt, max_length=256))","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:52:32.368251Z","iopub.execute_input":"2024-11-13T08:52:32.368529Z","iopub.status.idle":"2024-11-13T08:52:32.648599Z","shell.execute_reply.started":"2024-11-13T08:52:32.368501Z","shell.execute_reply":"2024-11-13T08:52:32.647721Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"Instruction:\nPredict the next chess move in the sequence ['e4', 'e5', 'Nf3']\n\nResponse:\nThe next move is 'Nf6'\n","output_type":"stream"}]},{"cell_type":"code","source":"# On a new sample\nprompt = template.format(\n    instruction=\"Predict the next chess move in the sequence ['e4', 'e5', 'Nf3', 'Nc6']\",\n    response=\"\",\n)\nprint(gemma_lm.generate(prompt, max_length=256))","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:52:32.649899Z","iopub.execute_input":"2024-11-13T08:52:32.650194Z","iopub.status.idle":"2024-11-13T08:52:32.932527Z","shell.execute_reply.started":"2024-11-13T08:52:32.650163Z","shell.execute_reply":"2024-11-13T08:52:32.931659Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"Instruction:\nPredict the next chess move in the sequence ['e4', 'e5', 'Nf3', 'Nc6']\n\nResponse:\nThe next move is 'd5'\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Interesting...it can predict past the 5th move, despite thats not in the training set...\n\nLets see how it plays a game on its own.","metadata":{}},{"cell_type":"code","source":"def play_game(moves, n=5):\n    move_list = moves\n    while len(move_list) < n:\n        prompt = template.format(\n            instruction=f\"Predict the next chess move in the sequence {str(move_list)}\",\n            response=\"\",\n        )\n\n        output = gemma_lm.generate(prompt, max_length=256)\n\n        move_list.append(output.split(' ')[-1].strip(\"'\"))\n\n        print(move_list)\n    \nplay_game(['Nf3', 'e6'], 10)","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:52:32.933609Z","iopub.execute_input":"2024-11-13T08:52:32.933883Z","iopub.status.idle":"2024-11-13T08:52:35.188793Z","shell.execute_reply.started":"2024-11-13T08:52:32.933855Z","shell.execute_reply":"2024-11-13T08:52:35.187939Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"['Nf3', 'e6', 'd5']\n['Nf3', 'e6', 'd5', 'Nc6']\n['Nf3', 'e6', 'd5', 'Nc6', 'd4']\n['Nf3', 'e6', 'd5', 'Nc6', 'd4', 'c5']\n['Nf3', 'e6', 'd5', 'Nc6', 'd4', 'c5', 'Nf6']\n['Nf3', 'e6', 'd5', 'Nc6', 'd4', 'c5', 'Nf6', 'e4']\n['Nf3', 'e6', 'd5', 'Nc6', 'd4', 'c5', 'Nf6', 'e4', 'cxd4']\n['Nf3', 'e6', 'd5', 'Nc6', 'd4', 'c5', 'Nf6', 'e4', 'cxd4', 'Nxd4']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Save LoRA weights\n\nWe only need to save the LoRA weights, which are very small compared to the model itsef.","metadata":{}},{"cell_type":"code","source":"# file_name = f\"gemma_2b_enV2-{tune_size}pgn\"\ngemma_lm.backbone.save_lora_weights(f\"/kaggle/working/{CFG.file_name}\")","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:52:35.189881Z","iopub.execute_input":"2024-11-13T08:52:35.190167Z","iopub.status.idle":"2024-11-13T08:52:35.256420Z","shell.execute_reply.started":"2024-11-13T08:52:35.190136Z","shell.execute_reply":"2024-11-13T08:52:35.255617Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"markdown","source":"Example of how to load the model with LoRA weights.","metadata":{}},{"cell_type":"code","source":"# # Load the model like this\n\n# # Do TPU and GPU stuff\n# # .... \n\n# # Define paths\n# LORA_WEIGHTS_PATH = f\"/kaggle/working/{model_name}.lora.h5\"\n\n# model = keras_nlp.models.GemmaCausalLM.from_preset('gemma_instruct_2b_en')\n\n# model.backbone.enable_lora(rank=4)\n\n# model.preprocessor.sequence_length = 512\n\n# # Load only the lora weights\n# model.backbone.load_lora_weights(LORA_WEIGHTS_PATH)\n\n# output = model.generate(\"blah blah I'm a prompt template with stuff in me\", max_length=512)\n","metadata":{"execution":{"iopub.status.busy":"2024-11-13T08:52:35.257379Z","iopub.execute_input":"2024-11-13T08:52:35.257627Z","iopub.status.idle":"2024-11-13T08:52:35.261317Z","shell.execute_reply.started":"2024-11-13T08:52:35.257601Z","shell.execute_reply":"2024-11-13T08:52:35.260601Z"},"trusted":true},"execution_count":41,"outputs":[]}]}