{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cfb36d0a",
   "metadata": {
    "papermill": {
     "duration": 0.011949,
     "end_time": "2024-10-06T18:31:09.472776",
     "exception": false,
     "start_time": "2024-10-06T18:31:09.460827",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Intro\n",
    "\n",
    "This notebook will be testing how well an LLM can play chess, by predicting the next best move in a given chess sequence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a6aee008",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:31:09.497821Z",
     "iopub.status.busy": "2024-10-06T18:31:09.497137Z",
     "iopub.status.idle": "2024-10-06T18:31:09.506993Z",
     "shell.execute_reply": "2024-10-06T18:31:09.506142Z"
    },
    "papermill": {
     "duration": 0.025195,
     "end_time": "2024-10-06T18:31:09.508964",
     "exception": false,
     "start_time": "2024-10-06T18:31:09.483769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Change model, tune size, and filename here\n",
    "tune_size = 1_00 # Number of pgn samples to use in tuning\n",
    "# model_name = \"gemma_2b_en\"\n",
    "model_name = \"gemma_instruct_2b_en\"\n",
    "file_name = f\"{model_name}-{tune_size}pgn\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "600dac04",
   "metadata": {
    "papermill": {
     "duration": 0.010698,
     "end_time": "2024-10-06T18:31:09.530508",
     "exception": false,
     "start_time": "2024-10-06T18:31:09.519810",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Dataset\n",
    "\n",
    "The dataset used if a modified version of the original, where I have added a column for sequences of moves for each row/PGN."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3004d9c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:31:09.553506Z",
     "iopub.status.busy": "2024-10-06T18:31:09.553211Z",
     "iopub.status.idle": "2024-10-06T18:31:13.732894Z",
     "shell.execute_reply": "2024-10-06T18:31:13.731923Z"
    },
    "papermill": {
     "duration": 4.193649,
     "end_time": "2024-10-06T18:31:13.734955",
     "exception": false,
     "start_time": "2024-10-06T18:31:09.541306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>white_username</th>\n",
       "      <th>black_username</th>\n",
       "      <th>white_id</th>\n",
       "      <th>black_id</th>\n",
       "      <th>white_rating</th>\n",
       "      <th>black_rating</th>\n",
       "      <th>white_result</th>\n",
       "      <th>black_result</th>\n",
       "      <th>time_class</th>\n",
       "      <th>time_control</th>\n",
       "      <th>rules</th>\n",
       "      <th>rated</th>\n",
       "      <th>fen</th>\n",
       "      <th>pgn</th>\n",
       "      <th>move_seq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>miniman2804</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/miniman2804</td>\n",
       "      <td>1708</td>\n",
       "      <td>1608</td>\n",
       "      <td>win</td>\n",
       "      <td>checkmated</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/259200</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r2r4/p2p1p1p/b6R/n1p1kp2/2P2P2/3BP3/PP5P/4K2R ...</td>\n",
       "      <td>[Event \"Enjoyable games 2 - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(d4, Nf6, c4, e6, Nc3, Bb4, Qb3, Bxc3+, Qxc3, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>koltcho69</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/koltcho69</td>\n",
       "      <td>1726</td>\n",
       "      <td>1577</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>8/5Q1k/4n1pp/8/7P/2N2b2/PP3P2/5K2 b - - 1 33</td>\n",
       "      <td>[Event \"Rapid Rats - Board 5\"]\\n[Site \"Chess.c...</td>\n",
       "      <td>(e4, e5, Nf3, Nc6, Bc4, Bc5, c3, a6, d4, exd4,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>enhmandah</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/enhmandah</td>\n",
       "      <td>1727</td>\n",
       "      <td>842</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>rn1q1b1r/kb2p1pp/2p5/p1Q5/N1BP2n1/4PN2/1P3PPP/...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(d4, d5, e3, c6, c4, dxc4, Bxc4, b5, Bb3, a5, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>enhmandah</td>\n",
       "      <td>-Amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/enhmandah</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>819</td>\n",
       "      <td>1727</td>\n",
       "      <td>checkmated</td>\n",
       "      <td>win</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r3kb1r/pp3ppp/3p1n2/2pKp3/P3P3/1P6/4qP1P/QNB5 ...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(e4, c5, b3, Nc6, a4, d6, Bb5, Bd7, Qf3, Nd4, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-Amos-</td>\n",
       "      <td>Shalllow-Blue</td>\n",
       "      <td>https://api.chess.com/pub/player/-amos-</td>\n",
       "      <td>https://api.chess.com/pub/player/shalllow-blue</td>\n",
       "      <td>1729</td>\n",
       "      <td>1116</td>\n",
       "      <td>win</td>\n",
       "      <td>resigned</td>\n",
       "      <td>daily</td>\n",
       "      <td>1/172800</td>\n",
       "      <td>chess</td>\n",
       "      <td>True</td>\n",
       "      <td>r3b2r/pp6/2pPpR1k/4n3/2P3Q1/3B4/PP4PP/R5K1 b -...</td>\n",
       "      <td>[Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...</td>\n",
       "      <td>(d4, e6, c4, Qf6, Nf3, d6, Bg5, Qg6, Nc3, c6, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  white_username black_username                                    white_id  \\\n",
       "0         -Amos-    miniman2804     https://api.chess.com/pub/player/-amos-   \n",
       "1         -Amos-      koltcho69     https://api.chess.com/pub/player/-amos-   \n",
       "2         -Amos-      enhmandah     https://api.chess.com/pub/player/-amos-   \n",
       "3      enhmandah         -Amos-  https://api.chess.com/pub/player/enhmandah   \n",
       "4         -Amos-  Shalllow-Blue     https://api.chess.com/pub/player/-amos-   \n",
       "\n",
       "                                         black_id  white_rating  black_rating  \\\n",
       "0    https://api.chess.com/pub/player/miniman2804          1708          1608   \n",
       "1      https://api.chess.com/pub/player/koltcho69          1726          1577   \n",
       "2      https://api.chess.com/pub/player/enhmandah          1727           842   \n",
       "3         https://api.chess.com/pub/player/-amos-           819          1727   \n",
       "4  https://api.chess.com/pub/player/shalllow-blue          1729          1116   \n",
       "\n",
       "  white_result black_result time_class time_control  rules  rated  \\\n",
       "0          win   checkmated      daily     1/259200  chess   True   \n",
       "1          win     resigned      daily     1/172800  chess   True   \n",
       "2          win     resigned      daily     1/172800  chess   True   \n",
       "3   checkmated          win      daily     1/172800  chess   True   \n",
       "4          win     resigned      daily     1/172800  chess   True   \n",
       "\n",
       "                                                 fen  \\\n",
       "0  r2r4/p2p1p1p/b6R/n1p1kp2/2P2P2/3BP3/PP5P/4K2R ...   \n",
       "1       8/5Q1k/4n1pp/8/7P/2N2b2/PP3P2/5K2 b - - 1 33   \n",
       "2  rn1q1b1r/kb2p1pp/2p5/p1Q5/N1BP2n1/4PN2/1P3PPP/...   \n",
       "3  r3kb1r/pp3ppp/3p1n2/2pKp3/P3P3/1P6/4qP1P/QNB5 ...   \n",
       "4  r3b2r/pp6/2pPpR1k/4n3/2P3Q1/3B4/PP4PP/R5K1 b -...   \n",
       "\n",
       "                                                 pgn  \\\n",
       "0  [Event \"Enjoyable games 2 - Round 1\"]\\n[Site \"...   \n",
       "1  [Event \"Rapid Rats - Board 5\"]\\n[Site \"Chess.c...   \n",
       "2  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...   \n",
       "3  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...   \n",
       "4  [Event \"CHESS BOARD CLASH - Round 1\"]\\n[Site \"...   \n",
       "\n",
       "                                            move_seq  \n",
       "0  (d4, Nf6, c4, e6, Nc3, Bb4, Qb3, Bxc3+, Qxc3, ...  \n",
       "1  (e4, e5, Nf3, Nc6, Bc4, Bc5, c3, a6, d4, exd4,...  \n",
       "2  (d4, d5, e3, c6, c4, dxc4, Bxc4, b5, Bb3, a5, ...  \n",
       "3  (e4, c5, b3, Nc6, a4, d6, Bb5, Bd7, Qf3, Nd4, ...  \n",
       "4  (d4, e6, c4, Qf6, Nf3, d6, Bg5, Qg6, Nc3, c6, ...  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df0 = pd.read_pickle('/kaggle/input/60k-chess-clean/club_games_data.pkl')\n",
    "\n",
    "df0.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6b93d12",
   "metadata": {
    "papermill": {
     "duration": 0.011068,
     "end_time": "2024-10-06T18:31:13.758421",
     "exception": false,
     "start_time": "2024-10-06T18:31:13.747353",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will only use valid 'chess' rule based games for training, we exclude wild formats."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "92d5be82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:31:13.782508Z",
     "iopub.status.busy": "2024-10-06T18:31:13.781668Z",
     "iopub.status.idle": "2024-10-06T18:31:13.882852Z",
     "shell.execute_reply": "2024-10-06T18:31:13.882000Z"
    },
    "papermill": {
     "duration": 0.115949,
     "end_time": "2024-10-06T18:31:13.885447",
     "exception": false,
     "start_time": "2024-10-06T18:31:13.769498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 66879 entries, 0 to 66878\n",
      "Data columns (total 15 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   white_username  66879 non-null  object\n",
      " 1   black_username  66879 non-null  object\n",
      " 2   white_id        66879 non-null  object\n",
      " 3   black_id        66879 non-null  object\n",
      " 4   white_rating    66879 non-null  int64 \n",
      " 5   black_rating    66879 non-null  int64 \n",
      " 6   white_result    66879 non-null  object\n",
      " 7   black_result    66879 non-null  object\n",
      " 8   time_class      66879 non-null  object\n",
      " 9   time_control    66879 non-null  object\n",
      " 10  rules           66879 non-null  object\n",
      " 11  rated           66879 non-null  bool  \n",
      " 12  fen             66879 non-null  object\n",
      " 13  pgn             66879 non-null  object\n",
      " 14  move_seq        65270 non-null  object\n",
      "dtypes: bool(1), int64(2), object(12)\n",
      "memory usage: 7.2+ MB\n"
     ]
    }
   ],
   "source": [
    "df0.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ea21d0cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:31:13.910250Z",
     "iopub.status.busy": "2024-10-06T18:31:13.909917Z",
     "iopub.status.idle": "2024-10-06T18:31:13.919959Z",
     "shell.execute_reply": "2024-10-06T18:31:13.919111Z"
    },
    "papermill": {
     "duration": 0.024978,
     "end_time": "2024-10-06T18:31:13.922483",
     "exception": false,
     "start_time": "2024-10-06T18:31:13.897505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['chess', 'chess960', 'threecheck', 'crazyhouse', 'kingofthehill'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df0['rules'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "22b8e089",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:31:13.952024Z",
     "iopub.status.busy": "2024-10-06T18:31:13.951270Z",
     "iopub.status.idle": "2024-10-06T18:31:14.196099Z",
     "shell.execute_reply": "2024-10-06T18:31:14.195228Z"
    },
    "papermill": {
     "duration": 0.261845,
     "end_time": "2024-10-06T18:31:14.198406",
     "exception": false,
     "start_time": "2024-10-06T18:31:13.936561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 65034 entries, 0 to 66878\n",
      "Data columns (total 15 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   white_username  65034 non-null  object\n",
      " 1   black_username  65034 non-null  object\n",
      " 2   white_id        65034 non-null  object\n",
      " 3   black_id        65034 non-null  object\n",
      " 4   white_rating    65034 non-null  int64 \n",
      " 5   black_rating    65034 non-null  int64 \n",
      " 6   white_result    65034 non-null  object\n",
      " 7   black_result    65034 non-null  object\n",
      " 8   time_class      65034 non-null  object\n",
      " 9   time_control    65034 non-null  object\n",
      " 10  rules           65034 non-null  object\n",
      " 11  rated           65034 non-null  bool  \n",
      " 12  fen             65034 non-null  object\n",
      " 13  pgn             65034 non-null  object\n",
      " 14  move_seq        65034 non-null  object\n",
      "dtypes: bool(1), int64(2), object(12)\n",
      "memory usage: 7.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df = df0[df0['rules']=='chess'].dropna()\n",
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71670cc8",
   "metadata": {
    "papermill": {
     "duration": 0.011694,
     "end_time": "2024-10-06T18:31:14.221885",
     "exception": false,
     "start_time": "2024-10-06T18:31:14.210191",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Base Chess Knowledge\n",
    "\n",
    "Let's first examine how a base model generates a response about chess content."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0009fdab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:31:14.255873Z",
     "iopub.status.busy": "2024-10-06T18:31:14.255422Z",
     "iopub.status.idle": "2024-10-06T18:31:40.188452Z",
     "shell.execute_reply": "2024-10-06T18:31:40.187167Z"
    },
    "papermill": {
     "duration": 25.953388,
     "end_time": "2024-10-06T18:31:40.190924",
     "exception": false,
     "start_time": "2024-10-06T18:31:14.237536",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Install Keras\n",
    "!pip install -q -U keras-nlp\n",
    "!pip install -q -U keras>=3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "735f9d38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:31:40.216687Z",
     "iopub.status.busy": "2024-10-06T18:31:40.215875Z",
     "iopub.status.idle": "2024-10-06T18:31:40.220807Z",
     "shell.execute_reply": "2024-10-06T18:31:40.219975Z"
    },
    "papermill": {
     "duration": 0.020047,
     "end_time": "2024-10-06T18:31:40.222766",
     "exception": false,
     "start_time": "2024-10-06T18:31:40.202719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "os.environ[\"KERAS_BACKEND\"] = \"jax\"  # Or \"torch\" or \"tensorflow\".\n",
    "# Avoid memory fragmentation on JAX backend.\n",
    "os.environ[\"XLA_PYTHON_CLIENT_MEM_FRACTION\"]=\"1.00\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "00d93ffb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:31:40.247076Z",
     "iopub.status.busy": "2024-10-06T18:31:40.246726Z",
     "iopub.status.idle": "2024-10-06T18:32:46.739687Z",
     "shell.execute_reply": "2024-10-06T18:32:46.738770Z"
    },
    "papermill": {
     "duration": 66.507396,
     "end_time": "2024-10-06T18:32:46.741629",
     "exception": false,
     "start_time": "2024-10-06T18:31:40.234233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "normalizer.cc(51) LOG(INFO) precompiled_charsmap is empty. use identity normalization.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                                                  </span>┃<span style=\"font-weight: bold\">                                   Config </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                              │                      Vocab size: <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                                                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                  Config\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                              │                      Vocab size: \u001b[38;5;34m256,000\u001b[0m │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">524,288,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)        │   \u001b[38;5;34m2,506,172,416\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n",
       "│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m524,288,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n",
       "│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import keras\n",
    "import keras_nlp\n",
    "\n",
    "# Load the model\n",
    "gemma_lm = keras_nlp.models.GemmaCausalLM.from_preset(model_name)\n",
    "gemma_lm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e2c1e8a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:32:46.769431Z",
     "iopub.status.busy": "2024-10-06T18:32:46.768862Z",
     "iopub.status.idle": "2024-10-06T18:32:56.654293Z",
     "shell.execute_reply": "2024-10-06T18:32:56.653195Z"
    },
    "papermill": {
     "duration": 9.90122,
     "end_time": "2024-10-06T18:32:56.656425",
     "exception": false,
     "start_time": "2024-10-06T18:32:46.755205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "List some chess moves in PGN format:\n",
      "\n",
      "Response:\n",
      "1. e4 e5 2. Nf3 Nc6 3. d4 a6 4. c4 a5 5. Nxd4 Nxd4 6. Bg5+ Kf8 7. Bxf6+ Kxf6 8. O-O\n"
     ]
    }
   ],
   "source": [
    "# Test some example prompts\n",
    "template = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n",
    "\n",
    "prompt = template.format(\n",
    "    instruction=\"List some chess moves in PGN format:\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "edd8802a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:32:56.683787Z",
     "iopub.status.busy": "2024-10-06T18:32:56.683467Z",
     "iopub.status.idle": "2024-10-06T18:33:01.436245Z",
     "shell.execute_reply": "2024-10-06T18:33:01.435156Z"
    },
    "papermill": {
     "duration": 4.768843,
     "end_time": "2024-10-06T18:33:01.438467",
     "exception": false,
     "start_time": "2024-10-06T18:32:56.669624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Explain this chess sequence: 1. e4 e5 2. Nf3 c6 3. Nc3 d6 4. d4 exd4 5. Qxd4 Nf6 6. Bg5 Nbd7\n",
      "\n",
      "Response:\n",
      "Sure, here's the explanation of the chess sequence you provided:\n",
      "\n",
      "1. e4 e5\n",
      "2. Nf3 c6\n",
      "3. Nc3 d6\n",
      "4. d4 exd4\n",
      "5. Qxd4 Nf6\n",
      "6. Bg5 Nbd7\n",
      "\n",
      "This sequence demonstrates the beauty of positional chess. It showcases the interplay between different pieces and how they move to create a powerful and dynamic position.\n",
      "\n",
      "Here's a breakdown of the moves:\n",
      "\n",
      "* **1. e4 e5:** This is the opening move, where the white knight moves to e5, preparing to attack the black king.\n",
      "* **2. Nf3 c6:** The black knight moves to c6, anticipating the white knight's attack on e5.\n",
      "* **3. Nc3 d6:** The black bishop moves to d6, creating a open file for the white queen to develop.\n",
      "* **\n"
     ]
    }
   ],
   "source": [
    "# Test some example prompts\n",
    "template = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n",
    "\n",
    "prompt = template.format(\n",
    "    instruction=\"Explain this chess sequence: 1. e4 e5 2. Nf3 c6 3. Nc3 d6 4. d4 exd4 5. Qxd4 Nf6 6. Bg5 Nbd7\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a9df1188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:01.466194Z",
     "iopub.status.busy": "2024-10-06T18:33:01.465397Z",
     "iopub.status.idle": "2024-10-06T18:33:02.728556Z",
     "shell.execute_reply": "2024-10-06T18:33:02.726833Z"
    },
    "papermill": {
     "duration": 1.279967,
     "end_time": "2024-10-06T18:33:02.731561",
     "exception": false,
     "start_time": "2024-10-06T18:33:01.451594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "What is the next chess move in the PGN: 1.e4 e5 2.Nf3 c6 3.Nc3 d6\n",
      "\n",
      "Response:\n",
      "The next chess move would be 4.d5, which would lead to the following position:\n",
      "\n",
      "1.e4 e5 2.Nf3 c6 3.Nc3 d6 4.d5\n"
     ]
    }
   ],
   "source": [
    "# Test some example prompts\n",
    "template = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n",
    "\n",
    "prompt = template.format(\n",
    "    instruction=\"What is the next chess move in the PGN: 1.e4 e5 2.Nf3 c6 3.Nc3 d6\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd07a5c5",
   "metadata": {
    "papermill": {
     "duration": 0.014952,
     "end_time": "2024-10-06T18:33:02.765924",
     "exception": false,
     "start_time": "2024-10-06T18:33:02.750972",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train & Test splits\n",
    "\n",
    "Dataset to train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6267cbb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:02.802182Z",
     "iopub.status.busy": "2024-10-06T18:33:02.799974Z",
     "iopub.status.idle": "2024-10-06T18:33:03.176951Z",
     "shell.execute_reply": "2024-10-06T18:33:03.175985Z"
    },
    "papermill": {
     "duration": 0.396384,
     "end_time": "2024-10-06T18:33:03.179425",
     "exception": false,
     "start_time": "2024-10-06T18:33:02.783041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['white_rating'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a77e17c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:03.211624Z",
     "iopub.status.busy": "2024-10-06T18:33:03.210778Z",
     "iopub.status.idle": "2024-10-06T18:33:03.498428Z",
     "shell.execute_reply": "2024-10-06T18:33:03.497478Z"
    },
    "papermill": {
     "duration": 0.304859,
     "end_time": "2024-10-06T18:33:03.500963",
     "exception": false,
     "start_time": "2024-10-06T18:33:03.196104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['black_rating'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "64bd9a86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:03.534960Z",
     "iopub.status.busy": "2024-10-06T18:33:03.534026Z",
     "iopub.status.idle": "2024-10-06T18:33:04.560584Z",
     "shell.execute_reply": "2024-10-06T18:33:04.559560Z"
    },
    "papermill": {
     "duration": 1.044705,
     "end_time": "2024-10-06T18:33:04.563006",
     "exception": false,
     "start_time": "2024-10-06T18:33:03.518301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# tune_size = 1_000 # Number of pgn samples to use in tuning\n",
    "min_elo = 1_000 # I want the model to tune on the better half of players\n",
    "\n",
    "df = df[df['white_rating']>=min_elo]\n",
    "\n",
    "X = df.drop('white_rating', axis=1)\n",
    "y = df['white_rating']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=tune_size, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7b5175e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:04.593132Z",
     "iopub.status.busy": "2024-10-06T18:33:04.592430Z",
     "iopub.status.idle": "2024-10-06T18:33:04.604861Z",
     "shell.execute_reply": "2024-10-06T18:33:04.603912Z"
    },
    "papermill": {
     "duration": 0.029534,
     "end_time": "2024-10-06T18:33:04.606963",
     "exception": false,
     "start_time": "2024-10-06T18:33:04.577429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 100 entries, 7949 to 22742\n",
      "Data columns (total 14 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   white_username  100 non-null    object\n",
      " 1   black_username  100 non-null    object\n",
      " 2   white_id        100 non-null    object\n",
      " 3   black_id        100 non-null    object\n",
      " 4   black_rating    100 non-null    int64 \n",
      " 5   white_result    100 non-null    object\n",
      " 6   black_result    100 non-null    object\n",
      " 7   time_class      100 non-null    object\n",
      " 8   time_control    100 non-null    object\n",
      " 9   rules           100 non-null    object\n",
      " 10  rated           100 non-null    bool  \n",
      " 11  fen             100 non-null    object\n",
      " 12  pgn             100 non-null    object\n",
      " 13  move_seq        100 non-null    object\n",
      "dtypes: bool(1), int64(1), object(12)\n",
      "memory usage: 11.0+ KB\n"
     ]
    }
   ],
   "source": [
    "X_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "78d463be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:04.636546Z",
     "iopub.status.busy": "2024-10-06T18:33:04.636232Z",
     "iopub.status.idle": "2024-10-06T18:33:04.918591Z",
     "shell.execute_reply": "2024-10-06T18:33:04.917641Z"
    },
    "papermill": {
     "duration": 0.299478,
     "end_time": "2024-10-06T18:33:04.920774",
     "exception": false,
     "start_time": "2024-10-06T18:33:04.621296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_train['black_rating'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "eabc4bc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:04.952012Z",
     "iopub.status.busy": "2024-10-06T18:33:04.951624Z",
     "iopub.status.idle": "2024-10-06T18:33:04.960433Z",
     "shell.execute_reply": "2024-10-06T18:33:04.959493Z"
    },
    "papermill": {
     "duration": 0.026575,
     "end_time": "2024-10-06T18:33:04.962408",
     "exception": false,
     "start_time": "2024-10-06T18:33:04.935833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7949    (d4, e6, Nf3, f6, e4, c5, Be3, b6, Bb5, a6, Ba...\n",
       "3607    (b3, e5, f3, d5, e3, Nf6, Bb2, Nc6, Ne2, Bc5, ...\n",
       "2461    (e4, e5, Nf3, Qf6, a3, Bc5, Qe2, d6, d3, Bg4, ...\n",
       "Name: move_seq, dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train['move_seq'][:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2fb296f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:04.993566Z",
     "iopub.status.busy": "2024-10-06T18:33:04.992799Z",
     "iopub.status.idle": "2024-10-06T18:33:04.997714Z",
     "shell.execute_reply": "2024-10-06T18:33:04.996821Z"
    },
    "papermill": {
     "duration": 0.022765,
     "end_time": "2024-10-06T18:33:04.999921",
     "exception": false,
     "start_time": "2024-10-06T18:33:04.977156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('d4', 'e6', 'Nf3', 'f6', 'e4', 'c5', 'Be3', 'b6', 'Bb5', 'a6', 'Ba4', 'b5', 'dxc5', 'bxa4', 'O-O', 'Nc6', 'c3', 'Qa5', 'Na3', 'Bxc5', 'Nc4', 'Qb5', 'Bxc5', 'Qxc5', 'Qe2', 'Nge7', 'Rfd1', 'O-O', 'b4', 'Qa7', 'a3', 'd5', 'Nd6', 'dxe4', 'Qxe4', 'Nd5', 'Nxc8', 'Raxc8', 'Qxe6+', 'Kh8', 'Rxd5', 'Qb7', 'Rad1', 'Nd8', 'Qg4', 'Nf7', 'Nd4', 'Qxd5', 'Ne6', 'Qb3', 'Qxg7#')\n"
     ]
    }
   ],
   "source": [
    "print(X_train['move_seq'].iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ee535886",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:05.030774Z",
     "iopub.status.busy": "2024-10-06T18:33:05.030101Z",
     "iopub.status.idle": "2024-10-06T18:33:05.036749Z",
     "shell.execute_reply": "2024-10-06T18:33:05.035850Z"
    },
    "papermill": {
     "duration": 0.024136,
     "end_time": "2024-10-06T18:33:05.038757",
     "exception": false,
     "start_time": "2024-10-06T18:33:05.014621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('d4',), ('d4', 'e6'), ('d4', 'e6', 'Nf3')]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[X_train['move_seq'].iloc[0][:t] for t in range(1,3+1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d65f42f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:05.069598Z",
     "iopub.status.busy": "2024-10-06T18:33:05.069076Z",
     "iopub.status.idle": "2024-10-06T18:33:05.075214Z",
     "shell.execute_reply": "2024-10-06T18:33:05.074398Z"
    },
    "papermill": {
     "duration": 0.023692,
     "end_time": "2024-10-06T18:33:05.077114",
     "exception": false,
     "start_time": "2024-10-06T18:33:05.053422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('d4',), ('d4', 'e6'), ('d4', 'e6')]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[('d4', 'e6')[:t] for t in range(1,3+1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "84c39689",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:05.109005Z",
     "iopub.status.busy": "2024-10-06T18:33:05.108684Z",
     "iopub.status.idle": "2024-10-06T18:33:05.117129Z",
     "shell.execute_reply": "2024-10-06T18:33:05.116146Z"
    },
    "papermill": {
     "duration": 0.027421,
     "end_time": "2024-10-06T18:33:05.119427",
     "exception": false,
     "start_time": "2024-10-06T18:33:05.092006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('d4',),\n",
       " ('d4', 'e6'),\n",
       " ('d4', 'e6', 'Nf3'),\n",
       " ('b3',),\n",
       " ('b3', 'e5'),\n",
       " ('b3', 'e5', 'f3'),\n",
       " ('e4',),\n",
       " ('e4', 'e5'),\n",
       " ('e4', 'e5', 'Nf3'),\n",
       " ('e4',),\n",
       " ('e4', 'e6'),\n",
       " ('e4', 'e6', 'Nf3'),\n",
       " ('d4',),\n",
       " ('d4', 'd6'),\n",
       " ('d4', 'd6', 'c4')]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def seq_set(seq_data, n):\n",
    "    # List of all sequences of length < n in a given dataset of moves\n",
    "    sequences = []\n",
    "    \n",
    "    for seq in seq_data:\n",
    "        max_n = n if len(seq) >= n else len(seq)\n",
    "        sequences.extend(seq[:t] for t in range(1,max_n+1))\n",
    "\n",
    "    return sequences\n",
    "        \n",
    "seq_set(X_train['move_seq'][:5], 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "10f3a19e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:05.152854Z",
     "iopub.status.busy": "2024-10-06T18:33:05.152021Z",
     "iopub.status.idle": "2024-10-06T18:33:05.157149Z",
     "shell.execute_reply": "2024-10-06T18:33:05.156244Z"
    },
    "papermill": {
     "duration": 0.023472,
     "end_time": "2024-10-06T18:33:05.159038",
     "exception": false,
     "start_time": "2024-10-06T18:33:05.135566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_seq = seq_set(X_train['move_seq'], 6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "465fca6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:05.190698Z",
     "iopub.status.busy": "2024-10-06T18:33:05.189857Z",
     "iopub.status.idle": "2024-10-06T18:33:05.194636Z",
     "shell.execute_reply": "2024-10-06T18:33:05.193665Z"
    },
    "papermill": {
     "duration": 0.022562,
     "end_time": "2024-10-06T18:33:05.196554",
     "exception": false,
     "start_time": "2024-10-06T18:33:05.173992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100\n",
      "597\n"
     ]
    }
   ],
   "source": [
    "print(len(X_train['move_seq']))\n",
    "print(len(all_seq))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9c305034",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:05.227596Z",
     "iopub.status.busy": "2024-10-06T18:33:05.227310Z",
     "iopub.status.idle": "2024-10-06T18:33:05.236110Z",
     "shell.execute_reply": "2024-10-06T18:33:05.235162Z"
    },
    "papermill": {
     "duration": 0.026849,
     "end_time": "2024-10-06T18:33:05.238430",
     "exception": false,
     "start_time": "2024-10-06T18:33:05.211581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('d4',), ('d4', 'e6'), ('d4', 'e6', 'Nf3')]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[\"Instruction:\\nPredict the next chess move in the sequence ['d4']\\n\\nResponse:\\nThe next move is 'e6'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['d4', 'e6']\\n\\nResponse:\\nThe next move is 'Nf3'\"]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def parse_seq(seq_list):\n",
    "    # Parse seqs list into training list\n",
    "    template = \"Instruction:\\n{instruction}\\n\\nResponse:\\n{response}\"\n",
    "    data = []\n",
    "    for seq in seq_list:\n",
    "        if len(seq) <= 1:\n",
    "            continue\n",
    "        else:\n",
    "            prev_moves = \"Predict the next chess move in the sequence \" + str(list(seq[:-1]))\n",
    "            best_move = f\"The next move is '{seq[-1]}'\"\n",
    "\n",
    "            formated_seq = template.format(instruction=prev_moves,response=best_move)\n",
    "            data.append(formated_seq)\n",
    "            # print(formated_seq)\n",
    "    return data\n",
    "\n",
    "print(all_seq[:3])\n",
    "parse_seq(all_seq[:3])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49de4432",
   "metadata": {
    "papermill": {
     "duration": 0.014971,
     "end_time": "2024-10-06T18:33:05.268626",
     "exception": false,
     "start_time": "2024-10-06T18:33:05.253655",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Inference before tuning\n",
    "\n",
    "Lets test the base model on a sample from the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d73614cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:05.300311Z",
     "iopub.status.busy": "2024-10-06T18:33:05.300030Z",
     "iopub.status.idle": "2024-10-06T18:33:14.213736Z",
     "shell.execute_reply": "2024-10-06T18:33:14.212667Z"
    },
    "papermill": {
     "duration": 8.932216,
     "end_time": "2024-10-06T18:33:14.216073",
     "exception": false,
     "start_time": "2024-10-06T18:33:05.283857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Predict the next chess move in the sequence ['d4', 'Nf6', 'c4', 'e6']\n",
      "\n",
      "Response:\n",
      "The next move would be 'd5'.\n"
     ]
    }
   ],
   "source": [
    "prompt = template.format(\n",
    "    instruction=\"Predict the next chess move in the sequence ['d4', 'Nf6', 'c4', 'e6']\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=500))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8709d66d",
   "metadata": {
    "papermill": {
     "duration": 0.015303,
     "end_time": "2024-10-06T18:33:14.247323",
     "exception": false,
     "start_time": "2024-10-06T18:33:14.232020",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## LoRA\n",
    "\n",
    "With the new formated dataset we will fine tune the model with LoRA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a2701afe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:14.279339Z",
     "iopub.status.busy": "2024-10-06T18:33:14.279002Z",
     "iopub.status.idle": "2024-10-06T18:33:14.285372Z",
     "shell.execute_reply": "2024-10-06T18:33:14.284528Z"
    },
    "papermill": {
     "duration": 0.025109,
     "end_time": "2024-10-06T18:33:14.287687",
     "exception": false,
     "start_time": "2024-10-06T18:33:14.262578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "497\n"
     ]
    }
   ],
   "source": [
    "train_set = parse_seq(all_seq)\n",
    "\n",
    "print(len(train_set))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "46aa84cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:14.319776Z",
     "iopub.status.busy": "2024-10-06T18:33:14.319480Z",
     "iopub.status.idle": "2024-10-06T18:33:14.325465Z",
     "shell.execute_reply": "2024-10-06T18:33:14.324562Z"
    },
    "papermill": {
     "duration": 0.024183,
     "end_time": "2024-10-06T18:33:14.327364",
     "exception": false,
     "start_time": "2024-10-06T18:33:14.303181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[\"Instruction:\\nPredict the next chess move in the sequence ['d4']\\n\\nResponse:\\nThe next move is 'e6'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['d4', 'e6']\\n\\nResponse:\\nThe next move is 'Nf3'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['d4', 'e6', 'Nf3']\\n\\nResponse:\\nThe next move is 'f6'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['d4', 'e6', 'Nf3', 'f6']\\n\\nResponse:\\nThe next move is 'e4'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['d4', 'e6', 'Nf3', 'f6', 'e4']\\n\\nResponse:\\nThe next move is 'c5'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['b3']\\n\\nResponse:\\nThe next move is 'e5'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['b3', 'e5']\\n\\nResponse:\\nThe next move is 'f3'\",\n",
       " \"Instruction:\\nPredict the next chess move in the sequence ['b3', 'e5', 'f3']\\n\\nResponse:\\nThe next move is 'd5'\"]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_set[:8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a03bead9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:14.360030Z",
     "iopub.status.busy": "2024-10-06T18:33:14.359704Z",
     "iopub.status.idle": "2024-10-06T18:33:14.624768Z",
     "shell.execute_reply": "2024-10-06T18:33:14.623832Z"
    },
    "papermill": {
     "duration": 0.283875,
     "end_time": "2024-10-06T18:33:14.626858",
     "exception": false,
     "start_time": "2024-10-06T18:33:14.342983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"gemma_causal_lm_preprocessor\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mPreprocessor: \"gemma_causal_lm_preprocessor\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                                                  </span>┃<span style=\"font-weight: bold\">                                   Config </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaTokenizer</span>)                              │                      Vocab size: <span style=\"color: #00af00; text-decoration-color: #00af00\">256,000</span> │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                                                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                  Config\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ gemma_tokenizer (\u001b[38;5;33mGemmaTokenizer\u001b[0m)                              │                      Vocab size: \u001b[38;5;34m256,000\u001b[0m │\n",
       "└───────────────────────────────────────────────────────────────┴──────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"gemma_causal_lm\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"gemma_causal_lm\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)        │   <span style=\"color: #00af00; text-decoration-color: #00af00\">2,507,536,384</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GemmaBackbone</span>)               │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256000</span>)      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">524,288,000</span> │ gemma_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReversibleEmbedding</span>)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ gemma_backbone                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)        │   \u001b[38;5;34m2,507,536,384\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n",
       "│ (\u001b[38;5;33mGemmaBackbone\u001b[0m)               │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n",
       "│ token_embedding               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256000\u001b[0m)      │     \u001b[38;5;34m524,288,000\u001b[0m │ gemma_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n",
       "│ (\u001b[38;5;33mReversibleEmbedding\u001b[0m)         │                           │                 │                            │\n",
       "└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,507,536,384</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,507,536,384\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,363,968</span> (5.20 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,363,968\u001b[0m (5.20 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,506,172,416</span> (9.34 GB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m2,506,172,416\u001b[0m (9.34 GB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Enable LoRA for the model and set the LoRA rank to 4.\n",
    "gemma_lm.backbone.enable_lora(rank=4)\n",
    "gemma_lm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "bcc0e3ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:33:14.662356Z",
     "iopub.status.busy": "2024-10-06T18:33:14.662004Z",
     "iopub.status.idle": "2024-10-06T18:39:38.419547Z",
     "shell.execute_reply": "2024-10-06T18:39:38.418646Z"
    },
    "papermill": {
     "duration": 383.777515,
     "end_time": "2024-10-06T18:39:38.421528",
     "exception": false,
     "start_time": "2024-10-06T18:33:14.644013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m497/497\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m382s\u001b[0m 730ms/step - loss: 0.1751 - sparse_categorical_accuracy: 0.7029\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x79f31c194520>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Limit the input sequence length to 512 (to control memory usage).\n",
    "gemma_lm.preprocessor.sequence_length = 512\n",
    "\n",
    "# Use AdamW (a common optimizer for transformer models).\n",
    "optimizer = keras.optimizers.AdamW(\n",
    "    learning_rate=5e-5,\n",
    "    weight_decay=0.01,\n",
    ")\n",
    "# Exclude layernorm and bias terms from decay.\n",
    "optimizer.exclude_from_weight_decay(var_names=[\"bias\", \"scale\"])\n",
    "\n",
    "gemma_lm.compile(\n",
    "    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
    "    optimizer=optimizer,\n",
    "    weighted_metrics=[keras.metrics.SparseCategoricalAccuracy()],\n",
    ")\n",
    "\n",
    "# Fit with train dataset\n",
    "# 100 pgns, 318s\n",
    "gemma_lm.fit(train_set, epochs=1, batch_size=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e418f6b",
   "metadata": {
    "papermill": {
     "duration": 0.029673,
     "end_time": "2024-10-06T18:39:38.481912",
     "exception": false,
     "start_time": "2024-10-06T18:39:38.452239",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Inference after fine tuning\n",
    "\n",
    "Now we will run the same promp as before and examine the improvement after LoRA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ff7e874c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:39:38.543484Z",
     "iopub.status.busy": "2024-10-06T18:39:38.542585Z",
     "iopub.status.idle": "2024-10-06T18:39:46.427852Z",
     "shell.execute_reply": "2024-10-06T18:39:46.426709Z"
    },
    "papermill": {
     "duration": 7.918202,
     "end_time": "2024-10-06T18:39:46.429972",
     "exception": false,
     "start_time": "2024-10-06T18:39:38.511770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5']\n",
      "\n",
      "Response:\n",
      "The next move is 'Nf3'\n"
     ]
    }
   ],
   "source": [
    "# On a new sample\n",
    "prompt = template.format(\n",
    "    instruction=\"Predict the next chess move in the sequence ['e4', 'e5']\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e29fe90a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:39:46.492274Z",
     "iopub.status.busy": "2024-10-06T18:39:46.491558Z",
     "iopub.status.idle": "2024-10-06T18:39:46.883326Z",
     "shell.execute_reply": "2024-10-06T18:39:46.882345Z"
    },
    "papermill": {
     "duration": 0.424826,
     "end_time": "2024-10-06T18:39:46.885451",
     "exception": false,
     "start_time": "2024-10-06T18:39:46.460625",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5', 'Nf3']\n",
      "\n",
      "Response:\n",
      "The next move is 'Nc6'\n"
     ]
    }
   ],
   "source": [
    "# On a new sample\n",
    "prompt = template.format(\n",
    "    instruction=\"Predict the next chess move in the sequence ['e4', 'e5', 'Nf3']\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d9c4994b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:39:46.948413Z",
     "iopub.status.busy": "2024-10-06T18:39:46.947682Z",
     "iopub.status.idle": "2024-10-06T18:39:47.339525Z",
     "shell.execute_reply": "2024-10-06T18:39:47.338485Z"
    },
    "papermill": {
     "duration": 0.425399,
     "end_time": "2024-10-06T18:39:47.341766",
     "exception": false,
     "start_time": "2024-10-06T18:39:46.916367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instruction:\n",
      "Predict the next chess move in the sequence ['e4', 'e5', 'Nf3', 'Nc6']\n",
      "\n",
      "Response:\n",
      "The next move is 'd4'\n"
     ]
    }
   ],
   "source": [
    "# On a new sample\n",
    "prompt = template.format(\n",
    "    instruction=\"Predict the next chess move in the sequence ['e4', 'e5', 'Nf3', 'Nc6']\",\n",
    "    response=\"\",\n",
    ")\n",
    "print(gemma_lm.generate(prompt, max_length=256))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffd7b9a1",
   "metadata": {
    "papermill": {
     "duration": 0.031172,
     "end_time": "2024-10-06T18:39:47.404354",
     "exception": false,
     "start_time": "2024-10-06T18:39:47.373182",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Interesting...it can predict past the 5th move, despite thats not in the training set...\n",
    "\n",
    "Lets see how it plays a game on its own."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6cb03d85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:39:47.467099Z",
     "iopub.status.busy": "2024-10-06T18:39:47.466658Z",
     "iopub.status.idle": "2024-10-06T18:39:50.558088Z",
     "shell.execute_reply": "2024-10-06T18:39:50.556694Z"
    },
    "papermill": {
     "duration": 3.125452,
     "end_time": "2024-10-06T18:39:50.560600",
     "exception": false,
     "start_time": "2024-10-06T18:39:47.435148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Nf3', 'e6', 'e4']\n",
      "['Nf3', 'e6', 'e4', 'e5']\n",
      "['Nf3', 'e6', 'e4', 'e5', 'Nf6']\n",
      "['Nf3', 'e6', 'e4', 'e5', 'Nf6', 'Nc6']\n",
      "['Nf3', 'e6', 'e4', 'e5', 'Nf6', 'Nc6', 'Nc3']\n",
      "['Nf3', 'e6', 'e4', 'e5', 'Nf6', 'Nc6', 'Nc3', 'd5']\n",
      "['Nf3', 'e6', 'e4', 'e5', 'Nf6', 'Nc6', 'Nc3', 'd5', 'd4']\n",
      "['Nf3', 'e6', 'e4', 'e5', 'Nf6', 'Nc6', 'Nc3', 'd5', 'd4', 'd3']\n"
     ]
    }
   ],
   "source": [
    "def play_game(moves, n=5):\n",
    "    move_list = moves\n",
    "    while len(move_list) < n:\n",
    "        prompt = template.format(\n",
    "            instruction=f\"Predict the next chess move in the sequence {str(move_list)}\",\n",
    "            response=\"\",\n",
    "        )\n",
    "\n",
    "        output = gemma_lm.generate(prompt, max_length=256)\n",
    "\n",
    "        move_list.append(output.split(' ')[-1].strip(\"'\"))\n",
    "\n",
    "        print(move_list)\n",
    "    \n",
    "play_game(['Nf3', 'e6'], 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fb91c19",
   "metadata": {
    "papermill": {
     "duration": 0.030994,
     "end_time": "2024-10-06T18:39:50.628546",
     "exception": false,
     "start_time": "2024-10-06T18:39:50.597552",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Save LoRA weights\n",
    "\n",
    "We only need to save the LoRA weights, which are very small compared to the model itsef."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c8b26f51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:39:50.693000Z",
     "iopub.status.busy": "2024-10-06T18:39:50.692619Z",
     "iopub.status.idle": "2024-10-06T18:39:50.758005Z",
     "shell.execute_reply": "2024-10-06T18:39:50.756926Z"
    },
    "papermill": {
     "duration": 0.100202,
     "end_time": "2024-10-06T18:39:50.760269",
     "exception": false,
     "start_time": "2024-10-06T18:39:50.660067",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# file_name = f\"gemma_2b_enV2-{tune_size}pgn\"\n",
    "gemma_lm.backbone.save_lora_weights(f\"/kaggle/working/{file_name}.lora.h5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38c463d5",
   "metadata": {
    "papermill": {
     "duration": 0.03157,
     "end_time": "2024-10-06T18:39:50.823705",
     "exception": false,
     "start_time": "2024-10-06T18:39:50.792135",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Example of how to load the model with LoRA weights."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "dedaf1a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-06T18:39:50.893808Z",
     "iopub.status.busy": "2024-10-06T18:39:50.892819Z",
     "iopub.status.idle": "2024-10-06T18:39:50.898227Z",
     "shell.execute_reply": "2024-10-06T18:39:50.897310Z"
    },
    "papermill": {
     "duration": 0.04394,
     "end_time": "2024-10-06T18:39:50.900414",
     "exception": false,
     "start_time": "2024-10-06T18:39:50.856474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Load the model like this\n",
    "\n",
    "# # Do TPU and GPU stuff\n",
    "# # .... \n",
    "\n",
    "# # Define paths\n",
    "# LORA_WEIGHTS_PATH = f\"/kaggle/working/{model_name}.lora.h5\"\n",
    "\n",
    "# model = keras_nlp.models.GemmaCausalLM.from_preset('gemma_instruct_2b_en')\n",
    "\n",
    "# model.backbone.enable_lora(rank=4)\n",
    "\n",
    "# model.preprocessor.sequence_length = 512\n",
    "\n",
    "# # Load only the lora weights\n",
    "# model.backbone.load_lora_weights(LORA_WEIGHTS_PATH)\n",
    "\n",
    "# output = model.generate(\"blah blah I'm a prompt template with stuff in me\", max_length=512)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 1488027,
     "sourceId": 2458363,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5790268,
     "sourceId": 9512215,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 3533,
     "modelInstanceId": 5171,
     "sourceId": 11371,
     "sourceType": "modelInstanceVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 3533,
     "modelInstanceId": 5388,
     "sourceId": 11372,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30776,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 526.9043,
   "end_time": "2024-10-06T18:39:53.686580",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-06T18:31:06.782280",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
